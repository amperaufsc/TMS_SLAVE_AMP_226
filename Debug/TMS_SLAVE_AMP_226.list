
TMS_SLAVE_AMP_226.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c14  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006df4  08006df4  00007df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e7c  08006e7c  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006e7c  08006e7c  00008010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006e7c  08006e7c  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e7c  08006e7c  00007e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e80  08006e80  00007e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006e84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de8  20000010  08006e94  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001df8  08006e94  00008df8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015865  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003375  00000000  00000000  0001d8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00020c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efb  00000000  00000000  00021fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cd2  00000000  00000000  00022ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d10  00000000  00000000  00044bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcf0c  00000000  00000000  000598c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001367d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  00136814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0013bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006ddc 	.word	0x08006ddc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08006ddc 	.word	0x08006ddc

08000220 <initializeHistory>:

float convertVoltageToTemperature(float voltage){
	return C0 + C1 * voltage + C2 * pow(voltage, 2) + C3 * pow(voltage, 3) + C4 *pow(voltage, 4);
}

void initializeHistory(){
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
	for (int i = 0; i < numberOfThermistors; i++){
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e024      	b.n	8000276 <initializeHistory+0x56>
		for(int j = 0; j < windowSize; j++){
 800022c:	2300      	movs	r3, #0
 800022e:	603b      	str	r3, [r7, #0]
 8000230:	e00f      	b.n	8000252 <initializeHistory+0x32>
			readingsHistory[i][j] = 0;
 8000232:	4916      	ldr	r1, [pc, #88]	@ (800028c <initializeHistory+0x6c>)
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4613      	mov	r3, r2
 8000238:	009b      	lsls	r3, r3, #2
 800023a:	4413      	add	r3, r2
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	683a      	ldr	r2, [r7, #0]
 8000240:	4413      	add	r3, r2
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	440b      	add	r3, r1
 8000246:	f04f 0200 	mov.w	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < windowSize; j++){
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	3301      	adds	r3, #1
 8000250:	603b      	str	r3, [r7, #0]
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	2b09      	cmp	r3, #9
 8000256:	ddec      	ble.n	8000232 <initializeHistory+0x12>
		}
		filteredReadings[i] = 0;
 8000258:	4a0d      	ldr	r2, [pc, #52]	@ (8000290 <initializeHistory+0x70>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	4413      	add	r3, r2
 8000260:	f04f 0200 	mov.w	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
		validReadingsCount[i] = 0;
 8000266:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <initializeHistory+0x74>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2100      	movs	r1, #0
 800026c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < numberOfThermistors; i++){
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3301      	adds	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b0f      	cmp	r3, #15
 800027a:	ddd7      	ble.n	800022c <initializeHistory+0xc>
	}
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	2000002c 	.word	0x2000002c
 8000290:	200002ac 	.word	0x200002ac
 8000294:	200002ec 	.word	0x200002ec

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 fca1 	bl	8000be2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f82c 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 fa56 	bl	8000754 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a8:	f000 fa2a 	bl	8000700 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80002ac:	f000 f9da 	bl	8000664 <MX_FDCAN1_Init>
  MX_ADC2_Init();
 80002b0:	f000 f870 	bl	8000394 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  initializeHistory();
 80002b4:	f7ff ffb4 	bl	8000220 <initializeHistory>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002b8:	f003 feec 	bl	8004094 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xReadTemp */
  xReadTempHandle = osThreadNew(xReadTempFunction, NULL, &xReadTemp_attributes);
 80002bc:	4a09      	ldr	r2, [pc, #36]	@ (80002e4 <main+0x4c>)
 80002be:	2100      	movs	r1, #0
 80002c0:	4809      	ldr	r0, [pc, #36]	@ (80002e8 <main+0x50>)
 80002c2:	f003 ff31 	bl	8004128 <osThreadNew>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a08      	ldr	r2, [pc, #32]	@ (80002ec <main+0x54>)
 80002ca:	6013      	str	r3, [r2, #0]

  /* creation of xSendCAN */
  xSendCANHandle = osThreadNew(xSendCANFunction, NULL, &xSendCAN_attributes);
 80002cc:	4a08      	ldr	r2, [pc, #32]	@ (80002f0 <main+0x58>)
 80002ce:	2100      	movs	r1, #0
 80002d0:	4808      	ldr	r0, [pc, #32]	@ (80002f4 <main+0x5c>)
 80002d2:	f003 ff29 	bl	8004128 <osThreadNew>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4a07      	ldr	r2, [pc, #28]	@ (80002f8 <main+0x60>)
 80002da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002dc:	f003 fefe 	bl	80040dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e0:	bf00      	nop
 80002e2:	e7fd      	b.n	80002e0 <main+0x48>
 80002e4:	08006e24 	.word	0x08006e24
 80002e8:	08000811 	.word	0x08000811
 80002ec:	2000045c 	.word	0x2000045c
 80002f0:	08006e48 	.word	0x08006e48
 80002f4:	0800083d 	.word	0x0800083d
 80002f8:	20000460 	.word	0x20000460

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b094      	sub	sp, #80	@ 0x50
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2238      	movs	r2, #56	@ 0x38
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f006 fd2c 	bl	8006d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800031e:	2000      	movs	r0, #0
 8000320:	f002 fe9e 	bl	8003060 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000324:	2302      	movs	r3, #2
 8000326:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800032c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032e:	2340      	movs	r3, #64	@ 0x40
 8000330:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000336:	2302      	movs	r3, #2
 8000338:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800033a:	2304      	movs	r3, #4
 800033c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800033e:	2355      	movs	r3, #85	@ 0x55
 8000340:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000342:	2302      	movs	r3, #2
 8000344:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000346:	2302      	movs	r3, #2
 8000348:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800034a:	2302      	movs	r3, #2
 800034c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0318 	add.w	r3, r7, #24
 8000352:	4618      	mov	r0, r3
 8000354:	f002 ff38 	bl	80031c8 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800035e:	f000 fa75 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2303      	movs	r3, #3
 8000368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2104      	movs	r1, #4
 800037a:	4618      	mov	r0, r3
 800037c:	f003 fa36 	bl	80037ec <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000386:	f000 fa61 	bl	800084c <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	3750      	adds	r7, #80	@ 0x50
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039a:	463b      	mov	r3, r7
 800039c:	2220      	movs	r2, #32
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f006 fce1 	bl	8006d68 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003a6:	4b9c      	ldr	r3, [pc, #624]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003a8:	4a9c      	ldr	r2, [pc, #624]	@ (800061c <MX_ADC2_Init+0x288>)
 80003aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80003ac:	4b9a      	ldr	r3, [pc, #616]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80003b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003b4:	4b98      	ldr	r3, [pc, #608]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ba:	4b97      	ldr	r3, [pc, #604]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003bc:	2200      	movs	r2, #0
 80003be:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80003c0:	4b95      	ldr	r3, [pc, #596]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003c6:	4b94      	ldr	r3, [pc, #592]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003cc:	4b92      	ldr	r3, [pc, #584]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003ce:	2204      	movs	r2, #4
 80003d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003d2:	4b91      	ldr	r3, [pc, #580]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80003d8:	4b8f      	ldr	r3, [pc, #572]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003da:	2201      	movs	r2, #1
 80003dc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 16;
 80003de:	4b8e      	ldr	r3, [pc, #568]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003e0:	2210      	movs	r2, #16
 80003e2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003e4:	4b8c      	ldr	r3, [pc, #560]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b8a      	ldr	r3, [pc, #552]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f2:	4b89      	ldr	r3, [pc, #548]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80003f8:	4b87      	ldr	r3, [pc, #540]	@ (8000618 <MX_ADC2_Init+0x284>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000400:	4b85      	ldr	r3, [pc, #532]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000402:	2200      	movs	r2, #0
 8000404:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000406:	4b84      	ldr	r3, [pc, #528]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000408:	2200      	movs	r2, #0
 800040a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800040e:	4882      	ldr	r0, [pc, #520]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000410:	f000 fe76 	bl	8001100 <HAL_ADC_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800041a:	f000 fa17 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800041e:	4b80      	ldr	r3, [pc, #512]	@ (8000620 <MX_ADC2_Init+0x28c>)
 8000420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000422:	2306      	movs	r3, #6
 8000424:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000426:	2307      	movs	r3, #7
 8000428:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800042a:	237f      	movs	r3, #127	@ 0x7f
 800042c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800042e:	2304      	movs	r3, #4
 8000430:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	4877      	ldr	r0, [pc, #476]	@ (8000618 <MX_ADC2_Init+0x284>)
 800043c:	f001 f8ec 	bl	8001618 <HAL_ADC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000446:	f000 fa01 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800044a:	4b76      	ldr	r3, [pc, #472]	@ (8000624 <MX_ADC2_Init+0x290>)
 800044c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800044e:	230c      	movs	r3, #12
 8000450:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000452:	463b      	mov	r3, r7
 8000454:	4619      	mov	r1, r3
 8000456:	4870      	ldr	r0, [pc, #448]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000458:	f001 f8de 	bl	8001618 <HAL_ADC_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000462:	f000 f9f3 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000466:	4b70      	ldr	r3, [pc, #448]	@ (8000628 <MX_ADC2_Init+0x294>)
 8000468:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800046a:	2312      	movs	r3, #18
 800046c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800046e:	463b      	mov	r3, r7
 8000470:	4619      	mov	r1, r3
 8000472:	4869      	ldr	r0, [pc, #420]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000474:	f001 f8d0 	bl	8001618 <HAL_ADC_ConfigChannel>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800047e:	f000 f9e5 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000482:	4b6a      	ldr	r3, [pc, #424]	@ (800062c <MX_ADC2_Init+0x298>)
 8000484:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000486:	2318      	movs	r3, #24
 8000488:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800048a:	463b      	mov	r3, r7
 800048c:	4619      	mov	r1, r3
 800048e:	4862      	ldr	r0, [pc, #392]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000490:	f001 f8c2 	bl	8001618 <HAL_ADC_ConfigChannel>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 800049a:	f000 f9d7 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800049e:	4b64      	ldr	r3, [pc, #400]	@ (8000630 <MX_ADC2_Init+0x29c>)
 80004a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80004a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004a8:	463b      	mov	r3, r7
 80004aa:	4619      	mov	r1, r3
 80004ac:	485a      	ldr	r0, [pc, #360]	@ (8000618 <MX_ADC2_Init+0x284>)
 80004ae:	f001 f8b3 	bl	8001618 <HAL_ADC_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80004b8:	f000 f9c8 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004bc:	4b5d      	ldr	r3, [pc, #372]	@ (8000634 <MX_ADC2_Init+0x2a0>)
 80004be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80004c0:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80004c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004c6:	463b      	mov	r3, r7
 80004c8:	4619      	mov	r1, r3
 80004ca:	4853      	ldr	r0, [pc, #332]	@ (8000618 <MX_ADC2_Init+0x284>)
 80004cc:	f001 f8a4 	bl	8001618 <HAL_ADC_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 80004d6:	f000 f9b9 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004da:	4b57      	ldr	r3, [pc, #348]	@ (8000638 <MX_ADC2_Init+0x2a4>)
 80004dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80004de:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80004e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004e4:	463b      	mov	r3, r7
 80004e6:	4619      	mov	r1, r3
 80004e8:	484b      	ldr	r0, [pc, #300]	@ (8000618 <MX_ADC2_Init+0x284>)
 80004ea:	f001 f895 	bl	8001618 <HAL_ADC_ConfigChannel>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 80004f4:	f000 f9aa 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80004f8:	4b50      	ldr	r3, [pc, #320]	@ (800063c <MX_ADC2_Init+0x2a8>)
 80004fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80004fc:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000500:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000502:	463b      	mov	r3, r7
 8000504:	4619      	mov	r1, r3
 8000506:	4844      	ldr	r0, [pc, #272]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000508:	f001 f886 	bl	8001618 <HAL_ADC_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 8000512:	f000 f99b 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000516:	4b4a      	ldr	r3, [pc, #296]	@ (8000640 <MX_ADC2_Init+0x2ac>)
 8000518:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800051a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800051e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000520:	463b      	mov	r3, r7
 8000522:	4619      	mov	r1, r3
 8000524:	483c      	ldr	r0, [pc, #240]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000526:	f001 f877 	bl	8001618 <HAL_ADC_ConfigChannel>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC2_Init+0x1a0>
  {
    Error_Handler();
 8000530:	f000 f98c 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000534:	4b43      	ldr	r3, [pc, #268]	@ (8000644 <MX_ADC2_Init+0x2b0>)
 8000536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800053c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	4835      	ldr	r0, [pc, #212]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000544:	f001 f868 	bl	8001618 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC2_Init+0x1be>
  {
    Error_Handler();
 800054e:	f000 f97d 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000552:	4b3d      	ldr	r3, [pc, #244]	@ (8000648 <MX_ADC2_Init+0x2b4>)
 8000554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000556:	f240 2306 	movw	r3, #518	@ 0x206
 800055a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	482d      	ldr	r0, [pc, #180]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000562:	f001 f859 	bl	8001618 <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC2_Init+0x1dc>
  {
    Error_Handler();
 800056c:	f000 f96e 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000570:	4b36      	ldr	r3, [pc, #216]	@ (800064c <MX_ADC2_Init+0x2b8>)
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000574:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000578:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	4619      	mov	r1, r3
 800057e:	4826      	ldr	r0, [pc, #152]	@ (8000618 <MX_ADC2_Init+0x284>)
 8000580:	f001 f84a 	bl	8001618 <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC2_Init+0x1fa>
  {
    Error_Handler();
 800058a:	f000 f95f 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800058e:	4b30      	ldr	r3, [pc, #192]	@ (8000650 <MX_ADC2_Init+0x2bc>)
 8000590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000592:	f240 2312 	movw	r3, #530	@ 0x212
 8000596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	4619      	mov	r1, r3
 800059c:	481e      	ldr	r0, [pc, #120]	@ (8000618 <MX_ADC2_Init+0x284>)
 800059e:	f001 f83b 	bl	8001618 <HAL_ADC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC2_Init+0x218>
  {
    Error_Handler();
 80005a8:	f000 f950 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80005ac:	4b29      	ldr	r3, [pc, #164]	@ (8000654 <MX_ADC2_Init+0x2c0>)
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80005b0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80005b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4817      	ldr	r0, [pc, #92]	@ (8000618 <MX_ADC2_Init+0x284>)
 80005bc:	f001 f82c 	bl	8001618 <HAL_ADC_ConfigChannel>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC2_Init+0x236>
  {
    Error_Handler();
 80005c6:	f000 f941 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005ca:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <MX_ADC2_Init+0x2c4>)
 80005cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80005ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	480f      	ldr	r0, [pc, #60]	@ (8000618 <MX_ADC2_Init+0x284>)
 80005da:	f001 f81d 	bl	8001618 <HAL_ADC_ConfigChannel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC2_Init+0x254>
  {
    Error_Handler();
 80005e4:	f000 f932 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80005e8:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <MX_ADC2_Init+0x2c8>)
 80005ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80005ec:	f240 3306 	movw	r3, #774	@ 0x306
 80005f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	4619      	mov	r1, r3
 80005f6:	4808      	ldr	r0, [pc, #32]	@ (8000618 <MX_ADC2_Init+0x284>)
 80005f8:	f001 f80e 	bl	8001618 <HAL_ADC_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC2_Init+0x272>
  {
    Error_Handler();
 8000602:	f000 f923 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) rawAdcBuffer, numberOfThermistors);
 8000606:	2210      	movs	r2, #16
 8000608:	4915      	ldr	r1, [pc, #84]	@ (8000660 <MX_ADC2_Init+0x2cc>)
 800060a:	4803      	ldr	r0, [pc, #12]	@ (8000618 <MX_ADC2_Init+0x284>)
 800060c:	f000 ff26 	bl	800145c <HAL_ADC_Start_DMA>
  /* USER CODE END ADC2_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000032c 	.word	0x2000032c
 800061c:	50000100 	.word	0x50000100
 8000620:	04300002 	.word	0x04300002
 8000624:	08600004 	.word	0x08600004
 8000628:	0c900008 	.word	0x0c900008
 800062c:	10c00010 	.word	0x10c00010
 8000630:	14f00020 	.word	0x14f00020
 8000634:	19200040 	.word	0x19200040
 8000638:	1d500080 	.word	0x1d500080
 800063c:	21800100 	.word	0x21800100
 8000640:	25b00200 	.word	0x25b00200
 8000644:	2a000400 	.word	0x2a000400
 8000648:	2e300800 	.word	0x2e300800
 800064c:	32601000 	.word	0x32601000
 8000650:	36902000 	.word	0x36902000
 8000654:	3ac04000 	.word	0x3ac04000
 8000658:	3ef08000 	.word	0x3ef08000
 800065c:	47520000 	.word	0x47520000
 8000660:	20000464 	.word	0x20000464

08000664 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 800066a:	4a24      	ldr	r2, [pc, #144]	@ (80006fc <MX_FDCAN1_Init+0x98>)
 800066c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000674:	4b20      	ldr	r3, [pc, #128]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800067a:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000680:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 8000682:	2200      	movs	r2, #0
 8000684:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000686:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800068c:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 800068e:	2200      	movs	r2, #0
 8000690:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 8000694:	220a      	movs	r2, #10
 8000696:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 800069a:	2201      	movs	r2, #1
 800069c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006a0:	2216      	movs	r2, #22
 80006a2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 80006a4:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006a6:	220b      	movs	r2, #11
 80006a8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006be:	2201      	movs	r2, #1
 80006c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006d4:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006d6:	f002 f877 	bl	80027c8 <HAL_FDCAN_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006e0:	f000 f8b4 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2101      	movs	r1, #1
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006ea:	f002 f9ef 	bl	8002acc <HAL_FDCAN_ActivateNotification>
  HAL_FDCAN_Start(&hfdcan1);
 80006ee:	4802      	ldr	r0, [pc, #8]	@ (80006f8 <MX_FDCAN1_Init+0x94>)
 80006f0:	f002 f9c4 	bl	8002a7c <HAL_FDCAN_Start>
  /* USER CODE END FDCAN1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200003f8 	.word	0x200003f8
 80006fc:	40006400 	.word	0x40006400

08000700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_DMA_Init+0x50>)
 8000708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800070a:	4a11      	ldr	r2, [pc, #68]	@ (8000750 <MX_DMA_Init+0x50>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6493      	str	r3, [r2, #72]	@ 0x48
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_DMA_Init+0x50>)
 8000714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_DMA_Init+0x50>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a0b      	ldr	r2, [pc, #44]	@ (8000750 <MX_DMA_Init+0x50>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_DMA_Init+0x50>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2105      	movs	r1, #5
 800073a:	200b      	movs	r0, #11
 800073c:	f001 fd9d 	bl	800227a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000740:	200b      	movs	r0, #11
 8000742:	f001 fdb4 	bl	80022ae <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_GPIO_Init+0x74>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	4a1a      	ldr	r2, [pc, #104]	@ (80007c8 <MX_GPIO_Init+0x74>)
 8000760:	f043 0320 	orr.w	r3, r3, #32
 8000764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_GPIO_Init+0x74>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	f003 0320 	and.w	r3, r3, #32
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_GPIO_Init+0x74>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <MX_GPIO_Init+0x74>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_GPIO_Init+0x74>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_GPIO_Init+0x74>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a0e      	ldr	r2, [pc, #56]	@ (80007c8 <MX_GPIO_Init+0x74>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_GPIO_Init+0x74>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_GPIO_Init+0x74>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <MX_GPIO_Init+0x74>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_GPIO_Init+0x74>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(xReadTempHandle, &xHigherPriorityTaskWoken);
 80007d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <HAL_ADC_ConvCpltCallback+0x3c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f107 020c 	add.w	r2, r7, #12
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 fa40 	bl	8005c68 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d007      	beq.n	80007fe <HAL_ADC_ConvCpltCallback+0x32>
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <HAL_ADC_ConvCpltCallback+0x40>)
 80007f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	f3bf 8f4f 	dsb	sy
 80007fa:	f3bf 8f6f 	isb	sy
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000045c 	.word	0x2000045c
 800080c:	e000ed04 	.word	0xe000ed04

08000810 <xReadTempFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_xReadTempFunction */
void xReadTempFunction(void *argument)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	xReadTempHandle = xTaskGetCurrentTaskHandle();
 8000818:	f005 f940 	bl	8005a9c <xTaskGetCurrentTaskHandle>
 800081c:	4603      	mov	r3, r0
 800081e:	4a06      	ldr	r2, [pc, #24]	@ (8000838 <xReadTempFunction+0x28>)
 8000820:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000822:	f04f 31ff 	mov.w	r1, #4294967295
 8000826:	2001      	movs	r0, #1
 8000828:	f005 f9d6 	bl	8005bd8 <ulTaskNotifyTake>
	  osDelay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f003 fd0d 	bl	800424c <osDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000832:	bf00      	nop
 8000834:	e7f5      	b.n	8000822 <xReadTempFunction+0x12>
 8000836:	bf00      	nop
 8000838:	2000045c 	.word	0x2000045c

0800083c <xSendCANFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_xSendCANFunction */
void xSendCANFunction(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN xSendCANFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f003 fd01 	bl	800424c <osDelay>
 800084a:	e7fb      	b.n	8000844 <xSendCANFunction+0x8>

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <HAL_MspInit+0x50>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000862:	4a11      	ldr	r2, [pc, #68]	@ (80008a8 <HAL_MspInit+0x50>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	@ 0x60
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_MspInit+0x50>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <HAL_MspInit+0x50>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	4a0b      	ldr	r2, [pc, #44]	@ (80008a8 <HAL_MspInit+0x50>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	@ 0x58
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <HAL_MspInit+0x50>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f001 fcf0 	bl	800227a <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800089a:	f002 fc85 	bl	80031a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0a0      	sub	sp, #128	@ 0x80
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	2250      	movs	r2, #80	@ 0x50
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f006 fa4b 	bl	8006d68 <memset>
  if(hadc->Instance==ADC2)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a58      	ldr	r2, [pc, #352]	@ (8000a38 <HAL_ADC_MspInit+0x18c>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	f040 80a9 	bne.w	8000a30 <HAL_ADC_MspInit+0x184>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008e4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 f960 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80008fa:	f7ff ffa7 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008fe:	4b4f      	ldr	r3, [pc, #316]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4a4e      	ldr	r2, [pc, #312]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 8000904:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	4b49      	ldr	r3, [pc, #292]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a48      	ldr	r2, [pc, #288]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 800091c:	f043 0320 	orr.w	r3, r3, #32
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b46      	ldr	r3, [pc, #280]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0320 	and.w	r3, r3, #32
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b43      	ldr	r3, [pc, #268]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a42      	ldr	r2, [pc, #264]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b40      	ldr	r3, [pc, #256]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b3d      	ldr	r3, [pc, #244]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4a3c      	ldr	r2, [pc, #240]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4b3a      	ldr	r3, [pc, #232]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b37      	ldr	r3, [pc, #220]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	4a36      	ldr	r2, [pc, #216]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096a:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <HAL_ADC_MspInit+0x190>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ADC2_IN11
    PB2     ------> ADC2_IN12
    PB11     ------> ADC2_IN14
    PB15     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000976:	2302      	movs	r3, #2
 8000978:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097a:	2303      	movs	r3, #3
 800097c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000982:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000986:	4619      	mov	r1, r3
 8000988:	482d      	ldr	r0, [pc, #180]	@ (8000a40 <HAL_ADC_MspInit+0x194>)
 800098a:	f002 f9e7 	bl	8002d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800098e:	233f      	movs	r3, #63	@ 0x3f
 8000990:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000992:	2303      	movs	r3, #3
 8000994:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800099e:	4619      	mov	r1, r3
 80009a0:	4828      	ldr	r0, [pc, #160]	@ (8000a44 <HAL_ADC_MspInit+0x198>)
 80009a2:	f002 f9db 	bl	8002d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80009a6:	23f3      	movs	r3, #243	@ 0xf3
 80009a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009b6:	4619      	mov	r1, r3
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009bc:	f002 f9ce 	bl	8002d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_15;
 80009c0:	f648 0304 	movw	r3, #34820	@ 0x8804
 80009c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c6:	2303      	movs	r3, #3
 80009c8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009d2:	4619      	mov	r1, r3
 80009d4:	481c      	ldr	r0, [pc, #112]	@ (8000a48 <HAL_ADC_MspInit+0x19c>)
 80009d6:	f002 f9c1 	bl	8002d5c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80009da:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 80009dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000a50 <HAL_ADC_MspInit+0x1a4>)
 80009de:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 80009e2:	2224      	movs	r2, #36	@ 0x24
 80009e4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 80009fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 8000a02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a06:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 8000a0a:	2220      	movs	r2, #32
 8000a0c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a14:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 8000a16:	f001 fc65 	bl	80022e4 <HAL_DMA_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000a20:	f7ff ff14 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a09      	ldr	r2, [pc, #36]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 8000a28:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a2a:	4a08      	ldr	r2, [pc, #32]	@ (8000a4c <HAL_ADC_MspInit+0x1a0>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8000a30:	bf00      	nop
 8000a32:	3780      	adds	r7, #128	@ 0x80
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	50000100 	.word	0x50000100
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	48001400 	.word	0x48001400
 8000a44:	48000800 	.word	0x48000800
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	20000398 	.word	0x20000398
 8000a50:	40020008 	.word	0x40020008

08000a54 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09e      	sub	sp, #120	@ 0x78
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2250      	movs	r2, #80	@ 0x50
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f006 f977 	bl	8006d68 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a20      	ldr	r2, [pc, #128]	@ (8000b00 <HAL_FDCAN_MspInit+0xac>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d139      	bne.n	8000af8 <HAL_FDCAN_MspInit+0xa4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a88:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 f88d 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000aa0:	f7ff fed4 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000aa4:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <HAL_FDCAN_MspInit+0xb0>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa8:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <HAL_FDCAN_MspInit+0xb0>)
 8000aaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <HAL_FDCAN_MspInit+0xb0>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_FDCAN_MspInit+0xb0>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_FDCAN_MspInit+0xb0>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_FDCAN_MspInit+0xb0>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ad4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ad8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ae6:	2309      	movs	r3, #9
 8000ae8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f002 f932 	bl	8002d5c <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000af8:	bf00      	nop
 8000afa:	3778      	adds	r7, #120	@ 0x78
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40006400 	.word	0x40006400
 8000b04:	40021000 	.word	0x40021000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b42:	f000 f8a1 	bl	8000c88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b46:	f004 ffb9 	bl	8005abc <xTaskGetSchedulerState>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d001      	beq.n	8000b54 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b50:	f005 fe8a 	bl	8006868 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <DMA1_Channel1_IRQHandler+0x10>)
 8000b5e:	f001 fce4 	bl	800252a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000398 	.word	0x20000398

08000b6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b90:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b92:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b94:	f7ff ffea 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <LoopForever+0xe>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bdc <LoopForever+0x16>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f006 f8db 	bl	8006d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc2:	f7ff fb69 	bl	8000298 <main>

08000bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc6:	e7fe      	b.n	8000bc6 <LoopForever>
  ldr   r0, =_estack
 8000bc8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bd4:	08006e84 	.word	0x08006e84
  ldr r2, =_sbss
 8000bd8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bdc:	20001df8 	.word	0x20001df8

08000be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC1_2_IRQHandler>

08000be2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f001 fb39 	bl	8002264 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f000 f80e 	bl	8000c14 <HAL_InitTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	71fb      	strb	r3, [r7, #7]
 8000c02:	e001      	b.n	8000c08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c04:	f7ff fe28 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c08:	79fb      	ldrb	r3, [r7, #7]

}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <HAL_InitTick+0x68>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d022      	beq.n	8000c6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <HAL_InitTick+0x6c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <HAL_InitTick+0x68>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fb44 	bl	80022ca <HAL_SYSTICK_Config>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10f      	bne.n	8000c68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b0f      	cmp	r3, #15
 8000c4c:	d809      	bhi.n	8000c62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	f04f 30ff 	mov.w	r0, #4294967295
 8000c56:	f001 fb10 	bl	800227a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_InitTick+0x70>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	e007      	b.n	8000c72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e004      	b.n	8000c72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e001      	b.n	8000c72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x1c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a03      	ldr	r2, [pc, #12]	@ (8000ca4 <HAL_IncTick+0x1c>)
 8000c98:	6013      	str	r3, [r2, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	200004a4 	.word	0x200004a4
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	200004a4 	.word	0x200004a4

08000cc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	609a      	str	r2, [r3, #8]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3360      	adds	r3, #96	@ 0x60
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <LL_ADC_SetOffset+0x44>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d64:	bf00      	nop
 8000d66:	371c      	adds	r7, #28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	03fff000 	.word	0x03fff000

08000d74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3360      	adds	r3, #96	@ 0x60
 8000d82:	461a      	mov	r2, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3360      	adds	r3, #96	@ 0x60
 8000db0:	461a      	mov	r2, r3
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dca:	bf00      	nop
 8000dcc:	371c      	adds	r7, #28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b087      	sub	sp, #28
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3360      	adds	r3, #96	@ 0x60
 8000de6:	461a      	mov	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3360      	adds	r3, #96	@ 0x60
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	431a      	orrs	r2, r3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000e36:	bf00      	nop
 8000e38:	371c      	adds	r7, #28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	615a      	str	r2, [r3, #20]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e000      	b.n	8000e82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b087      	sub	sp, #28
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3330      	adds	r3, #48	@ 0x30
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	4413      	add	r3, r2
 8000eac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	211f      	movs	r1, #31
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	0e9b      	lsrs	r3, r3, #26
 8000ec6:	f003 011f 	and.w	r1, r3, #31
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000eda:	bf00      	nop
 8000edc:	371c      	adds	r7, #28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b087      	sub	sp, #28
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3314      	adds	r3, #20
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	0e5b      	lsrs	r3, r3, #25
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	4413      	add	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	0d1b      	lsrs	r3, r3, #20
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	2107      	movs	r1, #7
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	0d1b      	lsrs	r3, r3, #20
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f30:	bf00      	nop
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0318 	and.w	r3, r3, #24
 8000f5e:	4908      	ldr	r1, [pc, #32]	@ (8000f80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f60:	40d9      	lsrs	r1, r3
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	400b      	ands	r3, r1
 8000f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	0007ffff 	.word	0x0007ffff

08000f84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 031f 	and.w	r3, r3, #31
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000fb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	6093      	str	r3, [r2, #8]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fd8:	d101      	bne.n	8000fde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ffc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001000:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001028:	d101      	bne.n	800102e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001050:	f043 0201 	orr.w	r2, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <LL_ADC_IsEnabled+0x18>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <LL_ADC_IsEnabled+0x1a>
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800109a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800109e:	f043 0204 	orr.w	r2, r3, #4
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d101      	bne.n	80010ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d101      	bne.n	80010f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e19b      	b.n	8001452 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001124:	2b00      	cmp	r3, #0
 8001126:	d109      	bne.n	800113c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff fbbf 	bl	80008ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff3f 	bl	8000fc4 <LL_ADC_IsDeepPowerDownEnabled>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff25 	bl	8000fa0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff5a 	bl	8001014 <LL_ADC_IsInternalRegulatorEnabled>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d115      	bne.n	8001192 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff3e 	bl	8000fec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001170:	4b97      	ldr	r3, [pc, #604]	@ (80013d0 <HAL_ADC_Init+0x2d0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	099b      	lsrs	r3, r3, #6
 8001176:	4a97      	ldr	r2, [pc, #604]	@ (80013d4 <HAL_ADC_Init+0x2d4>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	3301      	adds	r3, #1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001184:	e002      	b.n	800118c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3b01      	subs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f9      	bne.n	8001186 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff3c 	bl	8001014 <LL_ADC_IsInternalRegulatorEnabled>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10d      	bne.n	80011be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a6:	f043 0210 	orr.w	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff75 	bl	80010b2 <LL_ADC_REG_IsConversionOngoing>
 80011c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ce:	f003 0310 	and.w	r3, r3, #16
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 8134 	bne.w	8001440 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 8130 	bne.w	8001440 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80011e8:	f043 0202 	orr.w	r2, r3, #2
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff35 	bl	8001064 <LL_ADC_IsEnabled>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d137      	bne.n	8001270 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001208:	d004      	beq.n	8001214 <HAL_ADC_Init+0x114>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a72      	ldr	r2, [pc, #456]	@ (80013d8 <HAL_ADC_Init+0x2d8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d10f      	bne.n	8001234 <HAL_ADC_Init+0x134>
 8001214:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001218:	f7ff ff24 	bl	8001064 <LL_ADC_IsEnabled>
 800121c:	4604      	mov	r4, r0
 800121e:	486e      	ldr	r0, [pc, #440]	@ (80013d8 <HAL_ADC_Init+0x2d8>)
 8001220:	f7ff ff20 	bl	8001064 <LL_ADC_IsEnabled>
 8001224:	4603      	mov	r3, r0
 8001226:	4323      	orrs	r3, r4
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	e008      	b.n	8001246 <HAL_ADC_Init+0x146>
 8001234:	4869      	ldr	r0, [pc, #420]	@ (80013dc <HAL_ADC_Init+0x2dc>)
 8001236:	f7ff ff15 	bl	8001064 <LL_ADC_IsEnabled>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d012      	beq.n	8001270 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001252:	d004      	beq.n	800125e <HAL_ADC_Init+0x15e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a5f      	ldr	r2, [pc, #380]	@ (80013d8 <HAL_ADC_Init+0x2d8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_ADC_Init+0x162>
 800125e:	4a60      	ldr	r2, [pc, #384]	@ (80013e0 <HAL_ADC_Init+0x2e0>)
 8001260:	e000      	b.n	8001264 <HAL_ADC_Init+0x164>
 8001262:	4a60      	ldr	r2, [pc, #384]	@ (80013e4 <HAL_ADC_Init+0x2e4>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f7ff fd2a 	bl	8000cc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7f5b      	ldrb	r3, [r3, #29]
 8001274:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800127a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001280:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001286:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800128e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800129a:	2b01      	cmp	r3, #1
 800129c:	d106      	bne.n	80012ac <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a2:	3b01      	subs	r3, #1
 80012a4:	045b      	lsls	r3, r3, #17
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d009      	beq.n	80012c8 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	4b46      	ldr	r3, [pc, #280]	@ (80013e8 <HAL_ADC_Init+0x2e8>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	430b      	orrs	r3, r1
 80012da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff feee 	bl	80010d8 <LL_ADC_INJ_IsConversionOngoing>
 80012fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d17b      	bne.n	80013fc <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d178      	bne.n	80013fc <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800130e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001316:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001326:	f023 0302 	bic.w	r3, r3, #2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	69b9      	ldr	r1, [r7, #24]
 8001330:	430b      	orrs	r3, r1
 8001332:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d017      	beq.n	800136c <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800134a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001354:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001358:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6911      	ldr	r1, [r2, #16]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	430b      	orrs	r3, r1
 8001366:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800136a:	e013      	b.n	8001394 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800137a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800138c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001390:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800139a:	2b01      	cmp	r3, #1
 800139c:	d126      	bne.n	80013ec <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80013b4:	4311      	orrs	r1, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80013ba:	4311      	orrs	r1, r2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013c0:	430a      	orrs	r2, r1
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f042 0201 	orr.w	r2, r2, #1
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	e015      	b.n	80013fc <HAL_ADC_Init+0x2fc>
 80013d0:	20000000 	.word	0x20000000
 80013d4:	053e2d63 	.word	0x053e2d63
 80013d8:	50000100 	.word	0x50000100
 80013dc:	50000400 	.word	0x50000400
 80013e0:	50000300 	.word	0x50000300
 80013e4:	50000700 	.word	0x50000700
 80013e8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10c      	bne.n	800141e <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f023 010f 	bic.w	r1, r3, #15
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	1e5a      	subs	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	631a      	str	r2, [r3, #48]	@ 0x30
 800141c:	e007      	b.n	800142e <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 020f 	bic.w	r2, r2, #15
 800142c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800143e:	e007      	b.n	8001450 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001444:	f043 0210 	orr.w	r2, r3, #16
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001450:	7ffb      	ldrb	r3, [r7, #31]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	@ 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	bf00      	nop

0800145c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001470:	d004      	beq.n	800147c <HAL_ADC_Start_DMA+0x20>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a57      	ldr	r2, [pc, #348]	@ (80015d4 <HAL_ADC_Start_DMA+0x178>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d101      	bne.n	8001480 <HAL_ADC_Start_DMA+0x24>
 800147c:	4b56      	ldr	r3, [pc, #344]	@ (80015d8 <HAL_ADC_Start_DMA+0x17c>)
 800147e:	e000      	b.n	8001482 <HAL_ADC_Start_DMA+0x26>
 8001480:	4b56      	ldr	r3, [pc, #344]	@ (80015dc <HAL_ADC_Start_DMA+0x180>)
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fd7e 	bl	8000f84 <LL_ADC_GetMultimode>
 8001488:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fe0f 	bl	80010b2 <LL_ADC_REG_IsConversionOngoing>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 8094 	bne.w	80015c4 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_Start_DMA+0x4e>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e08f      	b.n	80015ca <HAL_ADC_Start_DMA+0x16e>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a4a      	ldr	r2, [pc, #296]	@ (80015e0 <HAL_ADC_Start_DMA+0x184>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d008      	beq.n	80014ce <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d002      	beq.n	80014ce <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	2b09      	cmp	r3, #9
 80014cc:	d173      	bne.n	80015b6 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 fcce 	bl	8001e70 <ADC_Enable>
 80014d4:	4603      	mov	r3, r0
 80014d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d166      	bne.n	80015ac <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a37      	ldr	r2, [pc, #220]	@ (80015d4 <HAL_ADC_Start_DMA+0x178>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d002      	beq.n	8001502 <HAL_ADC_Start_DMA+0xa6>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	e001      	b.n	8001506 <HAL_ADC_Start_DMA+0xaa>
 8001502:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	4293      	cmp	r3, r2
 800150c:	d002      	beq.n	8001514 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001518:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001530:	f023 0206 	bic.w	r2, r3, #6
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	661a      	str	r2, [r3, #96]	@ 0x60
 8001538:	e002      	b.n	8001540 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001544:	4a27      	ldr	r2, [pc, #156]	@ (80015e4 <HAL_ADC_Start_DMA+0x188>)
 8001546:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800154c:	4a26      	ldr	r2, [pc, #152]	@ (80015e8 <HAL_ADC_Start_DMA+0x18c>)
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001554:	4a25      	ldr	r2, [pc, #148]	@ (80015ec <HAL_ADC_Start_DMA+0x190>)
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	221c      	movs	r2, #28
 800155e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0210 	orr.w	r2, r2, #16
 8001576:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3340      	adds	r3, #64	@ 0x40
 8001592:	4619      	mov	r1, r3
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f000 ff4c 	bl	8002434 <HAL_DMA_Start_IT>
 800159c:	4603      	mov	r3, r0
 800159e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fd70 	bl	800108a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80015aa:	e00d      	b.n	80015c8 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80015b4:	e008      	b.n	80015c8 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80015c2:	e001      	b.n	80015c8 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015c4:	2302      	movs	r3, #2
 80015c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	50000100 	.word	0x50000100
 80015d8:	50000300 	.word	0x50000300
 80015dc:	50000700 	.word	0x50000700
 80015e0:	50000400 	.word	0x50000400
 80015e4:	08001f9d 	.word	0x08001f9d
 80015e8:	08002075 	.word	0x08002075
 80015ec:	08002091 	.word	0x08002091

080015f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0b6      	sub	sp, #216	@ 0xd8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001632:	2b01      	cmp	r3, #1
 8001634:	d102      	bne.n	800163c <HAL_ADC_ConfigChannel+0x24>
 8001636:	2302      	movs	r3, #2
 8001638:	f000 bc04 	b.w	8001e44 <HAL_ADC_ConfigChannel+0x82c>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fd32 	bl	80010b2 <LL_ADC_REG_IsConversionOngoing>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 83e8 	bne.w	8001e26 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	6859      	ldr	r1, [r3, #4]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	f7ff fc13 	bl	8000e8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fd20 	bl	80010b2 <LL_ADC_REG_IsConversionOngoing>
 8001672:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fd2c 	bl	80010d8 <LL_ADC_INJ_IsConversionOngoing>
 8001680:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001684:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001688:	2b00      	cmp	r3, #0
 800168a:	f040 81d9 	bne.w	8001a40 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800168e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 81d4 	bne.w	8001a40 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016a0:	d10f      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fc1a 	bl	8000ee6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fbc1 	bl	8000e42 <LL_ADC_SetSamplingTimeCommonConfig>
 80016c0:	e00e      	b.n	80016e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6819      	ldr	r1, [r3, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f7ff fc09 	bl	8000ee6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fbb1 	bl	8000e42 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d022      	beq.n	8001748 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	6919      	ldr	r1, [r3, #16]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001712:	f7ff fb0b 	bl	8000d2c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	6919      	ldr	r1, [r3, #16]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	461a      	mov	r2, r3
 8001724:	f7ff fb57 	bl	8000dd6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <HAL_ADC_ConfigChannel+0x126>
 8001738:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800173c:	e000      	b.n	8001740 <HAL_ADC_ConfigChannel+0x128>
 800173e:	2300      	movs	r3, #0
 8001740:	461a      	mov	r2, r3
 8001742:	f7ff fb63 	bl	8000e0c <LL_ADC_SetOffsetSaturation>
 8001746:	e17b      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb10 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10a      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x15c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fb05 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	0e9b      	lsrs	r3, r3, #26
 800176e:	f003 021f 	and.w	r2, r3, #31
 8001772:	e01e      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x19a>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fafa 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001796:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800179a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80017a2:	2320      	movs	r3, #32
 80017a4:	e004      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80017a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d105      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x1b2>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	0e9b      	lsrs	r3, r3, #26
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	e018      	b.n	80017fc <HAL_ADC_ConfigChannel+0x1e4>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80017de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80017e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80017ee:	2320      	movs	r3, #32
 80017f0:	e004      	b.n	80017fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80017f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d106      	bne.n	800180e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fac9 	bl	8000da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff faad 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10a      	bne.n	800183a <HAL_ADC_ConfigChannel+0x222>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff faa2 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	0e9b      	lsrs	r3, r3, #26
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	e01e      	b.n	8001878 <HAL_ADC_ConfigChannel+0x260>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2101      	movs	r1, #1
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa97 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001858:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800185c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001868:	2320      	movs	r3, #32
 800186a:	e004      	b.n	8001876 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800186c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x278>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0e9b      	lsrs	r3, r3, #26
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	e018      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x2aa>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80018a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80018ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80018b4:	2320      	movs	r3, #32
 80018b6:	e004      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80018b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d106      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	2101      	movs	r1, #1
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fa66 	bl	8000da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2102      	movs	r1, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fa4a 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10a      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x2e8>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2102      	movs	r1, #2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fa3f 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	0e9b      	lsrs	r3, r3, #26
 80018fa:	f003 021f 	and.w	r2, r3, #31
 80018fe:	e01e      	b.n	800193e <HAL_ADC_ConfigChannel+0x326>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2102      	movs	r1, #2
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fa34 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800191e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001922:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001926:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800192e:	2320      	movs	r3, #32
 8001930:	e004      	b.n	800193c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001932:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x33e>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	0e9b      	lsrs	r3, r3, #26
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	e016      	b.n	8001984 <HAL_ADC_ConfigChannel+0x36c>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001968:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800196a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800196e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001976:	2320      	movs	r3, #32
 8001978:	e004      	b.n	8001984 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800197a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2200      	movs	r2, #0
 800198e:	2102      	movs	r1, #2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fa05 	bl	8000da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2103      	movs	r1, #3
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f9e9 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10a      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x3aa>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2103      	movs	r1, #3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f9de 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	0e9b      	lsrs	r3, r3, #26
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	e017      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x3da>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2103      	movs	r1, #3
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f9d3 	bl	8000d74 <LL_ADC_GetOffsetChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80019da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80019dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80019de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80019e4:	2320      	movs	r3, #32
 80019e6:	e003      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80019e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x3f2>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	e011      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x416>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001a22:	2320      	movs	r3, #32
 8001a24:	e003      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d106      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	2103      	movs	r1, #3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f9b0 	bl	8000da0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fb0d 	bl	8001064 <LL_ADC_IsEnabled>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 813d 	bne.w	8001ccc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6819      	ldr	r1, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f7ff fa6c 	bl	8000f3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4aa2      	ldr	r2, [pc, #648]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x6dc>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	f040 812e 	bne.w	8001ccc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10b      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x480>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	3301      	adds	r3, #1
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	bf94      	ite	ls
 8001a90:	2301      	movls	r3, #1
 8001a92:	2300      	movhi	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	e019      	b.n	8001acc <HAL_ADC_ConfigChannel+0x4b4>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001aa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001aa8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001aaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e003      	b.n	8001abc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ab4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2b09      	cmp	r3, #9
 8001ac4:	bf94      	ite	ls
 8001ac6:	2301      	movls	r3, #1
 8001ac8:	2300      	movhi	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d079      	beq.n	8001bc4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d107      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x4d4>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0e9b      	lsrs	r3, r3, #26
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	069b      	lsls	r3, r3, #26
 8001ae6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001aea:	e015      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x500>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001afc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	e003      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	069b      	lsls	r3, r3, #26
 8001b14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x520>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	e017      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x550>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b48:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001b50:	2320      	movs	r3, #32
 8001b52:	e003      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	ea42 0103 	orr.w	r1, r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x576>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	051b      	lsls	r3, r3, #20
 8001b8c:	e018      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x5a8>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	e003      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	e07e      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x5c8>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	069b      	lsls	r3, r3, #26
 8001bda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bde:	e015      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x5f4>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	e003      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	069b      	lsls	r3, r3, #26
 8001c08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x614>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0e9b      	lsrs	r3, r3, #26
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	e017      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x644>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	61fb      	str	r3, [r7, #28]
  return result;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e003      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	ea42 0103 	orr.w	r1, r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10d      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x670>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	3301      	adds	r3, #1
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b1e      	subs	r3, #30
 8001c80:	051b      	lsls	r3, r3, #20
 8001c82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	e01b      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x6a8>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	613b      	str	r3, [r7, #16]
  return result;
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	e003      	b.n	8001cac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	f003 021f 	and.w	r2, r3, #31
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b1e      	subs	r3, #30
 8001cba:	051b      	lsls	r3, r3, #20
 8001cbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7ff f90d 	bl	8000ee6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x6e0>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80af 	beq.w	8001e38 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ce2:	d004      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x6d6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <HAL_ADC_ConfigChannel+0x6e4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10a      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x6ec>
 8001cee:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <HAL_ADC_ConfigChannel+0x6e8>)
 8001cf0:	e009      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x6ee>
 8001cf2:	bf00      	nop
 8001cf4:	407f0000 	.word	0x407f0000
 8001cf8:	80080000 	.word	0x80080000
 8001cfc:	50000100 	.word	0x50000100
 8001d00:	50000300 	.word	0x50000300
 8001d04:	4b51      	ldr	r3, [pc, #324]	@ (8001e4c <HAL_ADC_ConfigChannel+0x834>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f802 	bl	8000d10 <LL_ADC_GetCommonPathInternalCh>
 8001d0c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	@ (8001e50 <HAL_ADC_ConfigChannel+0x838>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_ADC_ConfigChannel+0x70c>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a4d      	ldr	r2, [pc, #308]	@ (8001e54 <HAL_ADC_ConfigChannel+0x83c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d134      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d12e      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d38:	d17e      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d42:	d004      	beq.n	8001d4e <HAL_ADC_ConfigChannel+0x736>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a43      	ldr	r2, [pc, #268]	@ (8001e58 <HAL_ADC_ConfigChannel+0x840>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x73a>
 8001d4e:	4a43      	ldr	r2, [pc, #268]	@ (8001e5c <HAL_ADC_ConfigChannel+0x844>)
 8001d50:	e000      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x73c>
 8001d52:	4a3e      	ldr	r2, [pc, #248]	@ (8001e4c <HAL_ADC_ConfigChannel+0x834>)
 8001d54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f7fe ffc3 	bl	8000cea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d64:	4b3e      	ldr	r3, [pc, #248]	@ (8001e60 <HAL_ADC_ConfigChannel+0x848>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e64 <HAL_ADC_ConfigChannel+0x84c>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d7e:	e002      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f9      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d8c:	e054      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a35      	ldr	r2, [pc, #212]	@ (8001e68 <HAL_ADC_ConfigChannel+0x850>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d120      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11a      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dac:	d144      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db6:	d004      	beq.n	8001dc2 <HAL_ADC_ConfigChannel+0x7aa>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a26      	ldr	r2, [pc, #152]	@ (8001e58 <HAL_ADC_ConfigChannel+0x840>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x7ae>
 8001dc2:	4a26      	ldr	r2, [pc, #152]	@ (8001e5c <HAL_ADC_ConfigChannel+0x844>)
 8001dc4:	e000      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x7b0>
 8001dc6:	4a21      	ldr	r2, [pc, #132]	@ (8001e4c <HAL_ADC_ConfigChannel+0x834>)
 8001dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001dcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f7fe ff89 	bl	8000cea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dd8:	e02e      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a23      	ldr	r2, [pc, #140]	@ (8001e6c <HAL_ADC_ConfigChannel+0x854>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d129      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001de8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d123      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a18      	ldr	r2, [pc, #96]	@ (8001e58 <HAL_ADC_ConfigChannel+0x840>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01e      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e02:	d004      	beq.n	8001e0e <HAL_ADC_ConfigChannel+0x7f6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a13      	ldr	r2, [pc, #76]	@ (8001e58 <HAL_ADC_ConfigChannel+0x840>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x7fa>
 8001e0e:	4a13      	ldr	r2, [pc, #76]	@ (8001e5c <HAL_ADC_ConfigChannel+0x844>)
 8001e10:	e000      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x7fc>
 8001e12:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <HAL_ADC_ConfigChannel+0x834>)
 8001e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f7fe ff63 	bl	8000cea <LL_ADC_SetCommonPathInternalCh>
 8001e24:	e008      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2a:	f043 0220 	orr.w	r2, r3, #32
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e40:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	37d8      	adds	r7, #216	@ 0xd8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	50000700 	.word	0x50000700
 8001e50:	c3210000 	.word	0xc3210000
 8001e54:	90c00010 	.word	0x90c00010
 8001e58:	50000100 	.word	0x50000100
 8001e5c:	50000300 	.word	0x50000300
 8001e60:	20000000 	.word	0x20000000
 8001e64:	053e2d63 	.word	0x053e2d63
 8001e68:	c7520000 	.word	0xc7520000
 8001e6c:	cb840000 	.word	0xcb840000

08001e70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f8ef 	bl	8001064 <LL_ADC_IsEnabled>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d176      	bne.n	8001f7a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	4b3c      	ldr	r3, [pc, #240]	@ (8001f84 <ADC_Enable+0x114>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9e:	f043 0210 	orr.w	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eaa:	f043 0201 	orr.w	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e062      	b.n	8001f7c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f8be 	bl	800103c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ec8:	d004      	beq.n	8001ed4 <ADC_Enable+0x64>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a2e      	ldr	r2, [pc, #184]	@ (8001f88 <ADC_Enable+0x118>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <ADC_Enable+0x68>
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <ADC_Enable+0x11c>)
 8001ed6:	e000      	b.n	8001eda <ADC_Enable+0x6a>
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <ADC_Enable+0x120>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe ff18 	bl	8000d10 <LL_ADC_GetCommonPathInternalCh>
 8001ee0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d013      	beq.n	8001f12 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eea:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <ADC_Enable+0x124>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	4a29      	ldr	r2, [pc, #164]	@ (8001f98 <ADC_Enable+0x128>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f04:	e002      	b.n	8001f0c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f9      	bne.n	8001f06 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f12:	f7fe fecb 	bl	8000cac <HAL_GetTick>
 8001f16:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f18:	e028      	b.n	8001f6c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f8a0 	bl	8001064 <LL_ADC_IsEnabled>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d104      	bne.n	8001f34 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f884 	bl	800103c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f34:	f7fe feba 	bl	8000cac <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d914      	bls.n	8001f6c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d00d      	beq.n	8001f6c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e007      	b.n	8001f7c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d1cf      	bne.n	8001f1a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	8000003f 	.word	0x8000003f
 8001f88:	50000100 	.word	0x50000100
 8001f8c:	50000300 	.word	0x50000300
 8001f90:	50000700 	.word	0x50000700
 8001f94:	20000000 	.word	0x20000000
 8001f98:	053e2d63 	.word	0x053e2d63

08001f9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d14b      	bne.n	800204e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d021      	beq.n	8002014 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe ff47 	bl	8000e68 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d032      	beq.n	8002046 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d12b      	bne.n	8002046 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11f      	bne.n	8002046 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002012:	e018      	b.n	8002046 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d111      	bne.n	8002046 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7fe fbc0 	bl	80007cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800204c:	e00e      	b.n	800206c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fad2 	bl	8001604 <HAL_ADC_ErrorCallback>
}
 8002060:	e004      	b.n	800206c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fab4 	bl	80015f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	f043 0204 	orr.w	r2, r3, #4
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f7ff faa4 	bl	8001604 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4907      	ldr	r1, [pc, #28]	@ (8002160 <__NVIC_EnableIRQ+0x38>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	@ (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	@ (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	@ 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	@ 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002230:	d301      	bcc.n	8002236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002232:	2301      	movs	r3, #1
 8002234:	e00f      	b.n	8002256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002236:	4a0a      	ldr	r2, [pc, #40]	@ (8002260 <SysTick_Config+0x40>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223e:	210f      	movs	r1, #15
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f7ff ff8e 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <SysTick_Config+0x40>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224e:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <SysTick_Config+0x40>)
 8002250:	2207      	movs	r2, #7
 8002252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	e000e010 	.word	0xe000e010

08002264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff29 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff40 	bl	800210c <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff90 	bl	80021b8 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5f 	bl	8002164 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff33 	bl	8002128 <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa4 	bl	8002220 <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e08d      	b.n	8002412 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b47      	ldr	r3, [pc, #284]	@ (800241c <HAL_DMA_Init+0x138>)
 80022fe:	429a      	cmp	r2, r3
 8002300:	d80f      	bhi.n	8002322 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	4b45      	ldr	r3, [pc, #276]	@ (8002420 <HAL_DMA_Init+0x13c>)
 800230a:	4413      	add	r3, r2
 800230c:	4a45      	ldr	r2, [pc, #276]	@ (8002424 <HAL_DMA_Init+0x140>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	009a      	lsls	r2, r3, #2
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a42      	ldr	r2, [pc, #264]	@ (8002428 <HAL_DMA_Init+0x144>)
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002320:	e00e      	b.n	8002340 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	4b40      	ldr	r3, [pc, #256]	@ (800242c <HAL_DMA_Init+0x148>)
 800232a:	4413      	add	r3, r2
 800232c:	4a3d      	ldr	r2, [pc, #244]	@ (8002424 <HAL_DMA_Init+0x140>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	009a      	lsls	r2, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a3c      	ldr	r2, [pc, #240]	@ (8002430 <HAL_DMA_Init+0x14c>)
 800233e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800235a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f9b6 	bl	8002704 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023a0:	d102      	bne.n	80023a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d010      	beq.n	80023e8 <HAL_DMA_Init+0x104>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d80c      	bhi.n	80023e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f9d6 	bl	8002780 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	e008      	b.n	80023fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40020407 	.word	0x40020407
 8002420:	bffdfff8 	.word	0xbffdfff8
 8002424:	cccccccd 	.word	0xcccccccd
 8002428:	40020000 	.word	0x40020000
 800242c:	bffdfbf8 	.word	0xbffdfbf8
 8002430:	40020400 	.word	0x40020400

08002434 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_DMA_Start_IT+0x20>
 8002450:	2302      	movs	r3, #2
 8002452:	e066      	b.n	8002522 <HAL_DMA_Start_IT+0xee>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d155      	bne.n	8002514 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f8fb 	bl	8002688 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 020e 	orr.w	r2, r2, #14
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e00f      	b.n	80024cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0204 	bic.w	r2, r2, #4
 80024ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 020a 	orr.w	r2, r2, #10
 80024ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002500:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e005      	b.n	8002520 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800251c:	2302      	movs	r3, #2
 800251e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002520:	7dfb      	ldrb	r3, [r7, #23]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2204      	movs	r2, #4
 800254c:	409a      	lsls	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d026      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x7a>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d021      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0204 	bic.w	r2, r2, #4
 800257c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f003 021f 	and.w	r2, r3, #31
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	2104      	movs	r1, #4
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	2b00      	cmp	r3, #0
 8002598:	d071      	beq.n	800267e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80025a2:	e06c      	b.n	800267e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2202      	movs	r2, #2
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d02e      	beq.n	8002616 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d029      	beq.n	8002616 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10b      	bne.n	80025e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 020a 	bic.w	r2, r2, #10
 80025de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	2102      	movs	r1, #2
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d038      	beq.n	800267e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002614:	e033      	b.n	800267e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2208      	movs	r2, #8
 8002620:	409a      	lsls	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02a      	beq.n	8002680 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d025      	beq.n	8002680 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 020e 	bic.w	r2, r2, #14
 8002642:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f202 	lsl.w	r2, r1, r2
 8002656:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800267e:	bf00      	nop
 8002680:	bf00      	nop
}
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800269e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f003 021f 	and.w	r2, r3, #31
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d108      	bne.n	80026e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026e6:	e007      	b.n	80026f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b16      	ldr	r3, [pc, #88]	@ (800276c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002714:	429a      	cmp	r2, r3
 8002716:	d802      	bhi.n	800271e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002718:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e001      	b.n	8002722 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002720:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3b08      	subs	r3, #8
 800272e:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	009a      	lsls	r2, r3, #2
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	461a      	mov	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a0b      	ldr	r2, [pc, #44]	@ (800277c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800274e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2201      	movs	r2, #1
 8002758:	409a      	lsls	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40020407 	.word	0x40020407
 8002770:	40020800 	.word	0x40020800
 8002774:	40020820 	.word	0x40020820
 8002778:	cccccccd 	.word	0xcccccccd
 800277c:	40020880 	.word	0x40020880

08002780 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a08      	ldr	r2, [pc, #32]	@ (80027c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80027a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	2201      	movs	r2, #1
 80027ae:	409a      	lsls	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	1000823f 	.word	0x1000823f
 80027c4:	40020940 	.word	0x40020940

080027c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e147      	b.n	8002a6a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe f930 	bl	8000a54 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0210 	bic.w	r2, r2, #16
 8002802:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002804:	f7fe fa52 	bl	8000cac <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800280a:	e012      	b.n	8002832 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800280c:	f7fe fa4e 	bl	8000cac <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b0a      	cmp	r3, #10
 8002818:	d90b      	bls.n	8002832 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2203      	movs	r2, #3
 800282a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e11b      	b.n	8002a6a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b08      	cmp	r3, #8
 800283e:	d0e5      	beq.n	800280c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002850:	f7fe fa2c 	bl	8000cac <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002856:	e012      	b.n	800287e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002858:	f7fe fa28 	bl	8000cac <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b0a      	cmp	r3, #10
 8002864:	d90b      	bls.n	800287e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2203      	movs	r2, #3
 8002876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0f5      	b.n	8002a6a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0e5      	beq.n	8002858 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0202 	orr.w	r2, r2, #2
 800289a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a74      	ldr	r2, [pc, #464]	@ (8002a74 <HAL_FDCAN_Init+0x2ac>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d103      	bne.n	80028ae <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80028a6:	4a74      	ldr	r2, [pc, #464]	@ (8002a78 <HAL_FDCAN_Init+0x2b0>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7c1b      	ldrb	r3, [r3, #16]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d108      	bne.n	80028c8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c4:	619a      	str	r2, [r3, #24]
 80028c6:	e007      	b.n	80028d8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7c5b      	ldrb	r3, [r3, #17]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d108      	bne.n	80028f2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028ee:	619a      	str	r2, [r3, #24]
 80028f0:	e007      	b.n	8002902 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002900:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7c9b      	ldrb	r3, [r3, #18]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002918:	619a      	str	r2, [r3, #24]
 800291a:	e007      	b.n	800292c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800292a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002950:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0210 	bic.w	r2, r2, #16
 8002960:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d108      	bne.n	800297c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0204 	orr.w	r2, r2, #4
 8002978:	619a      	str	r2, [r3, #24]
 800297a:	e02c      	b.n	80029d6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d028      	beq.n	80029d6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d01c      	beq.n	80029c6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800299a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0210 	orr.w	r2, r2, #16
 80029aa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d110      	bne.n	80029d6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0220 	orr.w	r2, r2, #32
 80029c2:	619a      	str	r2, [r3, #24]
 80029c4:	e007      	b.n	80029d6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0220 	orr.w	r2, r2, #32
 80029d4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	3b01      	subs	r3, #1
 80029dc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029e6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80029ee:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80029fe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a00:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a0a:	d115      	bne.n	8002a38 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	3b01      	subs	r3, #1
 8002a18:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a1a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a20:	3b01      	subs	r3, #1
 8002a22:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a24:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a34:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a36:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f922 	bl	8002c98 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40006400 	.word	0x40006400
 8002a78:	40006500 	.word	0x40006500

08002a7c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d110      	bne.n	8002ab2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e006      	b.n	8002ac0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
  }
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ade:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d003      	beq.n	8002aee <HAL_FDCAN_ActivateNotification+0x22>
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	f040 80c8 	bne.w	8002c7e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d004      	beq.n	8002b0a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d03b      	beq.n	8002b82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d004      	beq.n	8002b1e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d031      	beq.n	8002b82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d027      	beq.n	8002b82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01d      	beq.n	8002b82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d013      	beq.n	8002b82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d13b      	bne.n	8002c1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d131      	bne.n	8002c1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d127      	bne.n	8002c1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11d      	bne.n	8002c1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d113      	bne.n	8002c1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00c      	beq.n	8002c2e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0202 	orr.w	r2, r2, #2
 8002c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e006      	b.n	8002c8c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c82:	f043 0202 	orr.w	r2, r3, #2
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
  }
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d54 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002ca2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8002d58 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d103      	bne.n	8002cb6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002cb4:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cc4:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ccc:	041a      	lsls	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cea:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	061a      	lsls	r2, r3, #24
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e005      	b.n	8002d38 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3304      	adds	r3, #4
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d3f3      	bcc.n	8002d2c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	4000a400 	.word	0x4000a400
 8002d58:	40006800 	.word	0x40006800

08002d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d6a:	e15a      	b.n	8003022 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 814c 	beq.w	800301c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d005      	beq.n	8002d9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d130      	bne.n	8002dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0201 	and.w	r2, r3, #1
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d017      	beq.n	8002e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	2203      	movs	r2, #3
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d123      	bne.n	8002e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	08da      	lsrs	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3208      	adds	r2, #8
 8002e88:	6939      	ldr	r1, [r7, #16]
 8002e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	2203      	movs	r2, #3
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0203 	and.w	r2, r3, #3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80a6 	beq.w	800301c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed0:	4b5b      	ldr	r3, [pc, #364]	@ (8003040 <HAL_GPIO_Init+0x2e4>)
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed4:	4a5a      	ldr	r2, [pc, #360]	@ (8003040 <HAL_GPIO_Init+0x2e4>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6613      	str	r3, [r2, #96]	@ 0x60
 8002edc:	4b58      	ldr	r3, [pc, #352]	@ (8003040 <HAL_GPIO_Init+0x2e4>)
 8002ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ee8:	4a56      	ldr	r2, [pc, #344]	@ (8003044 <HAL_GPIO_Init+0x2e8>)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	220f      	movs	r2, #15
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f12:	d01f      	beq.n	8002f54 <HAL_GPIO_Init+0x1f8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a4c      	ldr	r2, [pc, #304]	@ (8003048 <HAL_GPIO_Init+0x2ec>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d019      	beq.n	8002f50 <HAL_GPIO_Init+0x1f4>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a4b      	ldr	r2, [pc, #300]	@ (800304c <HAL_GPIO_Init+0x2f0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d013      	beq.n	8002f4c <HAL_GPIO_Init+0x1f0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a4a      	ldr	r2, [pc, #296]	@ (8003050 <HAL_GPIO_Init+0x2f4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00d      	beq.n	8002f48 <HAL_GPIO_Init+0x1ec>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a49      	ldr	r2, [pc, #292]	@ (8003054 <HAL_GPIO_Init+0x2f8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <HAL_GPIO_Init+0x1e8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a48      	ldr	r2, [pc, #288]	@ (8003058 <HAL_GPIO_Init+0x2fc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d101      	bne.n	8002f40 <HAL_GPIO_Init+0x1e4>
 8002f3c:	2305      	movs	r3, #5
 8002f3e:	e00a      	b.n	8002f56 <HAL_GPIO_Init+0x1fa>
 8002f40:	2306      	movs	r3, #6
 8002f42:	e008      	b.n	8002f56 <HAL_GPIO_Init+0x1fa>
 8002f44:	2304      	movs	r3, #4
 8002f46:	e006      	b.n	8002f56 <HAL_GPIO_Init+0x1fa>
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e004      	b.n	8002f56 <HAL_GPIO_Init+0x1fa>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e002      	b.n	8002f56 <HAL_GPIO_Init+0x1fa>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_GPIO_Init+0x1fa>
 8002f54:	2300      	movs	r3, #0
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	f002 0203 	and.w	r2, r2, #3
 8002f5c:	0092      	lsls	r2, r2, #2
 8002f5e:	4093      	lsls	r3, r2
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f66:	4937      	ldr	r1, [pc, #220]	@ (8003044 <HAL_GPIO_Init+0x2e8>)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f74:	4b39      	ldr	r3, [pc, #228]	@ (800305c <HAL_GPIO_Init+0x300>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f98:	4a30      	ldr	r2, [pc, #192]	@ (800305c <HAL_GPIO_Init+0x300>)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800305c <HAL_GPIO_Init+0x300>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fc2:	4a26      	ldr	r2, [pc, #152]	@ (800305c <HAL_GPIO_Init+0x300>)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002fc8:	4b24      	ldr	r3, [pc, #144]	@ (800305c <HAL_GPIO_Init+0x300>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fec:	4a1b      	ldr	r2, [pc, #108]	@ (800305c <HAL_GPIO_Init+0x300>)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <HAL_GPIO_Init+0x300>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003016:	4a11      	ldr	r2, [pc, #68]	@ (800305c <HAL_GPIO_Init+0x300>)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3301      	adds	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	f47f ae9d 	bne.w	8002d6c <HAL_GPIO_Init+0x10>
  }
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40021000 	.word	0x40021000
 8003044:	40010000 	.word	0x40010000
 8003048:	48000400 	.word	0x48000400
 800304c:	48000800 	.word	0x48000800
 8003050:	48000c00 	.word	0x48000c00
 8003054:	48001000 	.word	0x48001000
 8003058:	48001400 	.word	0x48001400
 800305c:	40010400 	.word	0x40010400

08003060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d141      	bne.n	80030f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800306e:	4b4b      	ldr	r3, [pc, #300]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800307a:	d131      	bne.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800307c:	4b47      	ldr	r3, [pc, #284]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003082:	4a46      	ldr	r2, [pc, #280]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003088:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800308c:	4b43      	ldr	r3, [pc, #268]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003094:	4a41      	ldr	r2, [pc, #260]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003096:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800309a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800309c:	4b40      	ldr	r3, [pc, #256]	@ (80031a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2232      	movs	r2, #50	@ 0x32
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	4a3f      	ldr	r2, [pc, #252]	@ (80031a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	0c9b      	lsrs	r3, r3, #18
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b2:	e002      	b.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ba:	4b38      	ldr	r3, [pc, #224]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c6:	d102      	bne.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f2      	bne.n	80030b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ce:	4b33      	ldr	r3, [pc, #204]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030da:	d158      	bne.n	800318e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e057      	b.n	8003190 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030e0:	4b2e      	ldr	r3, [pc, #184]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030e6:	4a2d      	ldr	r2, [pc, #180]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030f0:	e04d      	b.n	800318e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030f8:	d141      	bne.n	800317e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030fa:	4b28      	ldr	r3, [pc, #160]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003106:	d131      	bne.n	800316c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003108:	4b24      	ldr	r3, [pc, #144]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800310e:	4a23      	ldr	r2, [pc, #140]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003114:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003118:	4b20      	ldr	r3, [pc, #128]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003120:	4a1e      	ldr	r2, [pc, #120]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003122:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003126:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003128:	4b1d      	ldr	r3, [pc, #116]	@ (80031a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2232      	movs	r2, #50	@ 0x32
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	0c9b      	lsrs	r3, r3, #18
 800313a:	3301      	adds	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800313e:	e002      	b.n	8003146 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3b01      	subs	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003146:	4b15      	ldr	r3, [pc, #84]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003152:	d102      	bne.n	800315a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f2      	bne.n	8003140 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800315a:	4b10      	ldr	r3, [pc, #64]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003166:	d112      	bne.n	800318e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e011      	b.n	8003190 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800316c:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003172:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003178:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800317c:	e007      	b.n	800318e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800317e:	4b07      	ldr	r3, [pc, #28]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003186:	4a05      	ldr	r2, [pc, #20]	@ (800319c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003188:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800318c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40007000 	.word	0x40007000
 80031a0:	20000000 	.word	0x20000000
 80031a4:	431bde83 	.word	0x431bde83

080031a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80031ac:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a04      	ldr	r2, [pc, #16]	@ (80031c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031b6:	6093      	str	r3, [r2, #8]
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40007000 	.word	0x40007000

080031c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e2fe      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d075      	beq.n	80032d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e6:	4b97      	ldr	r3, [pc, #604]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031f0:	4b94      	ldr	r3, [pc, #592]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	d102      	bne.n	8003206 <HAL_RCC_OscConfig+0x3e>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d002      	beq.n	800320c <HAL_RCC_OscConfig+0x44>
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d10b      	bne.n	8003224 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	4b8d      	ldr	r3, [pc, #564]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05b      	beq.n	80032d0 <HAL_RCC_OscConfig+0x108>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d157      	bne.n	80032d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e2d9      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322c:	d106      	bne.n	800323c <HAL_RCC_OscConfig+0x74>
 800322e:	4b85      	ldr	r3, [pc, #532]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a84      	ldr	r2, [pc, #528]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e01d      	b.n	8003278 <HAL_RCC_OscConfig+0xb0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x98>
 8003246:	4b7f      	ldr	r3, [pc, #508]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7e      	ldr	r2, [pc, #504]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b7c      	ldr	r3, [pc, #496]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7b      	ldr	r2, [pc, #492]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0xb0>
 8003260:	4b78      	ldr	r3, [pc, #480]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a77      	ldr	r2, [pc, #476]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b75      	ldr	r3, [pc, #468]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a74      	ldr	r2, [pc, #464]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fd fd14 	bl	8000cac <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7fd fd10 	bl	8000cac <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	@ 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e29e      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329a:	4b6a      	ldr	r3, [pc, #424]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0xc0>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fd fd00 	bl	8000cac <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fd fcfc 	bl	8000cac <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	@ 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e28a      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032c2:	4b60      	ldr	r3, [pc, #384]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0xe8>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d075      	beq.n	80033ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	4b59      	ldr	r3, [pc, #356]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e8:	4b56      	ldr	r3, [pc, #344]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	d102      	bne.n	80032fe <HAL_RCC_OscConfig+0x136>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_OscConfig+0x13c>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d11f      	bne.n	8003344 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003304:	4b4f      	ldr	r3, [pc, #316]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_OscConfig+0x154>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e25d      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331c:	4b49      	ldr	r3, [pc, #292]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	4946      	ldr	r1, [pc, #280]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003330:	4b45      	ldr	r3, [pc, #276]	@ (8003448 <HAL_RCC_OscConfig+0x280>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fc6d 	bl	8000c14 <HAL_InitTick>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d043      	beq.n	80033c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e249      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d023      	beq.n	8003394 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800334c:	4b3d      	ldr	r3, [pc, #244]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a3c      	ldr	r2, [pc, #240]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fd fca8 	bl	8000cac <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003360:	f7fd fca4 	bl	8000cac <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e232      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003372:	4b34      	ldr	r3, [pc, #208]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	4b31      	ldr	r3, [pc, #196]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	061b      	lsls	r3, r3, #24
 800338c:	492d      	ldr	r1, [pc, #180]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
 8003392:	e01a      	b.n	80033ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003394:	4b2b      	ldr	r3, [pc, #172]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2a      	ldr	r2, [pc, #168]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800339a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fd fc84 	bl	8000cac <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a8:	f7fd fc80 	bl	8000cac <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e20e      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ba:	4b22      	ldr	r3, [pc, #136]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1e0>
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d041      	beq.n	800345a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01c      	beq.n	8003418 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033de:	4b19      	ldr	r3, [pc, #100]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033e4:	4a17      	ldr	r2, [pc, #92]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ee:	f7fd fc5d 	bl	8000cac <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f6:	f7fd fc59 	bl	8000cac <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e1e7      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003408:	4b0e      	ldr	r3, [pc, #56]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800340a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0ef      	beq.n	80033f6 <HAL_RCC_OscConfig+0x22e>
 8003416:	e020      	b.n	800345a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003418:	4b0a      	ldr	r3, [pc, #40]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 800341a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800341e:	4a09      	ldr	r2, [pc, #36]	@ (8003444 <HAL_RCC_OscConfig+0x27c>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fd fc40 	bl	8000cac <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800342e:	e00d      	b.n	800344c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003430:	f7fd fc3c 	bl	8000cac <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d906      	bls.n	800344c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1ca      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800344c:	4b8c      	ldr	r3, [pc, #560]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ea      	bne.n	8003430 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80a6 	beq.w	80035b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003468:	2300      	movs	r3, #0
 800346a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800346c:	4b84      	ldr	r3, [pc, #528]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_OscConfig+0x2b4>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x2b6>
 800347c:	2300      	movs	r3, #0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b7f      	ldr	r3, [pc, #508]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	4a7e      	ldr	r2, [pc, #504]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800348c:	6593      	str	r3, [r2, #88]	@ 0x58
 800348e:	4b7c      	ldr	r3, [pc, #496]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349e:	4b79      	ldr	r3, [pc, #484]	@ (8003684 <HAL_RCC_OscConfig+0x4bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034aa:	4b76      	ldr	r3, [pc, #472]	@ (8003684 <HAL_RCC_OscConfig+0x4bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a75      	ldr	r2, [pc, #468]	@ (8003684 <HAL_RCC_OscConfig+0x4bc>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fd fbf9 	bl	8000cac <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7fd fbf5 	bl	8000cac <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e183      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003684 <HAL_RCC_OscConfig+0x4bc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d108      	bne.n	80034f6 <HAL_RCC_OscConfig+0x32e>
 80034e4:	4b66      	ldr	r3, [pc, #408]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ea:	4a65      	ldr	r2, [pc, #404]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034f4:	e024      	b.n	8003540 <HAL_RCC_OscConfig+0x378>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d110      	bne.n	8003520 <HAL_RCC_OscConfig+0x358>
 80034fe:	4b60      	ldr	r3, [pc, #384]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003504:	4a5e      	ldr	r2, [pc, #376]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800350e:	4b5c      	ldr	r3, [pc, #368]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003514:	4a5a      	ldr	r2, [pc, #360]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800351e:	e00f      	b.n	8003540 <HAL_RCC_OscConfig+0x378>
 8003520:	4b57      	ldr	r3, [pc, #348]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003526:	4a56      	ldr	r2, [pc, #344]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003530:	4b53      	ldr	r3, [pc, #332]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d016      	beq.n	8003576 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fd fbb0 	bl	8000cac <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354e:	e00a      	b.n	8003566 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7fd fbac 	bl	8000cac <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e138      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003566:	4b46      	ldr	r3, [pc, #280]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ed      	beq.n	8003550 <HAL_RCC_OscConfig+0x388>
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fd fb99 	bl	8000cac <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800357c:	e00a      	b.n	8003594 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fd fb95 	bl	8000cac <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e121      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003594:	4b3a      	ldr	r3, [pc, #232]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ed      	bne.n	800357e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a8:	4b35      	ldr	r3, [pc, #212]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ac:	4a34      	ldr	r2, [pc, #208]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d03c      	beq.n	800363a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01c      	beq.n	8003602 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 80035ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fd fb68 	bl	8000cac <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e0:	f7fd fb64 	bl	8000cac <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e0f2      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035f2:	4b23      	ldr	r3, [pc, #140]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 80035f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ef      	beq.n	80035e0 <HAL_RCC_OscConfig+0x418>
 8003600:	e01b      	b.n	800363a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003602:	4b1f      	ldr	r3, [pc, #124]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003608:	4a1d      	ldr	r2, [pc, #116]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7fd fb4b 	bl	8000cac <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800361a:	f7fd fb47 	bl	8000cac <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e0d5      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800362c:	4b14      	ldr	r3, [pc, #80]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 800362e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ef      	bne.n	800361a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80c9 	beq.w	80037d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003644:	4b0e      	ldr	r3, [pc, #56]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b0c      	cmp	r3, #12
 800364e:	f000 8083 	beq.w	8003758 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d15e      	bne.n	8003718 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365a:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a08      	ldr	r2, [pc, #32]	@ (8003680 <HAL_RCC_OscConfig+0x4b8>)
 8003660:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fd fb21 	bl	8000cac <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366c:	e00c      	b.n	8003688 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd fb1d 	bl	8000cac <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d905      	bls.n	8003688 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e0ab      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003688:	4b55      	ldr	r3, [pc, #340]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ec      	bne.n	800366e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003694:	4b52      	ldr	r3, [pc, #328]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	4b52      	ldr	r3, [pc, #328]	@ (80037e4 <HAL_RCC_OscConfig+0x61c>)
 800369a:	4013      	ands	r3, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6a11      	ldr	r1, [r2, #32]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036a4:	3a01      	subs	r2, #1
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	4311      	orrs	r1, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80036ae:	0212      	lsls	r2, r2, #8
 80036b0:	4311      	orrs	r1, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036b6:	0852      	lsrs	r2, r2, #1
 80036b8:	3a01      	subs	r2, #1
 80036ba:	0552      	lsls	r2, r2, #21
 80036bc:	4311      	orrs	r1, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036c2:	0852      	lsrs	r2, r2, #1
 80036c4:	3a01      	subs	r2, #1
 80036c6:	0652      	lsls	r2, r2, #25
 80036c8:	4311      	orrs	r1, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036ce:	06d2      	lsls	r2, r2, #27
 80036d0:	430a      	orrs	r2, r1
 80036d2:	4943      	ldr	r1, [pc, #268]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	4b41      	ldr	r3, [pc, #260]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a40      	ldr	r2, [pc, #256]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 80036de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036e4:	4b3e      	ldr	r3, [pc, #248]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a3d      	ldr	r2, [pc, #244]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 80036ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fd fadc 	bl	8000cac <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fd fad8 	bl	8000cac <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e066      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370a:	4b35      	ldr	r3, [pc, #212]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x530>
 8003716:	e05e      	b.n	80037d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b31      	ldr	r3, [pc, #196]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a30      	ldr	r2, [pc, #192]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 800371e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fd fac2 	bl	8000cac <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd fabe 	bl	8000cac <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e04c      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373e:	4b28      	ldr	r3, [pc, #160]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800374a:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	4924      	ldr	r1, [pc, #144]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 8003750:	4b25      	ldr	r3, [pc, #148]	@ (80037e8 <HAL_RCC_OscConfig+0x620>)
 8003752:	4013      	ands	r3, r2
 8003754:	60cb      	str	r3, [r1, #12]
 8003756:	e03e      	b.n	80037d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e039      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003764:	4b1e      	ldr	r3, [pc, #120]	@ (80037e0 <HAL_RCC_OscConfig+0x618>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f003 0203 	and.w	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	429a      	cmp	r2, r3
 8003776:	d12c      	bne.n	80037d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	3b01      	subs	r3, #1
 8003784:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d123      	bne.n	80037d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d11b      	bne.n	80037d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d113      	bne.n	80037d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	3b01      	subs	r3, #1
 80037b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d109      	bne.n	80037d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	3b01      	subs	r3, #1
 80037cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d001      	beq.n	80037d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3720      	adds	r7, #32
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	019f800c 	.word	0x019f800c
 80037e8:	feeefffc 	.word	0xfeeefffc

080037ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e11e      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b91      	ldr	r3, [pc, #580]	@ (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d910      	bls.n	8003834 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b8e      	ldr	r3, [pc, #568]	@ (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 020f 	bic.w	r2, r3, #15
 800381a:	498c      	ldr	r1, [pc, #560]	@ (8003a4c <HAL_RCC_ClockConfig+0x260>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b8a      	ldr	r3, [pc, #552]	@ (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e106      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d073      	beq.n	8003928 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d129      	bne.n	800389c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003848:	4b81      	ldr	r3, [pc, #516]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0f4      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003858:	f000 f966 	bl	8003b28 <RCC_GetSysClockFreqFromPLLSource>
 800385c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4a7c      	ldr	r2, [pc, #496]	@ (8003a54 <HAL_RCC_ClockConfig+0x268>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d93f      	bls.n	80038e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003866:	4b7a      	ldr	r3, [pc, #488]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800387a:	2b00      	cmp	r3, #0
 800387c:	d033      	beq.n	80038e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003882:	2b00      	cmp	r3, #0
 8003884:	d12f      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003886:	4b72      	ldr	r3, [pc, #456]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800388e:	4a70      	ldr	r2, [pc, #448]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003894:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003896:	2380      	movs	r3, #128	@ 0x80
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e024      	b.n	80038e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0c6      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b4:	4b66      	ldr	r3, [pc, #408]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0be      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038c4:	f000 f8ce 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4a61      	ldr	r2, [pc, #388]	@ (8003a54 <HAL_RCC_ClockConfig+0x268>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d909      	bls.n	80038e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038da:	4a5d      	ldr	r2, [pc, #372]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4957      	ldr	r1, [pc, #348]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f8:	f7fd f9d8 	bl	8000cac <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fd f9d4 	bl	8000cac <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e095      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b4e      	ldr	r3, [pc, #312]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 020c 	and.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1eb      	bne.n	8003900 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d023      	beq.n	800397c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003940:	4b43      	ldr	r3, [pc, #268]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a42      	ldr	r2, [pc, #264]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003946:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800394a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003958:	4b3d      	ldr	r3, [pc, #244]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003960:	4a3b      	ldr	r2, [pc, #236]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003962:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003966:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b39      	ldr	r3, [pc, #228]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4936      	ldr	r1, [pc, #216]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
 800397a:	e008      	b.n	800398e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b80      	cmp	r3, #128	@ 0x80
 8003980:	d105      	bne.n	800398e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003982:	4b33      	ldr	r3, [pc, #204]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	4a32      	ldr	r2, [pc, #200]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003988:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800398c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800398e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d21d      	bcs.n	80039d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a4c <HAL_RCC_ClockConfig+0x260>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 020f 	bic.w	r2, r3, #15
 80039a4:	4929      	ldr	r1, [pc, #164]	@ (8003a4c <HAL_RCC_ClockConfig+0x260>)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039ac:	f7fd f97e 	bl	8000cac <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7fd f97a 	bl	8000cac <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e03b      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b20      	ldr	r3, [pc, #128]	@ (8003a4c <HAL_RCC_ClockConfig+0x260>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1ed      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4917      	ldr	r1, [pc, #92]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a02:	4b13      	ldr	r3, [pc, #76]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	490f      	ldr	r1, [pc, #60]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a16:	f000 f825 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	490c      	ldr	r1, [pc, #48]	@ (8003a58 <HAL_RCC_ClockConfig+0x26c>)
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	4a0a      	ldr	r2, [pc, #40]	@ (8003a5c <HAL_RCC_ClockConfig+0x270>)
 8003a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a36:	4b0a      	ldr	r3, [pc, #40]	@ (8003a60 <HAL_RCC_ClockConfig+0x274>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd f8ea 	bl	8000c14 <HAL_InitTick>
 8003a40:	4603      	mov	r3, r0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40021000 	.word	0x40021000
 8003a54:	04c4b400 	.word	0x04c4b400
 8003a58:	08006e6c 	.word	0x08006e6c
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	20000004 	.word	0x20000004

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d102      	bne.n	8003a7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a76:	4b2a      	ldr	r3, [pc, #168]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	e047      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a7c:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d102      	bne.n	8003a8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a88:	4b26      	ldr	r3, [pc, #152]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e03e      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a8e:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d136      	bne.n	8003b08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a9a:	4b20      	ldr	r3, [pc, #128]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	3301      	adds	r3, #1
 8003ab0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	4a16      	ldr	r2, [pc, #88]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac2:	68d2      	ldr	r2, [r2, #12]
 8003ac4:	0a12      	lsrs	r2, r2, #8
 8003ac6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	617b      	str	r3, [r7, #20]
      break;
 8003ad0:	e00c      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ad2:	4a13      	ldr	r2, [pc, #76]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	4a10      	ldr	r2, [pc, #64]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003adc:	68d2      	ldr	r2, [r2, #12]
 8003ade:	0a12      	lsrs	r2, r2, #8
 8003ae0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
      break;
 8003aea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aec:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	0e5b      	lsrs	r3, r3, #25
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	3301      	adds	r3, #1
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e001      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b0c:	693b      	ldr	r3, [r7, #16]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	00f42400 	.word	0x00f42400
 8003b24:	016e3600 	.word	0x016e3600

08003b28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d10c      	bne.n	8003b66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b4c:	4a17      	ldr	r2, [pc, #92]	@ (8003bac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	4a14      	ldr	r2, [pc, #80]	@ (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b56:	68d2      	ldr	r2, [r2, #12]
 8003b58:	0a12      	lsrs	r2, r2, #8
 8003b5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	617b      	str	r3, [r7, #20]
    break;
 8003b64:	e00c      	b.n	8003b80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b66:	4a12      	ldr	r2, [pc, #72]	@ (8003bb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	0a12      	lsrs	r2, r2, #8
 8003b74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
    break;
 8003b7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	0e5b      	lsrs	r3, r3, #25
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b9a:	687b      	ldr	r3, [r7, #4]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	016e3600 	.word	0x016e3600
 8003bb0:	00f42400 	.word	0x00f42400

08003bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8098 	beq.w	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b43      	ldr	r3, [pc, #268]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	4b40      	ldr	r3, [pc, #256]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bee:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a39      	ldr	r2, [pc, #228]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c0a:	f7fd f84f 	bl	8000cac <HAL_GetTick>
 8003c0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c10:	e009      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c12:	f7fd f84b 	bl	8000cac <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d902      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	74fb      	strb	r3, [r7, #19]
        break;
 8003c24:	e005      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c26:	4b30      	ldr	r3, [pc, #192]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0ef      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d159      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01e      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d019      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c54:	4b23      	ldr	r3, [pc, #140]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c60:	4b20      	ldr	r3, [pc, #128]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c70:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c80:	4a18      	ldr	r2, [pc, #96]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d016      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd f80b 	bl	8000cac <HAL_GetTick>
 8003c96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c98:	e00b      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fd f807 	bl	8000cac <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d902      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	74fb      	strb	r3, [r7, #19]
            break;
 8003cb0:	e006      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ec      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc6:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ccc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd4:	4903      	ldr	r1, [pc, #12]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	74bb      	strb	r3, [r7, #18]
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf0:	7c7b      	ldrb	r3, [r7, #17]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4ba7      	ldr	r3, [pc, #668]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	4aa6      	ldr	r2, [pc, #664]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0e:	4ba1      	ldr	r3, [pc, #644]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f023 0203 	bic.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	499d      	ldr	r1, [pc, #628]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d30:	4b98      	ldr	r3, [pc, #608]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	f023 020c 	bic.w	r2, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4995      	ldr	r1, [pc, #596]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d52:	4b90      	ldr	r3, [pc, #576]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	498c      	ldr	r1, [pc, #560]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d74:	4b87      	ldr	r3, [pc, #540]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	4984      	ldr	r1, [pc, #528]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d96:	4b7f      	ldr	r3, [pc, #508]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	497b      	ldr	r1, [pc, #492]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003db8:	4b76      	ldr	r3, [pc, #472]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	4973      	ldr	r1, [pc, #460]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dda:	4b6e      	ldr	r3, [pc, #440]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	496a      	ldr	r1, [pc, #424]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dfc:	4b65      	ldr	r3, [pc, #404]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4962      	ldr	r1, [pc, #392]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	4959      	ldr	r1, [pc, #356]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e40:	4b54      	ldr	r3, [pc, #336]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4e:	4951      	ldr	r1, [pc, #324]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d015      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e62:	4b4c      	ldr	r3, [pc, #304]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e68:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	4948      	ldr	r1, [pc, #288]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e80:	d105      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e82:	4b44      	ldr	r3, [pc, #272]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4a43      	ldr	r2, [pc, #268]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e8c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d015      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	493a      	ldr	r1, [pc, #232]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb8:	d105      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eba:	4b36      	ldr	r3, [pc, #216]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	4a35      	ldr	r2, [pc, #212]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec4:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d015      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ed2:	4b30      	ldr	r3, [pc, #192]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee0:	492c      	ldr	r1, [pc, #176]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ef0:	d105      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef2:	4b28      	ldr	r3, [pc, #160]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	4a27      	ldr	r2, [pc, #156]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003efc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d015      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f0a:	4b22      	ldr	r3, [pc, #136]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	491e      	ldr	r1, [pc, #120]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f28:	d105      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f34:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d015      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f42:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	4910      	ldr	r1, [pc, #64]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f60:	d105      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f62:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4a0b      	ldr	r2, [pc, #44]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f6c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d018      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f80:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f88:	4902      	ldr	r1, [pc, #8]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	e001      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f94:	40021000 	.word	0x40021000
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f9e:	d105      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fa0:	4b21      	ldr	r3, [pc, #132]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a20      	ldr	r2, [pc, #128]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003faa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d015      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	4918      	ldr	r1, [pc, #96]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fd8:	4b13      	ldr	r3, [pc, #76]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a12      	ldr	r2, [pc, #72]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d015      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ff6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffe:	490a      	ldr	r1, [pc, #40]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800400e:	d105      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a04      	ldr	r2, [pc, #16]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800401a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800401c:	7cbb      	ldrb	r3, [r7, #18]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000

0800402c <__NVIC_SetPriority>:
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	6039      	str	r1, [r7, #0]
 8004036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403c:	2b00      	cmp	r3, #0
 800403e:	db0a      	blt.n	8004056 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	b2da      	uxtb	r2, r3
 8004044:	490c      	ldr	r1, [pc, #48]	@ (8004078 <__NVIC_SetPriority+0x4c>)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	0112      	lsls	r2, r2, #4
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	440b      	add	r3, r1
 8004050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004054:	e00a      	b.n	800406c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	4908      	ldr	r1, [pc, #32]	@ (800407c <__NVIC_SetPriority+0x50>)
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	3b04      	subs	r3, #4
 8004064:	0112      	lsls	r2, r2, #4
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	440b      	add	r3, r1
 800406a:	761a      	strb	r2, [r3, #24]
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	e000e100 	.word	0xe000e100
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004084:	2100      	movs	r1, #0
 8004086:	f06f 0004 	mvn.w	r0, #4
 800408a:	f7ff ffcf 	bl	800402c <__NVIC_SetPriority>
#endif
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800409a:	f3ef 8305 	mrs	r3, IPSR
 800409e:	603b      	str	r3, [r7, #0]
  return(result);
 80040a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80040a6:	f06f 0305 	mvn.w	r3, #5
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	e00c      	b.n	80040c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040ae:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <osKernelInitialize+0x44>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d105      	bne.n	80040c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040b6:	4b08      	ldr	r3, [pc, #32]	@ (80040d8 <osKernelInitialize+0x44>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040bc:	2300      	movs	r3, #0
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	e002      	b.n	80040c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
 80040c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040c8:	687b      	ldr	r3, [r7, #4]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	200004a8 	.word	0x200004a8

080040dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040e2:	f3ef 8305 	mrs	r3, IPSR
 80040e6:	603b      	str	r3, [r7, #0]
  return(result);
 80040e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80040ee:	f06f 0305 	mvn.w	r3, #5
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	e010      	b.n	8004118 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80040f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <osKernelStart+0x48>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d109      	bne.n	8004112 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80040fe:	f7ff ffbf 	bl	8004080 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004102:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <osKernelStart+0x48>)
 8004104:	2202      	movs	r2, #2
 8004106:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004108:	f001 f87a 	bl	8005200 <vTaskStartScheduler>
      stat = osOK;
 800410c:	2300      	movs	r3, #0
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	e002      	b.n	8004118 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004118:	687b      	ldr	r3, [r7, #4]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	200004a8 	.word	0x200004a8

08004128 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b08e      	sub	sp, #56	@ 0x38
 800412c:	af04      	add	r7, sp, #16
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004134:	2300      	movs	r3, #0
 8004136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004138:	f3ef 8305 	mrs	r3, IPSR
 800413c:	617b      	str	r3, [r7, #20]
  return(result);
 800413e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004140:	2b00      	cmp	r3, #0
 8004142:	d17e      	bne.n	8004242 <osThreadNew+0x11a>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d07b      	beq.n	8004242 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800414a:	2380      	movs	r3, #128	@ 0x80
 800414c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800414e:	2318      	movs	r3, #24
 8004150:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004152:	2300      	movs	r3, #0
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004156:	f04f 33ff 	mov.w	r3, #4294967295
 800415a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d045      	beq.n	80041ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <osThreadNew+0x48>
        name = attr->name;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <osThreadNew+0x6e>
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b38      	cmp	r3, #56	@ 0x38
 8004188:	d805      	bhi.n	8004196 <osThreadNew+0x6e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <osThreadNew+0x72>
        return (NULL);
 8004196:	2300      	movs	r3, #0
 8004198:	e054      	b.n	8004244 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00e      	beq.n	80041d0 <osThreadNew+0xa8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b5b      	cmp	r3, #91	@ 0x5b
 80041b8:	d90a      	bls.n	80041d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d006      	beq.n	80041d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <osThreadNew+0xa8>
        mem = 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	e010      	b.n	80041f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10c      	bne.n	80041f2 <osThreadNew+0xca>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <osThreadNew+0xca>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d104      	bne.n	80041f2 <osThreadNew+0xca>
          mem = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	e001      	b.n	80041f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d110      	bne.n	800421a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004200:	9202      	str	r2, [sp, #8]
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6a3a      	ldr	r2, [r7, #32]
 800420c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fe1a 	bl	8004e48 <xTaskCreateStatic>
 8004214:	4603      	mov	r3, r0
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	e013      	b.n	8004242 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d110      	bne.n	8004242 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	b29a      	uxth	r2, r3
 8004224:	f107 0310 	add.w	r3, r7, #16
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fe68 	bl	8004f08 <xTaskCreate>
 8004238:	4603      	mov	r3, r0
 800423a:	2b01      	cmp	r3, #1
 800423c:	d001      	beq.n	8004242 <osThreadNew+0x11a>
            hTask = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004242:	693b      	ldr	r3, [r7, #16]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3728      	adds	r7, #40	@ 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004254:	f3ef 8305 	mrs	r3, IPSR
 8004258:	60bb      	str	r3, [r7, #8]
  return(result);
 800425a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <osDelay+0x1c>
    stat = osErrorISR;
 8004260:	f06f 0305 	mvn.w	r3, #5
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e007      	b.n	8004278 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 ff8e 	bl	8005194 <vTaskDelay>
    }
  }

  return (stat);
 8004278:	68fb      	ldr	r3, [r7, #12]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a07      	ldr	r2, [pc, #28]	@ (80042b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004294:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4a06      	ldr	r2, [pc, #24]	@ (80042b4 <vApplicationGetIdleTaskMemory+0x30>)
 800429a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2280      	movs	r2, #128	@ 0x80
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	200004ac 	.word	0x200004ac
 80042b4:	20000508 	.word	0x20000508

080042b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a07      	ldr	r2, [pc, #28]	@ (80042e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80042c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4a06      	ldr	r2, [pc, #24]	@ (80042e8 <vApplicationGetTimerTaskMemory+0x30>)
 80042ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042d6:	601a      	str	r2, [r3, #0]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	20000708 	.word	0x20000708
 80042e8:	20000764 	.word	0x20000764

080042ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f103 0208 	add.w	r2, r3, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f103 0208 	add.w	r2, r3, #8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f103 0208 	add.w	r2, r3, #8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d103      	bne.n	80043ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e00c      	b.n	80043c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3308      	adds	r3, #8
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e002      	b.n	80043bc <vListInsert+0x2e>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d2f6      	bcs.n	80043b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6892      	ldr	r2, [r2, #8]
 8004416:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6852      	ldr	r2, [r2, #4]
 8004420:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d103      	bne.n	8004434 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1e5a      	subs	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004480:	f002 f962 	bl	8006748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	68f9      	ldr	r1, [r7, #12]
 800448e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	441a      	add	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b0:	3b01      	subs	r3, #1
 80044b2:	68f9      	ldr	r1, [r7, #12]
 80044b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	441a      	add	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	22ff      	movs	r2, #255	@ 0xff
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	22ff      	movs	r2, #255	@ 0xff
 80044cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d114      	bne.n	8004500 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01a      	beq.n	8004514 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3310      	adds	r3, #16
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 f91a 	bl	800571c <xTaskRemoveFromEventList>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d012      	beq.n	8004514 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <xQueueGenericReset+0xd0>)
 80044f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	e009      	b.n	8004514 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3310      	adds	r3, #16
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fef1 	bl	80042ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3324      	adds	r3, #36	@ 0x24
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff feec 	bl	80042ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004514:	f002 f94a 	bl	80067ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004518:	2301      	movs	r3, #1
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08e      	sub	sp, #56	@ 0x38
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10b      	bne.n	8004572 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <xQueueGenericCreateStatic+0x56>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <xQueueGenericCreateStatic+0x5a>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <xQueueGenericCreateStatic+0x5c>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	623b      	str	r3, [r7, #32]
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	e7fd      	b.n	800459c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <xQueueGenericCreateStatic+0x84>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <xQueueGenericCreateStatic+0x88>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <xQueueGenericCreateStatic+0x8a>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	61fb      	str	r3, [r7, #28]
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045ce:	2350      	movs	r3, #80	@ 0x50
 80045d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b50      	cmp	r3, #80	@ 0x50
 80045d6:	d00b      	beq.n	80045f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61bb      	str	r3, [r7, #24]
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80045f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004604:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f805 	bl	8004622 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800461a:	4618      	mov	r0, r3
 800461c:	3730      	adds	r7, #48	@ 0x30
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e002      	b.n	8004644 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004650:	2101      	movs	r1, #1
 8004652:	69b8      	ldr	r0, [r7, #24]
 8004654:	f7ff fefe 	bl	8004454 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	78fa      	ldrb	r2, [r7, #3]
 800465c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08e      	sub	sp, #56	@ 0x38
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004676:	2300      	movs	r3, #0
 8004678:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10b      	bne.n	800469c <xQueueGenericSend+0x34>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004696:	bf00      	nop
 8004698:	bf00      	nop
 800469a:	e7fd      	b.n	8004698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <xQueueGenericSend+0x42>
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <xQueueGenericSend+0x46>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <xQueueGenericSend+0x48>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10b      	bne.n	80046cc <xQueueGenericSend+0x64>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d103      	bne.n	80046da <xQueueGenericSend+0x72>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <xQueueGenericSend+0x76>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <xQueueGenericSend+0x78>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <xQueueGenericSend+0x94>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	623b      	str	r3, [r7, #32]
}
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046fc:	f001 f9de 	bl	8005abc <xTaskGetSchedulerState>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <xQueueGenericSend+0xa4>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <xQueueGenericSend+0xa8>
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <xQueueGenericSend+0xaa>
 8004710:	2300      	movs	r3, #0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10b      	bne.n	800472e <xQueueGenericSend+0xc6>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	61fb      	str	r3, [r7, #28]
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	e7fd      	b.n	800472a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800472e:	f002 f80b 	bl	8006748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <xQueueGenericSend+0xdc>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d129      	bne.n	8004798 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800474a:	f000 fa0f 	bl	8004b6c <prvCopyDataToQueue>
 800474e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	2b00      	cmp	r3, #0
 8004756:	d010      	beq.n	800477a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475a:	3324      	adds	r3, #36	@ 0x24
 800475c:	4618      	mov	r0, r3
 800475e:	f000 ffdd 	bl	800571c <xTaskRemoveFromEventList>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004768:	4b3f      	ldr	r3, [pc, #252]	@ (8004868 <xQueueGenericSend+0x200>)
 800476a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	e00a      	b.n	8004790 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800477a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004780:	4b39      	ldr	r3, [pc, #228]	@ (8004868 <xQueueGenericSend+0x200>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004790:	f002 f80c 	bl	80067ac <vPortExitCritical>
				return pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	e063      	b.n	8004860 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800479e:	f002 f805 	bl	80067ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e05c      	b.n	8004860 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047ac:	f107 0314 	add.w	r3, r7, #20
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 f817 	bl	80057e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047b6:	2301      	movs	r3, #1
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047ba:	f001 fff7 	bl	80067ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047be:	f000 fd87 	bl	80052d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047c2:	f001 ffc1 	bl	8006748 <vPortEnterCritical>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047cc:	b25b      	sxtb	r3, r3
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d103      	bne.n	80047dc <xQueueGenericSend+0x174>
 80047d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047e2:	b25b      	sxtb	r3, r3
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d103      	bne.n	80047f2 <xQueueGenericSend+0x18a>
 80047ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047f2:	f001 ffdb 	bl	80067ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047f6:	1d3a      	adds	r2, r7, #4
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 f806 	bl	8005810 <xTaskCheckForTimeOut>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d124      	bne.n	8004854 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800480a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800480c:	f000 faa6 	bl	8004d5c <prvIsQueueFull>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d018      	beq.n	8004848 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004818:	3310      	adds	r3, #16
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f000 ff2a 	bl	8005678 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004824:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004826:	f000 fa31 	bl	8004c8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800482a:	f000 fd5f 	bl	80052ec <xTaskResumeAll>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	f47f af7c 	bne.w	800472e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004836:	4b0c      	ldr	r3, [pc, #48]	@ (8004868 <xQueueGenericSend+0x200>)
 8004838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	e772      	b.n	800472e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800484a:	f000 fa1f 	bl	8004c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800484e:	f000 fd4d 	bl	80052ec <xTaskResumeAll>
 8004852:	e76c      	b.n	800472e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004854:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004856:	f000 fa19 	bl	8004c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800485a:	f000 fd47 	bl	80052ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800485e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004860:	4618      	mov	r0, r3
 8004862:	3738      	adds	r7, #56	@ 0x38
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b090      	sub	sp, #64	@ 0x40
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10b      	bne.n	800489c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004896:	bf00      	nop
 8004898:	bf00      	nop
 800489a:	e7fd      	b.n	8004898 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <xQueueGenericSendFromISR+0x3e>
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <xQueueGenericSendFromISR+0x42>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <xQueueGenericSendFromISR+0x44>
 80048ae:	2300      	movs	r3, #0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10b      	bne.n	80048cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d103      	bne.n	80048da <xQueueGenericSendFromISR+0x6e>
 80048d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <xQueueGenericSendFromISR+0x72>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <xQueueGenericSendFromISR+0x74>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	623b      	str	r3, [r7, #32]
}
 80048f6:	bf00      	nop
 80048f8:	bf00      	nop
 80048fa:	e7fd      	b.n	80048f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048fc:	f002 f804 	bl	8006908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004900:	f3ef 8211 	mrs	r2, BASEPRI
 8004904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	61fa      	str	r2, [r7, #28]
 8004916:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004918:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800491a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800491c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	429a      	cmp	r2, r3
 8004926:	d302      	bcc.n	800492e <xQueueGenericSendFromISR+0xc2>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d12f      	bne.n	800498e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800492e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004930:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004934:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004944:	f000 f912 	bl	8004b6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004948:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d112      	bne.n	8004978 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d016      	beq.n	8004988 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495c:	3324      	adds	r3, #36	@ 0x24
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fedc 	bl	800571c <xTaskRemoveFromEventList>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00e      	beq.n	8004988 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00b      	beq.n	8004988 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e007      	b.n	8004988 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004978:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800497c:	3301      	adds	r3, #1
 800497e:	b2db      	uxtb	r3, r3
 8004980:	b25a      	sxtb	r2, r3
 8004982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004988:	2301      	movs	r3, #1
 800498a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800498c:	e001      	b.n	8004992 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800498e:	2300      	movs	r3, #0
 8004990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004994:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800499c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800499e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3740      	adds	r7, #64	@ 0x40
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08c      	sub	sp, #48	@ 0x30
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10b      	bne.n	80049da <xQueueReceive+0x32>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	623b      	str	r3, [r7, #32]
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	e7fd      	b.n	80049d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d103      	bne.n	80049e8 <xQueueReceive+0x40>
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <xQueueReceive+0x44>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <xQueueReceive+0x46>
 80049ec:	2300      	movs	r3, #0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <xQueueReceive+0x62>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	61fb      	str	r3, [r7, #28]
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a0a:	f001 f857 	bl	8005abc <xTaskGetSchedulerState>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <xQueueReceive+0x72>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <xQueueReceive+0x76>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <xQueueReceive+0x78>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10b      	bne.n	8004a3c <xQueueReceive+0x94>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	61bb      	str	r3, [r7, #24]
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a3c:	f001 fe84 	bl	8006748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01f      	beq.n	8004a8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a50:	f000 f8f6 	bl	8004c40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	1e5a      	subs	r2, r3, #1
 8004a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00f      	beq.n	8004a84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	3310      	adds	r3, #16
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fe57 	bl	800571c <xTaskRemoveFromEventList>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a74:	4b3c      	ldr	r3, [pc, #240]	@ (8004b68 <xQueueReceive+0x1c0>)
 8004a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a84:	f001 fe92 	bl	80067ac <vPortExitCritical>
				return pdPASS;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e069      	b.n	8004b60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d103      	bne.n	8004a9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a92:	f001 fe8b 	bl	80067ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e062      	b.n	8004b60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aa0:	f107 0310 	add.w	r3, r7, #16
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fe9d 	bl	80057e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aae:	f001 fe7d 	bl	80067ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ab2:	f000 fc0d 	bl	80052d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ab6:	f001 fe47 	bl	8006748 <vPortEnterCritical>
 8004aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ac0:	b25b      	sxtb	r3, r3
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d103      	bne.n	8004ad0 <xQueueReceive+0x128>
 8004ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ad6:	b25b      	sxtb	r3, r3
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d103      	bne.n	8004ae6 <xQueueReceive+0x13e>
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ae6:	f001 fe61 	bl	80067ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aea:	1d3a      	adds	r2, r7, #4
 8004aec:	f107 0310 	add.w	r3, r7, #16
 8004af0:	4611      	mov	r1, r2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fe8c 	bl	8005810 <xTaskCheckForTimeOut>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d123      	bne.n	8004b46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b00:	f000 f916 	bl	8004d30 <prvIsQueueEmpty>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d017      	beq.n	8004b3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0c:	3324      	adds	r3, #36	@ 0x24
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4611      	mov	r1, r2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fdb0 	bl	8005678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b1a:	f000 f8b7 	bl	8004c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b1e:	f000 fbe5 	bl	80052ec <xTaskResumeAll>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d189      	bne.n	8004a3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004b28:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <xQueueReceive+0x1c0>)
 8004b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	e780      	b.n	8004a3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b3c:	f000 f8a6 	bl	8004c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b40:	f000 fbd4 	bl	80052ec <xTaskResumeAll>
 8004b44:	e77a      	b.n	8004a3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b48:	f000 f8a0 	bl	8004c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b4c:	f000 fbce 	bl	80052ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b52:	f000 f8ed 	bl	8004d30 <prvIsQueueEmpty>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f43f af6f 	beq.w	8004a3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3730      	adds	r7, #48	@ 0x30
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d14d      	bne.n	8004c2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 ffae 	bl	8005af8 <xTaskPriorityDisinherit>
 8004b9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	e043      	b.n	8004c2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d119      	bne.n	8004be0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6858      	ldr	r0, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	f002 f902 	bl	8006dc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	441a      	add	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d32b      	bcc.n	8004c2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	e026      	b.n	8004c2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68d8      	ldr	r0, [r3, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	461a      	mov	r2, r3
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	f002 f8e8 	bl	8006dc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf8:	425b      	negs	r3, r3
 8004bfa:	441a      	add	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d207      	bcs.n	8004c1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	425b      	negs	r3, r3
 8004c16:	441a      	add	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d105      	bne.n	8004c2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004c36:	697b      	ldr	r3, [r7, #20]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d018      	beq.n	8004c84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	441a      	add	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d303      	bcc.n	8004c74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68d9      	ldr	r1, [r3, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6838      	ldr	r0, [r7, #0]
 8004c80:	f002 f89e 	bl	8006dc0 <memcpy>
	}
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c94:	f001 fd58 	bl	8006748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ca0:	e011      	b.n	8004cc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d012      	beq.n	8004cd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3324      	adds	r3, #36	@ 0x24
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fd34 	bl	800571c <xTaskRemoveFromEventList>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cba:	f000 fe0d 	bl	80058d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	dce9      	bgt.n	8004ca2 <prvUnlockQueue+0x16>
 8004cce:	e000      	b.n	8004cd2 <prvUnlockQueue+0x46>
					break;
 8004cd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	22ff      	movs	r2, #255	@ 0xff
 8004cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004cda:	f001 fd67 	bl	80067ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cde:	f001 fd33 	bl	8006748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ce8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cea:	e011      	b.n	8004d10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d012      	beq.n	8004d1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3310      	adds	r3, #16
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fd0f 	bl	800571c <xTaskRemoveFromEventList>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d04:	f000 fde8 	bl	80058d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d08:	7bbb      	ldrb	r3, [r7, #14]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	dce9      	bgt.n	8004cec <prvUnlockQueue+0x60>
 8004d18:	e000      	b.n	8004d1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	22ff      	movs	r2, #255	@ 0xff
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004d24:	f001 fd42 	bl	80067ac <vPortExitCritical>
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d38:	f001 fd06 	bl	8006748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d44:	2301      	movs	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e001      	b.n	8004d4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d4e:	f001 fd2d 	bl	80067ac <vPortExitCritical>

	return xReturn;
 8004d52:	68fb      	ldr	r3, [r7, #12]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d64:	f001 fcf0 	bl	8006748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d102      	bne.n	8004d7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e001      	b.n	8004d7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d7e:	f001 fd15 	bl	80067ac <vPortExitCritical>

	return xReturn;
 8004d82:	68fb      	ldr	r3, [r7, #12]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e014      	b.n	8004dc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d9c:	4a0f      	ldr	r2, [pc, #60]	@ (8004ddc <vQueueAddToRegistry+0x50>)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004da8:	490c      	ldr	r1, [pc, #48]	@ (8004ddc <vQueueAddToRegistry+0x50>)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004db2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ddc <vQueueAddToRegistry+0x50>)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dbe:	e006      	b.n	8004dce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b07      	cmp	r3, #7
 8004dca:	d9e7      	bls.n	8004d9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000b64 	.word	0x20000b64

08004de0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004df0:	f001 fcaa 	bl	8006748 <vPortEnterCritical>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d103      	bne.n	8004e0a <vQueueWaitForMessageRestricted+0x2a>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e10:	b25b      	sxtb	r3, r3
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d103      	bne.n	8004e20 <vQueueWaitForMessageRestricted+0x40>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e20:	f001 fcc4 	bl	80067ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3324      	adds	r3, #36	@ 0x24
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fc45 	bl	80056c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e3a:	6978      	ldr	r0, [r7, #20]
 8004e3c:	f7ff ff26 	bl	8004c8c <prvUnlockQueue>
	}
 8004e40:	bf00      	nop
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08e      	sub	sp, #56	@ 0x38
 8004e4c:	af04      	add	r7, sp, #16
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	623b      	str	r3, [r7, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	61fb      	str	r3, [r7, #28]
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	e7fd      	b.n	8004e8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e92:	235c      	movs	r3, #92	@ 0x5c
 8004e94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b5c      	cmp	r3, #92	@ 0x5c
 8004e9a:	d00b      	beq.n	8004eb4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	61bb      	str	r3, [r7, #24]
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	e7fd      	b.n	8004eb0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004eb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01e      	beq.n	8004efa <xTaskCreateStatic+0xb2>
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01b      	beq.n	8004efa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9303      	str	r3, [sp, #12]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	9302      	str	r3, [sp, #8]
 8004edc:	f107 0314 	add.w	r3, r7, #20
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f850 	bl	8004f92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ef2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ef4:	f000 f8de 	bl	80050b4 <prvAddNewTaskToReadyList>
 8004ef8:	e001      	b.n	8004efe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004efe:	697b      	ldr	r3, [r7, #20]
	}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3728      	adds	r7, #40	@ 0x28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08c      	sub	sp, #48	@ 0x30
 8004f0c:	af04      	add	r7, sp, #16
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fd35 	bl	800698c <pvPortMalloc>
 8004f22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00e      	beq.n	8004f48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f2a:	205c      	movs	r0, #92	@ 0x5c
 8004f2c:	f001 fd2e 	bl	800698c <pvPortMalloc>
 8004f30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f3e:	e005      	b.n	8004f4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f40:	6978      	ldr	r0, [r7, #20]
 8004f42:	f001 fdf1 	bl	8006b28 <vPortFree>
 8004f46:	e001      	b.n	8004f4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d017      	beq.n	8004f82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9303      	str	r3, [sp, #12]
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	9302      	str	r3, [sp, #8]
 8004f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f80e 	bl	8004f92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f76:	69f8      	ldr	r0, [r7, #28]
 8004f78:	f000 f89c 	bl	80050b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	61bb      	str	r3, [r7, #24]
 8004f80:	e002      	b.n	8004f88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
 8004f86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f88:	69bb      	ldr	r3, [r7, #24]
	}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b088      	sub	sp, #32
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	21a5      	movs	r1, #165	@ 0xa5
 8004fac:	f001 fedc 	bl	8006d68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f023 0307 	bic.w	r3, r3, #7
 8004fc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00b      	beq.n	8004fec <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	617b      	str	r3, [r7, #20]
}
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	e7fd      	b.n	8004fe8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01f      	beq.n	8005032 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	e012      	b.n	800501e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	7819      	ldrb	r1, [r3, #0]
 8005000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	3334      	adds	r3, #52	@ 0x34
 8005008:	460a      	mov	r2, r1
 800500a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d006      	beq.n	8005026 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	3301      	adds	r3, #1
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2b0f      	cmp	r3, #15
 8005022:	d9e9      	bls.n	8004ff8 <prvInitialiseNewTask+0x66>
 8005024:	e000      	b.n	8005028 <prvInitialiseNewTask+0x96>
			{
				break;
 8005026:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005030:	e003      	b.n	800503a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800503a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503c:	2b37      	cmp	r3, #55	@ 0x37
 800503e:	d901      	bls.n	8005044 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005040:	2337      	movs	r3, #55	@ 0x37
 8005042:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005048:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800504e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005052:	2200      	movs	r2, #0
 8005054:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005058:	3304      	adds	r3, #4
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff f966 	bl	800432c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	3318      	adds	r3, #24
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff f961 	bl	800432c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800506a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005072:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800507e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005082:	2200      	movs	r2, #0
 8005084:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	68f9      	ldr	r1, [r7, #12]
 8005092:	69b8      	ldr	r0, [r7, #24]
 8005094:	f001 fa2a 	bl	80064ec <pxPortInitialiseStack>
 8005098:	4602      	mov	r2, r0
 800509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800509e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050aa:	bf00      	nop
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050bc:	f001 fb44 	bl	8006748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005178 <prvAddNewTaskToReadyList+0xc4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005178 <prvAddNewTaskToReadyList+0xc4>)
 80050c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050ca:	4b2c      	ldr	r3, [pc, #176]	@ (800517c <prvAddNewTaskToReadyList+0xc8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050d2:	4a2a      	ldr	r2, [pc, #168]	@ (800517c <prvAddNewTaskToReadyList+0xc8>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050d8:	4b27      	ldr	r3, [pc, #156]	@ (8005178 <prvAddNewTaskToReadyList+0xc4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d110      	bne.n	8005102 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050e0:	f000 fc1e 	bl	8005920 <prvInitialiseTaskLists>
 80050e4:	e00d      	b.n	8005102 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050e6:	4b26      	ldr	r3, [pc, #152]	@ (8005180 <prvAddNewTaskToReadyList+0xcc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050ee:	4b23      	ldr	r3, [pc, #140]	@ (800517c <prvAddNewTaskToReadyList+0xc8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d802      	bhi.n	8005102 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050fc:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <prvAddNewTaskToReadyList+0xc8>)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005102:	4b20      	ldr	r3, [pc, #128]	@ (8005184 <prvAddNewTaskToReadyList+0xd0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	4a1e      	ldr	r2, [pc, #120]	@ (8005184 <prvAddNewTaskToReadyList+0xd0>)
 800510a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800510c:	4b1d      	ldr	r3, [pc, #116]	@ (8005184 <prvAddNewTaskToReadyList+0xd0>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005118:	4b1b      	ldr	r3, [pc, #108]	@ (8005188 <prvAddNewTaskToReadyList+0xd4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d903      	bls.n	8005128 <prvAddNewTaskToReadyList+0x74>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <prvAddNewTaskToReadyList+0xd4>)
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4a15      	ldr	r2, [pc, #84]	@ (800518c <prvAddNewTaskToReadyList+0xd8>)
 8005136:	441a      	add	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f7ff f901 	bl	8004346 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005144:	f001 fb32 	bl	80067ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005148:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <prvAddNewTaskToReadyList+0xcc>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00e      	beq.n	800516e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005150:	4b0a      	ldr	r3, [pc, #40]	@ (800517c <prvAddNewTaskToReadyList+0xc8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	429a      	cmp	r2, r3
 800515c:	d207      	bcs.n	800516e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800515e:	4b0c      	ldr	r3, [pc, #48]	@ (8005190 <prvAddNewTaskToReadyList+0xdc>)
 8005160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20001078 	.word	0x20001078
 800517c:	20000ba4 	.word	0x20000ba4
 8005180:	20001084 	.word	0x20001084
 8005184:	20001094 	.word	0x20001094
 8005188:	20001080 	.word	0x20001080
 800518c:	20000ba8 	.word	0x20000ba8
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d018      	beq.n	80051d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051a6:	4b14      	ldr	r3, [pc, #80]	@ (80051f8 <vTaskDelay+0x64>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <vTaskDelay+0x32>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60bb      	str	r3, [r7, #8]
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051c6:	f000 f883 	bl	80052d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051ca:	2100      	movs	r1, #0
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fddf 	bl	8005d90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051d2:	f000 f88b 	bl	80052ec <xTaskResumeAll>
 80051d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d107      	bne.n	80051ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80051de:	4b07      	ldr	r3, [pc, #28]	@ (80051fc <vTaskDelay+0x68>)
 80051e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	200010a0 	.word	0x200010a0
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	@ 0x28
 8005204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005206:	2300      	movs	r3, #0
 8005208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800520e:	463a      	mov	r2, r7
 8005210:	1d39      	adds	r1, r7, #4
 8005212:	f107 0308 	add.w	r3, r7, #8
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff f834 	bl	8004284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	9202      	str	r2, [sp, #8]
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	2300      	movs	r3, #0
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	2300      	movs	r3, #0
 800522c:	460a      	mov	r2, r1
 800522e:	4922      	ldr	r1, [pc, #136]	@ (80052b8 <vTaskStartScheduler+0xb8>)
 8005230:	4822      	ldr	r0, [pc, #136]	@ (80052bc <vTaskStartScheduler+0xbc>)
 8005232:	f7ff fe09 	bl	8004e48 <xTaskCreateStatic>
 8005236:	4603      	mov	r3, r0
 8005238:	4a21      	ldr	r2, [pc, #132]	@ (80052c0 <vTaskStartScheduler+0xc0>)
 800523a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800523c:	4b20      	ldr	r3, [pc, #128]	@ (80052c0 <vTaskStartScheduler+0xc0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005244:	2301      	movs	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e001      	b.n	800524e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d102      	bne.n	800525a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005254:	f000 fdf0 	bl	8005e38 <xTimerCreateTimerTask>
 8005258:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d116      	bne.n	800528e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	613b      	str	r3, [r7, #16]
}
 8005272:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005274:	4b13      	ldr	r3, [pc, #76]	@ (80052c4 <vTaskStartScheduler+0xc4>)
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800527c:	4b12      	ldr	r3, [pc, #72]	@ (80052c8 <vTaskStartScheduler+0xc8>)
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005282:	4b12      	ldr	r3, [pc, #72]	@ (80052cc <vTaskStartScheduler+0xcc>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005288:	f001 f9ba 	bl	8006600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800528c:	e00f      	b.n	80052ae <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d10b      	bne.n	80052ae <vTaskStartScheduler+0xae>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	60fb      	str	r3, [r7, #12]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <vTaskStartScheduler+0xaa>
}
 80052ae:	bf00      	nop
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	08006e0c 	.word	0x08006e0c
 80052bc:	080058f1 	.word	0x080058f1
 80052c0:	2000109c 	.word	0x2000109c
 80052c4:	20001098 	.word	0x20001098
 80052c8:	20001084 	.word	0x20001084
 80052cc:	2000107c 	.word	0x2000107c

080052d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052d4:	4b04      	ldr	r3, [pc, #16]	@ (80052e8 <vTaskSuspendAll+0x18>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3301      	adds	r3, #1
 80052da:	4a03      	ldr	r2, [pc, #12]	@ (80052e8 <vTaskSuspendAll+0x18>)
 80052dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052de:	bf00      	nop
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	200010a0 	.word	0x200010a0

080052ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052fa:	4b42      	ldr	r3, [pc, #264]	@ (8005404 <xTaskResumeAll+0x118>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10b      	bne.n	800531a <xTaskResumeAll+0x2e>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	603b      	str	r3, [r7, #0]
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	e7fd      	b.n	8005316 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800531a:	f001 fa15 	bl	8006748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800531e:	4b39      	ldr	r3, [pc, #228]	@ (8005404 <xTaskResumeAll+0x118>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3b01      	subs	r3, #1
 8005324:	4a37      	ldr	r2, [pc, #220]	@ (8005404 <xTaskResumeAll+0x118>)
 8005326:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005328:	4b36      	ldr	r3, [pc, #216]	@ (8005404 <xTaskResumeAll+0x118>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d162      	bne.n	80053f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005330:	4b35      	ldr	r3, [pc, #212]	@ (8005408 <xTaskResumeAll+0x11c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d05e      	beq.n	80053f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005338:	e02f      	b.n	800539a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800533a:	4b34      	ldr	r3, [pc, #208]	@ (800540c <xTaskResumeAll+0x120>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3318      	adds	r3, #24
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff f85a 	bl	8004400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3304      	adds	r3, #4
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff f855 	bl	8004400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535a:	4b2d      	ldr	r3, [pc, #180]	@ (8005410 <xTaskResumeAll+0x124>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d903      	bls.n	800536a <xTaskResumeAll+0x7e>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	4a2a      	ldr	r2, [pc, #168]	@ (8005410 <xTaskResumeAll+0x124>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4a27      	ldr	r2, [pc, #156]	@ (8005414 <xTaskResumeAll+0x128>)
 8005378:	441a      	add	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f7fe ffe0 	bl	8004346 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538a:	4b23      	ldr	r3, [pc, #140]	@ (8005418 <xTaskResumeAll+0x12c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	429a      	cmp	r2, r3
 8005392:	d302      	bcc.n	800539a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005394:	4b21      	ldr	r3, [pc, #132]	@ (800541c <xTaskResumeAll+0x130>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800539a:	4b1c      	ldr	r3, [pc, #112]	@ (800540c <xTaskResumeAll+0x120>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1cb      	bne.n	800533a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053a8:	f000 fb58 	bl	8005a5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005420 <xTaskResumeAll+0x134>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d010      	beq.n	80053da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053b8:	f000 f846 	bl	8005448 <xTaskIncrementTick>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80053c2:	4b16      	ldr	r3, [pc, #88]	@ (800541c <xTaskResumeAll+0x130>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f1      	bne.n	80053b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80053d4:	4b12      	ldr	r3, [pc, #72]	@ (8005420 <xTaskResumeAll+0x134>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053da:	4b10      	ldr	r3, [pc, #64]	@ (800541c <xTaskResumeAll+0x130>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005424 <xTaskResumeAll+0x138>)
 80053e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053f6:	f001 f9d9 	bl	80067ac <vPortExitCritical>

	return xAlreadyYielded;
 80053fa:	68bb      	ldr	r3, [r7, #8]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	200010a0 	.word	0x200010a0
 8005408:	20001078 	.word	0x20001078
 800540c:	20001038 	.word	0x20001038
 8005410:	20001080 	.word	0x20001080
 8005414:	20000ba8 	.word	0x20000ba8
 8005418:	20000ba4 	.word	0x20000ba4
 800541c:	2000108c 	.word	0x2000108c
 8005420:	20001088 	.word	0x20001088
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800542e:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <xTaskGetTickCount+0x1c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005434:	687b      	ldr	r3, [r7, #4]
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	2000107c 	.word	0x2000107c

08005448 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005452:	4b4f      	ldr	r3, [pc, #316]	@ (8005590 <xTaskIncrementTick+0x148>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	f040 8090 	bne.w	800557c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800545c:	4b4d      	ldr	r3, [pc, #308]	@ (8005594 <xTaskIncrementTick+0x14c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005464:	4a4b      	ldr	r2, [pc, #300]	@ (8005594 <xTaskIncrementTick+0x14c>)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d121      	bne.n	80054b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005470:	4b49      	ldr	r3, [pc, #292]	@ (8005598 <xTaskIncrementTick+0x150>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <xTaskIncrementTick+0x4a>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	603b      	str	r3, [r7, #0]
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	e7fd      	b.n	800548e <xTaskIncrementTick+0x46>
 8005492:	4b41      	ldr	r3, [pc, #260]	@ (8005598 <xTaskIncrementTick+0x150>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	4b40      	ldr	r3, [pc, #256]	@ (800559c <xTaskIncrementTick+0x154>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a3e      	ldr	r2, [pc, #248]	@ (8005598 <xTaskIncrementTick+0x150>)
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	4a3e      	ldr	r2, [pc, #248]	@ (800559c <xTaskIncrementTick+0x154>)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	4b3e      	ldr	r3, [pc, #248]	@ (80055a0 <xTaskIncrementTick+0x158>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	4a3c      	ldr	r2, [pc, #240]	@ (80055a0 <xTaskIncrementTick+0x158>)
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	f000 fad4 	bl	8005a5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054b4:	4b3b      	ldr	r3, [pc, #236]	@ (80055a4 <xTaskIncrementTick+0x15c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d349      	bcc.n	8005552 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054be:	4b36      	ldr	r3, [pc, #216]	@ (8005598 <xTaskIncrementTick+0x150>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c8:	4b36      	ldr	r3, [pc, #216]	@ (80055a4 <xTaskIncrementTick+0x15c>)
 80054ca:	f04f 32ff 	mov.w	r2, #4294967295
 80054ce:	601a      	str	r2, [r3, #0]
					break;
 80054d0:	e03f      	b.n	8005552 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d2:	4b31      	ldr	r3, [pc, #196]	@ (8005598 <xTaskIncrementTick+0x150>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d203      	bcs.n	80054f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054ea:	4a2e      	ldr	r2, [pc, #184]	@ (80055a4 <xTaskIncrementTick+0x15c>)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054f0:	e02f      	b.n	8005552 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe ff82 	bl	8004400 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	3318      	adds	r3, #24
 8005508:	4618      	mov	r0, r3
 800550a:	f7fe ff79 	bl	8004400 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005512:	4b25      	ldr	r3, [pc, #148]	@ (80055a8 <xTaskIncrementTick+0x160>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d903      	bls.n	8005522 <xTaskIncrementTick+0xda>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	4a22      	ldr	r2, [pc, #136]	@ (80055a8 <xTaskIncrementTick+0x160>)
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4a1f      	ldr	r2, [pc, #124]	@ (80055ac <xTaskIncrementTick+0x164>)
 8005530:	441a      	add	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f7fe ff04 	bl	8004346 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005542:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <xTaskIncrementTick+0x168>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	429a      	cmp	r2, r3
 800554a:	d3b8      	bcc.n	80054be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005550:	e7b5      	b.n	80054be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005552:	4b17      	ldr	r3, [pc, #92]	@ (80055b0 <xTaskIncrementTick+0x168>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005558:	4914      	ldr	r1, [pc, #80]	@ (80055ac <xTaskIncrementTick+0x164>)
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d901      	bls.n	800556e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800556a:	2301      	movs	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800556e:	4b11      	ldr	r3, [pc, #68]	@ (80055b4 <xTaskIncrementTick+0x16c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d007      	beq.n	8005586 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005576:	2301      	movs	r3, #1
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	e004      	b.n	8005586 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800557c:	4b0e      	ldr	r3, [pc, #56]	@ (80055b8 <xTaskIncrementTick+0x170>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	4a0d      	ldr	r2, [pc, #52]	@ (80055b8 <xTaskIncrementTick+0x170>)
 8005584:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005586:	697b      	ldr	r3, [r7, #20]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	200010a0 	.word	0x200010a0
 8005594:	2000107c 	.word	0x2000107c
 8005598:	20001030 	.word	0x20001030
 800559c:	20001034 	.word	0x20001034
 80055a0:	20001090 	.word	0x20001090
 80055a4:	20001098 	.word	0x20001098
 80055a8:	20001080 	.word	0x20001080
 80055ac:	20000ba8 	.word	0x20000ba8
 80055b0:	20000ba4 	.word	0x20000ba4
 80055b4:	2000108c 	.word	0x2000108c
 80055b8:	20001088 	.word	0x20001088

080055bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055c2:	4b28      	ldr	r3, [pc, #160]	@ (8005664 <vTaskSwitchContext+0xa8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055ca:	4b27      	ldr	r3, [pc, #156]	@ (8005668 <vTaskSwitchContext+0xac>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055d0:	e042      	b.n	8005658 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80055d2:	4b25      	ldr	r3, [pc, #148]	@ (8005668 <vTaskSwitchContext+0xac>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d8:	4b24      	ldr	r3, [pc, #144]	@ (800566c <vTaskSwitchContext+0xb0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	e011      	b.n	8005604 <vTaskSwitchContext+0x48>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <vTaskSwitchContext+0x42>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	607b      	str	r3, [r7, #4]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <vTaskSwitchContext+0x3e>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3b01      	subs	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	491a      	ldr	r1, [pc, #104]	@ (8005670 <vTaskSwitchContext+0xb4>)
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0e3      	beq.n	80055e0 <vTaskSwitchContext+0x24>
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a13      	ldr	r2, [pc, #76]	@ (8005670 <vTaskSwitchContext+0xb4>)
 8005624:	4413      	add	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	3308      	adds	r3, #8
 800563a:	429a      	cmp	r2, r3
 800563c:	d104      	bne.n	8005648 <vTaskSwitchContext+0x8c>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	4a09      	ldr	r2, [pc, #36]	@ (8005674 <vTaskSwitchContext+0xb8>)
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	4a06      	ldr	r2, [pc, #24]	@ (800566c <vTaskSwitchContext+0xb0>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6013      	str	r3, [r2, #0]
}
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	200010a0 	.word	0x200010a0
 8005668:	2000108c 	.word	0x2000108c
 800566c:	20001080 	.word	0x20001080
 8005670:	20000ba8 	.word	0x20000ba8
 8005674:	20000ba4 	.word	0x20000ba4

08005678 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60fb      	str	r3, [r7, #12]
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	e7fd      	b.n	800569c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056a0:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <vTaskPlaceOnEventList+0x48>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3318      	adds	r3, #24
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fe fe70 	bl	800438e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056ae:	2101      	movs	r1, #1
 80056b0:	6838      	ldr	r0, [r7, #0]
 80056b2:	f000 fb6d 	bl	8005d90 <prvAddCurrentTaskToDelayedList>
}
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000ba4 	.word	0x20000ba4

080056c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	617b      	str	r3, [r7, #20]
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	e7fd      	b.n	80056ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005718 <vTaskPlaceOnEventListRestricted+0x54>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3318      	adds	r3, #24
 80056f4:	4619      	mov	r1, r3
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7fe fe25 	bl	8004346 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	68b8      	ldr	r0, [r7, #8]
 800570c:	f000 fb40 	bl	8005d90 <prvAddCurrentTaskToDelayedList>
	}
 8005710:	bf00      	nop
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000ba4 	.word	0x20000ba4

0800571c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10b      	bne.n	800574a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	60fb      	str	r3, [r7, #12]
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	e7fd      	b.n	8005746 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3318      	adds	r3, #24
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe fe56 	bl	8004400 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005754:	4b1d      	ldr	r3, [pc, #116]	@ (80057cc <xTaskRemoveFromEventList+0xb0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d11d      	bne.n	8005798 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	3304      	adds	r3, #4
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe fe4d 	bl	8004400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576a:	4b19      	ldr	r3, [pc, #100]	@ (80057d0 <xTaskRemoveFromEventList+0xb4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d903      	bls.n	800577a <xTaskRemoveFromEventList+0x5e>
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	4a16      	ldr	r2, [pc, #88]	@ (80057d0 <xTaskRemoveFromEventList+0xb4>)
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4a13      	ldr	r2, [pc, #76]	@ (80057d4 <xTaskRemoveFromEventList+0xb8>)
 8005788:	441a      	add	r2, r3
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f7fe fdd8 	bl	8004346 <vListInsertEnd>
 8005796:	e005      	b.n	80057a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	3318      	adds	r3, #24
 800579c:	4619      	mov	r1, r3
 800579e:	480e      	ldr	r0, [pc, #56]	@ (80057d8 <xTaskRemoveFromEventList+0xbc>)
 80057a0:	f7fe fdd1 	bl	8004346 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a8:	4b0c      	ldr	r3, [pc, #48]	@ (80057dc <xTaskRemoveFromEventList+0xc0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d905      	bls.n	80057be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057b2:	2301      	movs	r3, #1
 80057b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057b6:	4b0a      	ldr	r3, [pc, #40]	@ (80057e0 <xTaskRemoveFromEventList+0xc4>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	e001      	b.n	80057c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057c2:	697b      	ldr	r3, [r7, #20]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	200010a0 	.word	0x200010a0
 80057d0:	20001080 	.word	0x20001080
 80057d4:	20000ba8 	.word	0x20000ba8
 80057d8:	20001038 	.word	0x20001038
 80057dc:	20000ba4 	.word	0x20000ba4
 80057e0:	2000108c 	.word	0x2000108c

080057e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057ec:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <vTaskInternalSetTimeOutState+0x24>)
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057f4:	4b05      	ldr	r3, [pc, #20]	@ (800580c <vTaskInternalSetTimeOutState+0x28>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20001090 	.word	0x20001090
 800580c:	2000107c 	.word	0x2000107c

08005810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	613b      	str	r3, [r7, #16]
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60fb      	str	r3, [r7, #12]
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005856:	f000 ff77 	bl	8006748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800585a:	4b1d      	ldr	r3, [pc, #116]	@ (80058d0 <xTaskCheckForTimeOut+0xc0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d102      	bne.n	800587a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005874:	2300      	movs	r3, #0
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	e023      	b.n	80058c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b15      	ldr	r3, [pc, #84]	@ (80058d4 <xTaskCheckForTimeOut+0xc4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d007      	beq.n	8005896 <xTaskCheckForTimeOut+0x86>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	429a      	cmp	r2, r3
 800588e:	d302      	bcc.n	8005896 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e015      	b.n	80058c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	429a      	cmp	r2, r3
 800589e:	d20b      	bcs.n	80058b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	1ad2      	subs	r2, r2, r3
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff ff99 	bl	80057e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e004      	b.n	80058c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058be:	2301      	movs	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058c2:	f000 ff73 	bl	80067ac <vPortExitCritical>

	return xReturn;
 80058c6:	69fb      	ldr	r3, [r7, #28]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	2000107c 	.word	0x2000107c
 80058d4:	20001090 	.word	0x20001090

080058d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058dc:	4b03      	ldr	r3, [pc, #12]	@ (80058ec <vTaskMissedYield+0x14>)
 80058de:	2201      	movs	r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
}
 80058e2:	bf00      	nop
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	2000108c 	.word	0x2000108c

080058f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058f8:	f000 f852 	bl	80059a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058fc:	4b06      	ldr	r3, [pc, #24]	@ (8005918 <prvIdleTask+0x28>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d9f9      	bls.n	80058f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005904:	4b05      	ldr	r3, [pc, #20]	@ (800591c <prvIdleTask+0x2c>)
 8005906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005914:	e7f0      	b.n	80058f8 <prvIdleTask+0x8>
 8005916:	bf00      	nop
 8005918:	20000ba8 	.word	0x20000ba8
 800591c:	e000ed04 	.word	0xe000ed04

08005920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005926:	2300      	movs	r3, #0
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	e00c      	b.n	8005946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4a12      	ldr	r2, [pc, #72]	@ (8005980 <prvInitialiseTaskLists+0x60>)
 8005938:	4413      	add	r3, r2
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe fcd6 	bl	80042ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3301      	adds	r3, #1
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b37      	cmp	r3, #55	@ 0x37
 800594a:	d9ef      	bls.n	800592c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800594c:	480d      	ldr	r0, [pc, #52]	@ (8005984 <prvInitialiseTaskLists+0x64>)
 800594e:	f7fe fccd 	bl	80042ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005952:	480d      	ldr	r0, [pc, #52]	@ (8005988 <prvInitialiseTaskLists+0x68>)
 8005954:	f7fe fcca 	bl	80042ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005958:	480c      	ldr	r0, [pc, #48]	@ (800598c <prvInitialiseTaskLists+0x6c>)
 800595a:	f7fe fcc7 	bl	80042ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800595e:	480c      	ldr	r0, [pc, #48]	@ (8005990 <prvInitialiseTaskLists+0x70>)
 8005960:	f7fe fcc4 	bl	80042ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005964:	480b      	ldr	r0, [pc, #44]	@ (8005994 <prvInitialiseTaskLists+0x74>)
 8005966:	f7fe fcc1 	bl	80042ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800596a:	4b0b      	ldr	r3, [pc, #44]	@ (8005998 <prvInitialiseTaskLists+0x78>)
 800596c:	4a05      	ldr	r2, [pc, #20]	@ (8005984 <prvInitialiseTaskLists+0x64>)
 800596e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005970:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <prvInitialiseTaskLists+0x7c>)
 8005972:	4a05      	ldr	r2, [pc, #20]	@ (8005988 <prvInitialiseTaskLists+0x68>)
 8005974:	601a      	str	r2, [r3, #0]
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000ba8 	.word	0x20000ba8
 8005984:	20001008 	.word	0x20001008
 8005988:	2000101c 	.word	0x2000101c
 800598c:	20001038 	.word	0x20001038
 8005990:	2000104c 	.word	0x2000104c
 8005994:	20001064 	.word	0x20001064
 8005998:	20001030 	.word	0x20001030
 800599c:	20001034 	.word	0x20001034

080059a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059a6:	e019      	b.n	80059dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059a8:	f000 fece 	bl	8006748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ac:	4b10      	ldr	r3, [pc, #64]	@ (80059f0 <prvCheckTasksWaitingTermination+0x50>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe fd21 	bl	8004400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059be:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <prvCheckTasksWaitingTermination+0x54>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	4a0b      	ldr	r2, [pc, #44]	@ (80059f4 <prvCheckTasksWaitingTermination+0x54>)
 80059c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059c8:	4b0b      	ldr	r3, [pc, #44]	@ (80059f8 <prvCheckTasksWaitingTermination+0x58>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	4a0a      	ldr	r2, [pc, #40]	@ (80059f8 <prvCheckTasksWaitingTermination+0x58>)
 80059d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059d2:	f000 feeb 	bl	80067ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f810 	bl	80059fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059dc:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <prvCheckTasksWaitingTermination+0x58>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e1      	bne.n	80059a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	2000104c 	.word	0x2000104c
 80059f4:	20001078 	.word	0x20001078
 80059f8:	20001060 	.word	0x20001060

080059fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d108      	bne.n	8005a20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 f888 	bl	8006b28 <vPortFree>
				vPortFree( pxTCB );
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 f885 	bl	8006b28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a1e:	e019      	b.n	8005a54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d103      	bne.n	8005a32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f001 f87c 	bl	8006b28 <vPortFree>
	}
 8005a30:	e010      	b.n	8005a54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d00b      	beq.n	8005a54 <prvDeleteTCB+0x58>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60fb      	str	r3, [r7, #12]
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <prvDeleteTCB+0x54>
	}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a62:	4b0c      	ldr	r3, [pc, #48]	@ (8005a94 <prvResetNextTaskUnblockTime+0x38>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <prvResetNextTaskUnblockTime+0x3c>)
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a74:	e008      	b.n	8005a88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a76:	4b07      	ldr	r3, [pc, #28]	@ (8005a94 <prvResetNextTaskUnblockTime+0x38>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4a04      	ldr	r2, [pc, #16]	@ (8005a98 <prvResetNextTaskUnblockTime+0x3c>)
 8005a86:	6013      	str	r3, [r2, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	20001030 	.word	0x20001030
 8005a98:	20001098 	.word	0x20001098

08005a9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005aa2:	4b05      	ldr	r3, [pc, #20]	@ (8005ab8 <xTaskGetCurrentTaskHandle+0x1c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005aa8:	687b      	ldr	r3, [r7, #4]
	}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000ba4 	.word	0x20000ba4

08005abc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <xTaskGetSchedulerState+0x34>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005aca:	2301      	movs	r3, #1
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	e008      	b.n	8005ae2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad0:	4b08      	ldr	r3, [pc, #32]	@ (8005af4 <xTaskGetSchedulerState+0x38>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	607b      	str	r3, [r7, #4]
 8005adc:	e001      	b.n	8005ae2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ae2:	687b      	ldr	r3, [r7, #4]
	}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	20001084 	.word	0x20001084
 8005af4:	200010a0 	.word	0x200010a0

08005af8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d058      	beq.n	8005bc0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005bcc <xTaskPriorityDisinherit+0xd4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d00b      	beq.n	8005b30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	60fb      	str	r3, [r7, #12]
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	e7fd      	b.n	8005b2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	60bb      	str	r3, [r7, #8]
}
 8005b4a:	bf00      	nop
 8005b4c:	bf00      	nop
 8005b4e:	e7fd      	b.n	8005b4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b54:	1e5a      	subs	r2, r3, #1
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d02c      	beq.n	8005bc0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d128      	bne.n	8005bc0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe fc44 	bl	8004400 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b90:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <xTaskPriorityDisinherit+0xd8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d903      	bls.n	8005ba0 <xTaskPriorityDisinherit+0xa8>
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd0 <xTaskPriorityDisinherit+0xd8>)
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4a09      	ldr	r2, [pc, #36]	@ (8005bd4 <xTaskPriorityDisinherit+0xdc>)
 8005bae:	441a      	add	r2, r3
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f7fe fbc5 	bl	8004346 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bc0:	697b      	ldr	r3, [r7, #20]
	}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000ba4 	.word	0x20000ba4
 8005bd0:	20001080 	.word	0x20001080
 8005bd4:	20000ba8 	.word	0x20000ba8

08005bd8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005be2:	f000 fdb1 	bl	8006748 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005be6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c60 <ulTaskNotifyTake+0x88>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d113      	bne.n	8005c18 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c60 <ulTaskNotifyTake+0x88>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c00:	2101      	movs	r1, #1
 8005c02:	6838      	ldr	r0, [r7, #0]
 8005c04:	f000 f8c4 	bl	8005d90 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005c08:	4b16      	ldr	r3, [pc, #88]	@ (8005c64 <ulTaskNotifyTake+0x8c>)
 8005c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005c18:	f000 fdc8 	bl	80067ac <vPortExitCritical>

		taskENTER_CRITICAL();
 8005c1c:	f000 fd94 	bl	8006748 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005c20:	4b0f      	ldr	r3, [pc, #60]	@ (8005c60 <ulTaskNotifyTake+0x88>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c26:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <ulTaskNotifyTake+0x88>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005c3c:	e004      	b.n	8005c48 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005c3e:	4b08      	ldr	r3, [pc, #32]	@ (8005c60 <ulTaskNotifyTake+0x88>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	3a01      	subs	r2, #1
 8005c46:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c48:	4b05      	ldr	r3, [pc, #20]	@ (8005c60 <ulTaskNotifyTake+0x88>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8005c52:	f000 fdab 	bl	80067ac <vPortExitCritical>

		return ulReturn;
 8005c56:	68fb      	ldr	r3, [r7, #12]
	}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000ba4 	.word	0x20000ba4
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	@ 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	61bb      	str	r3, [r7, #24]
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c90:	f000 fe3a 	bl	8006908 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8005c98:	f3ef 8211 	mrs	r2, BASEPRI
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	617a      	str	r2, [r7, #20]
 8005cae:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005cb0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cb2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005cba:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005cce:	7ffb      	ldrb	r3, [r7, #31]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d147      	bne.n	8005d64 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	60fb      	str	r3, [r7, #12]
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf4:	4b20      	ldr	r3, [pc, #128]	@ (8005d78 <vTaskNotifyGiveFromISR+0x110>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d11d      	bne.n	8005d38 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe fb7d 	bl	8004400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005d7c <vTaskNotifyGiveFromISR+0x114>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d903      	bls.n	8005d1a <vTaskNotifyGiveFromISR+0xb2>
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	4a19      	ldr	r2, [pc, #100]	@ (8005d7c <vTaskNotifyGiveFromISR+0x114>)
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4a16      	ldr	r2, [pc, #88]	@ (8005d80 <vTaskNotifyGiveFromISR+0x118>)
 8005d28:	441a      	add	r2, r3
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f7fe fb08 	bl	8004346 <vListInsertEnd>
 8005d36:	e005      	b.n	8005d44 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	3318      	adds	r3, #24
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4811      	ldr	r0, [pc, #68]	@ (8005d84 <vTaskNotifyGiveFromISR+0x11c>)
 8005d40:	f7fe fb01 	bl	8004346 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d48:	4b0f      	ldr	r3, [pc, #60]	@ (8005d88 <vTaskNotifyGiveFromISR+0x120>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d908      	bls.n	8005d64 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d8c <vTaskNotifyGiveFromISR+0x124>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f383 8811 	msr	BASEPRI, r3
}
 8005d6e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8005d70:	bf00      	nop
 8005d72:	3728      	adds	r7, #40	@ 0x28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	200010a0 	.word	0x200010a0
 8005d7c:	20001080 	.word	0x20001080
 8005d80:	20000ba8 	.word	0x20000ba8
 8005d84:	20001038 	.word	0x20001038
 8005d88:	20000ba4 	.word	0x20000ba4
 8005d8c:	2000108c 	.word	0x2000108c

08005d90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d9a:	4b21      	ldr	r3, [pc, #132]	@ (8005e20 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005da0:	4b20      	ldr	r3, [pc, #128]	@ (8005e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe fb2a 	bl	8004400 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d10a      	bne.n	8005dca <prvAddCurrentTaskToDelayedList+0x3a>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dba:	4b1a      	ldr	r3, [pc, #104]	@ (8005e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4819      	ldr	r0, [pc, #100]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0x98>)
 8005dc4:	f7fe fabf 	bl	8004346 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dc8:	e026      	b.n	8005e18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4413      	add	r3, r2
 8005dd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dd2:	4b14      	ldr	r3, [pc, #80]	@ (8005e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d209      	bcs.n	8005df6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005de2:	4b12      	ldr	r3, [pc, #72]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b0f      	ldr	r3, [pc, #60]	@ (8005e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f7fe facd 	bl	800438e <vListInsert>
}
 8005df4:	e010      	b.n	8005e18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005df6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8005e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f7fe fac3 	bl	800438e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e08:	4b0a      	ldr	r3, [pc, #40]	@ (8005e34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d202      	bcs.n	8005e18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e12:	4a08      	ldr	r2, [pc, #32]	@ (8005e34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6013      	str	r3, [r2, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	2000107c 	.word	0x2000107c
 8005e24:	20000ba4 	.word	0x20000ba4
 8005e28:	20001064 	.word	0x20001064
 8005e2c:	20001034 	.word	0x20001034
 8005e30:	20001030 	.word	0x20001030
 8005e34:	20001098 	.word	0x20001098

08005e38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	@ 0x28
 8005e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e42:	f000 fb13 	bl	800646c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e46:	4b1d      	ldr	r3, [pc, #116]	@ (8005ebc <xTimerCreateTimerTask+0x84>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d021      	beq.n	8005e92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e56:	1d3a      	adds	r2, r7, #4
 8005e58:	f107 0108 	add.w	r1, r7, #8
 8005e5c:	f107 030c 	add.w	r3, r7, #12
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe fa29 	bl	80042b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	9202      	str	r2, [sp, #8]
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	2302      	movs	r3, #2
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	2300      	movs	r3, #0
 8005e76:	460a      	mov	r2, r1
 8005e78:	4911      	ldr	r1, [pc, #68]	@ (8005ec0 <xTimerCreateTimerTask+0x88>)
 8005e7a:	4812      	ldr	r0, [pc, #72]	@ (8005ec4 <xTimerCreateTimerTask+0x8c>)
 8005e7c:	f7fe ffe4 	bl	8004e48 <xTaskCreateStatic>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4a11      	ldr	r2, [pc, #68]	@ (8005ec8 <xTimerCreateTimerTask+0x90>)
 8005e84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e86:	4b10      	ldr	r3, [pc, #64]	@ (8005ec8 <xTimerCreateTimerTask+0x90>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	613b      	str	r3, [r7, #16]
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	e7fd      	b.n	8005eac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005eb0:	697b      	ldr	r3, [r7, #20]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200010d4 	.word	0x200010d4
 8005ec0:	08006e14 	.word	0x08006e14
 8005ec4:	08006005 	.word	0x08006005
 8005ec8:	200010d8 	.word	0x200010d8

08005ecc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	@ 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <xTimerGenericCommand+0x30>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	623b      	str	r3, [r7, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005efc:	4b19      	ldr	r3, [pc, #100]	@ (8005f64 <xTimerGenericCommand+0x98>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d02a      	beq.n	8005f5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	dc18      	bgt.n	8005f48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f16:	f7ff fdd1 	bl	8005abc <xTaskGetSchedulerState>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d109      	bne.n	8005f34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f20:	4b10      	ldr	r3, [pc, #64]	@ (8005f64 <xTimerGenericCommand+0x98>)
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	f107 0110 	add.w	r1, r7, #16
 8005f28:	2300      	movs	r3, #0
 8005f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f2c:	f7fe fb9c 	bl	8004668 <xQueueGenericSend>
 8005f30:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f32:	e012      	b.n	8005f5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f34:	4b0b      	ldr	r3, [pc, #44]	@ (8005f64 <xTimerGenericCommand+0x98>)
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	f107 0110 	add.w	r1, r7, #16
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f7fe fb92 	bl	8004668 <xQueueGenericSend>
 8005f44:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f46:	e008      	b.n	8005f5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f48:	4b06      	ldr	r3, [pc, #24]	@ (8005f64 <xTimerGenericCommand+0x98>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	f107 0110 	add.w	r1, r7, #16
 8005f50:	2300      	movs	r3, #0
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	f7fe fc8a 	bl	800486c <xQueueGenericSendFromISR>
 8005f58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3728      	adds	r7, #40	@ 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	200010d4 	.word	0x200010d4

08005f68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f72:	4b23      	ldr	r3, [pc, #140]	@ (8006000 <prvProcessExpiredTimer+0x98>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe fa3d 	bl	8004400 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d023      	beq.n	8005fdc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	699a      	ldr	r2, [r3, #24]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	18d1      	adds	r1, r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	6978      	ldr	r0, [r7, #20]
 8005fa2:	f000 f8d5 	bl	8006150 <prvInsertTimerInActiveList>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d020      	beq.n	8005fee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fac:	2300      	movs	r3, #0
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	6978      	ldr	r0, [r7, #20]
 8005fb8:	f7ff ff88 	bl	8005ecc <xTimerGenericCommand>
 8005fbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d114      	bne.n	8005fee <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60fb      	str	r3, [r7, #12]
}
 8005fd6:	bf00      	nop
 8005fd8:	bf00      	nop
 8005fda:	e7fd      	b.n	8005fd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	6978      	ldr	r0, [r7, #20]
 8005ff4:	4798      	blx	r3
}
 8005ff6:	bf00      	nop
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	200010cc 	.word	0x200010cc

08006004 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800600c:	f107 0308 	add.w	r3, r7, #8
 8006010:	4618      	mov	r0, r3
 8006012:	f000 f859 	bl	80060c8 <prvGetNextExpireTime>
 8006016:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4619      	mov	r1, r3
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f805 	bl	800602c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006022:	f000 f8d7 	bl	80061d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006026:	bf00      	nop
 8006028:	e7f0      	b.n	800600c <prvTimerTask+0x8>
	...

0800602c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006036:	f7ff f94b 	bl	80052d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f866 	bl	8006110 <prvSampleTimeNow>
 8006044:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d130      	bne.n	80060ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10a      	bne.n	8006068 <prvProcessTimerOrBlockTask+0x3c>
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	429a      	cmp	r2, r3
 8006058:	d806      	bhi.n	8006068 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800605a:	f7ff f947 	bl	80052ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff ff81 	bl	8005f68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006066:	e024      	b.n	80060b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d008      	beq.n	8006080 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800606e:	4b13      	ldr	r3, [pc, #76]	@ (80060bc <prvProcessTimerOrBlockTask+0x90>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <prvProcessTimerOrBlockTask+0x50>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <prvProcessTimerOrBlockTask+0x52>
 800607c:	2300      	movs	r3, #0
 800607e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006080:	4b0f      	ldr	r3, [pc, #60]	@ (80060c0 <prvProcessTimerOrBlockTask+0x94>)
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	4619      	mov	r1, r3
 800608e:	f7fe fea7 	bl	8004de0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006092:	f7ff f92b 	bl	80052ec <xTaskResumeAll>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800609c:	4b09      	ldr	r3, [pc, #36]	@ (80060c4 <prvProcessTimerOrBlockTask+0x98>)
 800609e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	f3bf 8f6f 	isb	sy
}
 80060ac:	e001      	b.n	80060b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060ae:	f7ff f91d 	bl	80052ec <xTaskResumeAll>
}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200010d0 	.word	0x200010d0
 80060c0:	200010d4 	.word	0x200010d4
 80060c4:	e000ed04 	.word	0xe000ed04

080060c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060d0:	4b0e      	ldr	r3, [pc, #56]	@ (800610c <prvGetNextExpireTime+0x44>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <prvGetNextExpireTime+0x16>
 80060da:	2201      	movs	r2, #1
 80060dc:	e000      	b.n	80060e0 <prvGetNextExpireTime+0x18>
 80060de:	2200      	movs	r2, #0
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d105      	bne.n	80060f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060ec:	4b07      	ldr	r3, [pc, #28]	@ (800610c <prvGetNextExpireTime+0x44>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	e001      	b.n	80060fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060fc:	68fb      	ldr	r3, [r7, #12]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	200010cc 	.word	0x200010cc

08006110 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006118:	f7ff f986 	bl	8005428 <xTaskGetTickCount>
 800611c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800611e:	4b0b      	ldr	r3, [pc, #44]	@ (800614c <prvSampleTimeNow+0x3c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	429a      	cmp	r2, r3
 8006126:	d205      	bcs.n	8006134 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006128:	f000 f93a 	bl	80063a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e002      	b.n	800613a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800613a:	4a04      	ldr	r2, [pc, #16]	@ (800614c <prvSampleTimeNow+0x3c>)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006140:	68fb      	ldr	r3, [r7, #12]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	200010dc 	.word	0x200010dc

08006150 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	429a      	cmp	r2, r3
 8006174:	d812      	bhi.n	800619c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	1ad2      	subs	r2, r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	429a      	cmp	r2, r3
 8006182:	d302      	bcc.n	800618a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006184:	2301      	movs	r3, #1
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	e01b      	b.n	80061c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800618a:	4b10      	ldr	r3, [pc, #64]	@ (80061cc <prvInsertTimerInActiveList+0x7c>)
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3304      	adds	r3, #4
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f7fe f8fa 	bl	800438e <vListInsert>
 800619a:	e012      	b.n	80061c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d206      	bcs.n	80061b2 <prvInsertTimerInActiveList+0x62>
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d302      	bcc.n	80061b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061ac:	2301      	movs	r3, #1
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	e007      	b.n	80061c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061b2:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <prvInsertTimerInActiveList+0x80>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3304      	adds	r3, #4
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f7fe f8e6 	bl	800438e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061c2:	697b      	ldr	r3, [r7, #20]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	200010d0 	.word	0x200010d0
 80061d0:	200010cc 	.word	0x200010cc

080061d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08e      	sub	sp, #56	@ 0x38
 80061d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061da:	e0ce      	b.n	800637a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	da19      	bge.n	8006216 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061e2:	1d3b      	adds	r3, r7, #4
 80061e4:	3304      	adds	r3, #4
 80061e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	61fb      	str	r3, [r7, #28]
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	e7fd      	b.n	8006202 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800620c:	6850      	ldr	r0, [r2, #4]
 800620e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006210:	6892      	ldr	r2, [r2, #8]
 8006212:	4611      	mov	r1, r2
 8006214:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f2c0 80ae 	blt.w	800637a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622c:	3304      	adds	r3, #4
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe f8e6 	bl	8004400 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006234:	463b      	mov	r3, r7
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff ff6a 	bl	8006110 <prvSampleTimeNow>
 800623c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b09      	cmp	r3, #9
 8006242:	f200 8097 	bhi.w	8006374 <prvProcessReceivedCommands+0x1a0>
 8006246:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <prvProcessReceivedCommands+0x78>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	08006275 	.word	0x08006275
 8006250:	08006275 	.word	0x08006275
 8006254:	08006275 	.word	0x08006275
 8006258:	080062eb 	.word	0x080062eb
 800625c:	080062ff 	.word	0x080062ff
 8006260:	0800634b 	.word	0x0800634b
 8006264:	08006275 	.word	0x08006275
 8006268:	08006275 	.word	0x08006275
 800626c:	080062eb 	.word	0x080062eb
 8006270:	080062ff 	.word	0x080062ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	b2da      	uxtb	r2, r3
 8006280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006282:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	18d1      	adds	r1, r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006294:	f7ff ff5c 	bl	8006150 <prvInsertTimerInActiveList>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d06c      	beq.n	8006378 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800629e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d061      	beq.n	8006378 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	441a      	add	r2, r3
 80062bc:	2300      	movs	r3, #0
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	2300      	movs	r3, #0
 80062c2:	2100      	movs	r1, #0
 80062c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062c6:	f7ff fe01 	bl	8005ecc <xTimerGenericCommand>
 80062ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d152      	bne.n	8006378 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	61bb      	str	r3, [r7, #24]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062f0:	f023 0301 	bic.w	r3, r3, #1
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80062fc:	e03d      	b.n	800637a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006304:	f043 0301 	orr.w	r3, r3, #1
 8006308:	b2da      	uxtb	r2, r3
 800630a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10b      	bne.n	8006336 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	617b      	str	r3, [r7, #20]
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	e7fd      	b.n	8006332 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	18d1      	adds	r1, r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006344:	f7ff ff04 	bl	8006150 <prvInsertTimerInActiveList>
					break;
 8006348:	e017      	b.n	800637a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800634a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800635a:	f000 fbe5 	bl	8006b28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800635e:	e00c      	b.n	800637a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006372:	e002      	b.n	800637a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006374:	bf00      	nop
 8006376:	e000      	b.n	800637a <prvProcessReceivedCommands+0x1a6>
					break;
 8006378:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800637a:	4b08      	ldr	r3, [pc, #32]	@ (800639c <prvProcessReceivedCommands+0x1c8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	1d39      	adds	r1, r7, #4
 8006380:	2200      	movs	r2, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fb10 	bl	80049a8 <xQueueReceive>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	f47f af26 	bne.w	80061dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	3730      	adds	r7, #48	@ 0x30
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	200010d4 	.word	0x200010d4

080063a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063a6:	e049      	b.n	800643c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006464 <prvSwitchTimerLists+0xc4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006464 <prvSwitchTimerLists+0xc4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3304      	adds	r3, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe f81d 	bl	8004400 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d02f      	beq.n	800643c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4413      	add	r3, r2
 80063e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d90e      	bls.n	800640c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006464 <prvSwitchTimerLists+0xc4>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3304      	adds	r3, #4
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f7fd ffc2 	bl	800438e <vListInsert>
 800640a:	e017      	b.n	800643c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800640c:	2300      	movs	r3, #0
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	2300      	movs	r3, #0
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	2100      	movs	r1, #0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fd58 	bl	8005ecc <xTimerGenericCommand>
 800641c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	603b      	str	r3, [r7, #0]
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800643c:	4b09      	ldr	r3, [pc, #36]	@ (8006464 <prvSwitchTimerLists+0xc4>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1b0      	bne.n	80063a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006446:	4b07      	ldr	r3, [pc, #28]	@ (8006464 <prvSwitchTimerLists+0xc4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800644c:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <prvSwitchTimerLists+0xc8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a04      	ldr	r2, [pc, #16]	@ (8006464 <prvSwitchTimerLists+0xc4>)
 8006452:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006454:	4a04      	ldr	r2, [pc, #16]	@ (8006468 <prvSwitchTimerLists+0xc8>)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	6013      	str	r3, [r2, #0]
}
 800645a:	bf00      	nop
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	200010cc 	.word	0x200010cc
 8006468:	200010d0 	.word	0x200010d0

0800646c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006472:	f000 f969 	bl	8006748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006476:	4b15      	ldr	r3, [pc, #84]	@ (80064cc <prvCheckForValidListAndQueue+0x60>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d120      	bne.n	80064c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800647e:	4814      	ldr	r0, [pc, #80]	@ (80064d0 <prvCheckForValidListAndQueue+0x64>)
 8006480:	f7fd ff34 	bl	80042ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006484:	4813      	ldr	r0, [pc, #76]	@ (80064d4 <prvCheckForValidListAndQueue+0x68>)
 8006486:	f7fd ff31 	bl	80042ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800648a:	4b13      	ldr	r3, [pc, #76]	@ (80064d8 <prvCheckForValidListAndQueue+0x6c>)
 800648c:	4a10      	ldr	r2, [pc, #64]	@ (80064d0 <prvCheckForValidListAndQueue+0x64>)
 800648e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006490:	4b12      	ldr	r3, [pc, #72]	@ (80064dc <prvCheckForValidListAndQueue+0x70>)
 8006492:	4a10      	ldr	r2, [pc, #64]	@ (80064d4 <prvCheckForValidListAndQueue+0x68>)
 8006494:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006496:	2300      	movs	r3, #0
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	4b11      	ldr	r3, [pc, #68]	@ (80064e0 <prvCheckForValidListAndQueue+0x74>)
 800649c:	4a11      	ldr	r2, [pc, #68]	@ (80064e4 <prvCheckForValidListAndQueue+0x78>)
 800649e:	2110      	movs	r1, #16
 80064a0:	200a      	movs	r0, #10
 80064a2:	f7fe f841 	bl	8004528 <xQueueGenericCreateStatic>
 80064a6:	4603      	mov	r3, r0
 80064a8:	4a08      	ldr	r2, [pc, #32]	@ (80064cc <prvCheckForValidListAndQueue+0x60>)
 80064aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064ac:	4b07      	ldr	r3, [pc, #28]	@ (80064cc <prvCheckForValidListAndQueue+0x60>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064b4:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <prvCheckForValidListAndQueue+0x60>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	490b      	ldr	r1, [pc, #44]	@ (80064e8 <prvCheckForValidListAndQueue+0x7c>)
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe fc66 	bl	8004d8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064c0:	f000 f974 	bl	80067ac <vPortExitCritical>
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	200010d4 	.word	0x200010d4
 80064d0:	200010a4 	.word	0x200010a4
 80064d4:	200010b8 	.word	0x200010b8
 80064d8:	200010cc 	.word	0x200010cc
 80064dc:	200010d0 	.word	0x200010d0
 80064e0:	20001180 	.word	0x20001180
 80064e4:	200010e0 	.word	0x200010e0
 80064e8:	08006e1c 	.word	0x08006e1c

080064ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3b04      	subs	r3, #4
 80064fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3b04      	subs	r3, #4
 800650a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f023 0201 	bic.w	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3b04      	subs	r3, #4
 800651a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800651c:	4a0c      	ldr	r2, [pc, #48]	@ (8006550 <pxPortInitialiseStack+0x64>)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3b14      	subs	r3, #20
 8006526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3b04      	subs	r3, #4
 8006532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f06f 0202 	mvn.w	r2, #2
 800653a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3b20      	subs	r3, #32
 8006540:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006542:	68fb      	ldr	r3, [r7, #12]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	08006555 	.word	0x08006555

08006554 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800655e:	4b13      	ldr	r3, [pc, #76]	@ (80065ac <prvTaskExitError+0x58>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006566:	d00b      	beq.n	8006580 <prvTaskExitError+0x2c>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	60fb      	str	r3, [r7, #12]
}
 800657a:	bf00      	nop
 800657c:	bf00      	nop
 800657e:	e7fd      	b.n	800657c <prvTaskExitError+0x28>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60bb      	str	r3, [r7, #8]
}
 8006592:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006594:	bf00      	nop
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0fc      	beq.n	8006596 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	2000000c 	.word	0x2000000c

080065b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065b0:	4b07      	ldr	r3, [pc, #28]	@ (80065d0 <pxCurrentTCBConst2>)
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	6808      	ldr	r0, [r1, #0]
 80065b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	f380 8809 	msr	PSP, r0
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f380 8811 	msr	BASEPRI, r0
 80065ca:	4770      	bx	lr
 80065cc:	f3af 8000 	nop.w

080065d0 <pxCurrentTCBConst2>:
 80065d0:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop

080065d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065d8:	4808      	ldr	r0, [pc, #32]	@ (80065fc <prvPortStartFirstTask+0x24>)
 80065da:	6800      	ldr	r0, [r0, #0]
 80065dc:	6800      	ldr	r0, [r0, #0]
 80065de:	f380 8808 	msr	MSP, r0
 80065e2:	f04f 0000 	mov.w	r0, #0
 80065e6:	f380 8814 	msr	CONTROL, r0
 80065ea:	b662      	cpsie	i
 80065ec:	b661      	cpsie	f
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	df00      	svc	0
 80065f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065fa:	bf00      	nop
 80065fc:	e000ed08 	.word	0xe000ed08

08006600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006606:	4b47      	ldr	r3, [pc, #284]	@ (8006724 <xPortStartScheduler+0x124>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a47      	ldr	r2, [pc, #284]	@ (8006728 <xPortStartScheduler+0x128>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d10b      	bne.n	8006628 <xPortStartScheduler+0x28>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	60fb      	str	r3, [r7, #12]
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	e7fd      	b.n	8006624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006628:	4b3e      	ldr	r3, [pc, #248]	@ (8006724 <xPortStartScheduler+0x124>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a3f      	ldr	r2, [pc, #252]	@ (800672c <xPortStartScheduler+0x12c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d10b      	bne.n	800664a <xPortStartScheduler+0x4a>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	613b      	str	r3, [r7, #16]
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	e7fd      	b.n	8006646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800664a:	4b39      	ldr	r3, [pc, #228]	@ (8006730 <xPortStartScheduler+0x130>)
 800664c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	22ff      	movs	r2, #255	@ 0xff
 800665a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800666c:	b2da      	uxtb	r2, r3
 800666e:	4b31      	ldr	r3, [pc, #196]	@ (8006734 <xPortStartScheduler+0x134>)
 8006670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006672:	4b31      	ldr	r3, [pc, #196]	@ (8006738 <xPortStartScheduler+0x138>)
 8006674:	2207      	movs	r2, #7
 8006676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006678:	e009      	b.n	800668e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800667a:	4b2f      	ldr	r3, [pc, #188]	@ (8006738 <xPortStartScheduler+0x138>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3b01      	subs	r3, #1
 8006680:	4a2d      	ldr	r2, [pc, #180]	@ (8006738 <xPortStartScheduler+0x138>)
 8006682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	b2db      	uxtb	r3, r3
 800668c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006696:	2b80      	cmp	r3, #128	@ 0x80
 8006698:	d0ef      	beq.n	800667a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800669a:	4b27      	ldr	r3, [pc, #156]	@ (8006738 <xPortStartScheduler+0x138>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f1c3 0307 	rsb	r3, r3, #7
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d00b      	beq.n	80066be <xPortStartScheduler+0xbe>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	60bb      	str	r3, [r7, #8]
}
 80066b8:	bf00      	nop
 80066ba:	bf00      	nop
 80066bc:	e7fd      	b.n	80066ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066be:	4b1e      	ldr	r3, [pc, #120]	@ (8006738 <xPortStartScheduler+0x138>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006738 <xPortStartScheduler+0x138>)
 80066c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006738 <xPortStartScheduler+0x138>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066d0:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <xPortStartScheduler+0x138>)
 80066d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066dc:	4b17      	ldr	r3, [pc, #92]	@ (800673c <xPortStartScheduler+0x13c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a16      	ldr	r2, [pc, #88]	@ (800673c <xPortStartScheduler+0x13c>)
 80066e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066e8:	4b14      	ldr	r3, [pc, #80]	@ (800673c <xPortStartScheduler+0x13c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a13      	ldr	r2, [pc, #76]	@ (800673c <xPortStartScheduler+0x13c>)
 80066ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066f4:	f000 f8da 	bl	80068ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066f8:	4b11      	ldr	r3, [pc, #68]	@ (8006740 <xPortStartScheduler+0x140>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066fe:	f000 f8f9 	bl	80068f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006702:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <xPortStartScheduler+0x144>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a0f      	ldr	r2, [pc, #60]	@ (8006744 <xPortStartScheduler+0x144>)
 8006708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800670c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800670e:	f7ff ff63 	bl	80065d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006712:	f7fe ff53 	bl	80055bc <vTaskSwitchContext>
	prvTaskExitError();
 8006716:	f7ff ff1d 	bl	8006554 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	e000ed00 	.word	0xe000ed00
 8006728:	410fc271 	.word	0x410fc271
 800672c:	410fc270 	.word	0x410fc270
 8006730:	e000e400 	.word	0xe000e400
 8006734:	200011d0 	.word	0x200011d0
 8006738:	200011d4 	.word	0x200011d4
 800673c:	e000ed20 	.word	0xe000ed20
 8006740:	2000000c 	.word	0x2000000c
 8006744:	e000ef34 	.word	0xe000ef34

08006748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	607b      	str	r3, [r7, #4]
}
 8006760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006762:	4b10      	ldr	r3, [pc, #64]	@ (80067a4 <vPortEnterCritical+0x5c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3301      	adds	r3, #1
 8006768:	4a0e      	ldr	r2, [pc, #56]	@ (80067a4 <vPortEnterCritical+0x5c>)
 800676a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800676c:	4b0d      	ldr	r3, [pc, #52]	@ (80067a4 <vPortEnterCritical+0x5c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d110      	bne.n	8006796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006774:	4b0c      	ldr	r3, [pc, #48]	@ (80067a8 <vPortEnterCritical+0x60>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <vPortEnterCritical+0x4e>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	603b      	str	r3, [r7, #0]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <vPortEnterCritical+0x4a>
	}
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	2000000c 	.word	0x2000000c
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067b2:	4b12      	ldr	r3, [pc, #72]	@ (80067fc <vPortExitCritical+0x50>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <vPortExitCritical+0x26>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	607b      	str	r3, [r7, #4]
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	e7fd      	b.n	80067ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067d2:	4b0a      	ldr	r3, [pc, #40]	@ (80067fc <vPortExitCritical+0x50>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	4a08      	ldr	r2, [pc, #32]	@ (80067fc <vPortExitCritical+0x50>)
 80067da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067dc:	4b07      	ldr	r3, [pc, #28]	@ (80067fc <vPortExitCritical+0x50>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d105      	bne.n	80067f0 <vPortExitCritical+0x44>
 80067e4:	2300      	movs	r3, #0
 80067e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f383 8811 	msr	BASEPRI, r3
}
 80067ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	2000000c 	.word	0x2000000c

08006800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006800:	f3ef 8009 	mrs	r0, PSP
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	4b15      	ldr	r3, [pc, #84]	@ (8006860 <pxCurrentTCBConst>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	f01e 0f10 	tst.w	lr, #16
 8006810:	bf08      	it	eq
 8006812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681a:	6010      	str	r0, [r2, #0]
 800681c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006824:	f380 8811 	msr	BASEPRI, r0
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f7fe fec4 	bl	80055bc <vTaskSwitchContext>
 8006834:	f04f 0000 	mov.w	r0, #0
 8006838:	f380 8811 	msr	BASEPRI, r0
 800683c:	bc09      	pop	{r0, r3}
 800683e:	6819      	ldr	r1, [r3, #0]
 8006840:	6808      	ldr	r0, [r1, #0]
 8006842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006846:	f01e 0f10 	tst.w	lr, #16
 800684a:	bf08      	it	eq
 800684c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006850:	f380 8809 	msr	PSP, r0
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst>:
 8006860:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	607b      	str	r3, [r7, #4]
}
 8006880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006882:	f7fe fde1 	bl	8005448 <xTaskIncrementTick>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800688c:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <xPortSysTickHandler+0x40>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	2300      	movs	r3, #0
 8006896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	f383 8811 	msr	BASEPRI, r3
}
 800689e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068b0:	4b0b      	ldr	r3, [pc, #44]	@ (80068e0 <vPortSetupTimerInterrupt+0x34>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <vPortSetupTimerInterrupt+0x38>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068bc:	4b0a      	ldr	r3, [pc, #40]	@ (80068e8 <vPortSetupTimerInterrupt+0x3c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a0a      	ldr	r2, [pc, #40]	@ (80068ec <vPortSetupTimerInterrupt+0x40>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	099b      	lsrs	r3, r3, #6
 80068c8:	4a09      	ldr	r2, [pc, #36]	@ (80068f0 <vPortSetupTimerInterrupt+0x44>)
 80068ca:	3b01      	subs	r3, #1
 80068cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ce:	4b04      	ldr	r3, [pc, #16]	@ (80068e0 <vPortSetupTimerInterrupt+0x34>)
 80068d0:	2207      	movs	r2, #7
 80068d2:	601a      	str	r2, [r3, #0]
}
 80068d4:	bf00      	nop
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	e000e010 	.word	0xe000e010
 80068e4:	e000e018 	.word	0xe000e018
 80068e8:	20000000 	.word	0x20000000
 80068ec:	10624dd3 	.word	0x10624dd3
 80068f0:	e000e014 	.word	0xe000e014

080068f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006904 <vPortEnableVFP+0x10>
 80068f8:	6801      	ldr	r1, [r0, #0]
 80068fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068fe:	6001      	str	r1, [r0, #0]
 8006900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006902:	bf00      	nop
 8006904:	e000ed88 	.word	0xe000ed88

08006908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800690e:	f3ef 8305 	mrs	r3, IPSR
 8006912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b0f      	cmp	r3, #15
 8006918:	d915      	bls.n	8006946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800691a:	4a18      	ldr	r2, [pc, #96]	@ (800697c <vPortValidateInterruptPriority+0x74>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006924:	4b16      	ldr	r3, [pc, #88]	@ (8006980 <vPortValidateInterruptPriority+0x78>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	7afa      	ldrb	r2, [r7, #11]
 800692a:	429a      	cmp	r2, r3
 800692c:	d20b      	bcs.n	8006946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	607b      	str	r3, [r7, #4]
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	e7fd      	b.n	8006942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006946:	4b0f      	ldr	r3, [pc, #60]	@ (8006984 <vPortValidateInterruptPriority+0x7c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800694e:	4b0e      	ldr	r3, [pc, #56]	@ (8006988 <vPortValidateInterruptPriority+0x80>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d90b      	bls.n	800696e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	603b      	str	r3, [r7, #0]
}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	e7fd      	b.n	800696a <vPortValidateInterruptPriority+0x62>
	}
 800696e:	bf00      	nop
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	e000e3f0 	.word	0xe000e3f0
 8006980:	200011d0 	.word	0x200011d0
 8006984:	e000ed0c 	.word	0xe000ed0c
 8006988:	200011d4 	.word	0x200011d4

0800698c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	@ 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006998:	f7fe fc9a 	bl	80052d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800699c:	4b5c      	ldr	r3, [pc, #368]	@ (8006b10 <pvPortMalloc+0x184>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069a4:	f000 f924 	bl	8006bf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006b14 <pvPortMalloc+0x188>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 8095 	bne.w	8006ae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01e      	beq.n	80069fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80069bc:	2208      	movs	r2, #8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4413      	add	r3, r2
 80069c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d015      	beq.n	80069fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f023 0307 	bic.w	r3, r3, #7
 80069d4:	3308      	adds	r3, #8
 80069d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <pvPortMalloc+0x6e>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	617b      	str	r3, [r7, #20]
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	e7fd      	b.n	80069f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d06f      	beq.n	8006ae0 <pvPortMalloc+0x154>
 8006a00:	4b45      	ldr	r3, [pc, #276]	@ (8006b18 <pvPortMalloc+0x18c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d86a      	bhi.n	8006ae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a0a:	4b44      	ldr	r3, [pc, #272]	@ (8006b1c <pvPortMalloc+0x190>)
 8006a0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a0e:	4b43      	ldr	r3, [pc, #268]	@ (8006b1c <pvPortMalloc+0x190>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a14:	e004      	b.n	8006a20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d903      	bls.n	8006a32 <pvPortMalloc+0xa6>
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1f1      	bne.n	8006a16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a32:	4b37      	ldr	r3, [pc, #220]	@ (8006b10 <pvPortMalloc+0x184>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d051      	beq.n	8006ae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2208      	movs	r2, #8
 8006a42:	4413      	add	r3, r2
 8006a44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	1ad2      	subs	r2, r2, r3
 8006a56:	2308      	movs	r3, #8
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d920      	bls.n	8006aa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4413      	add	r3, r2
 8006a64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <pvPortMalloc+0xfc>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	613b      	str	r3, [r7, #16]
}
 8006a82:	bf00      	nop
 8006a84:	bf00      	nop
 8006a86:	e7fd      	b.n	8006a84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a9a:	69b8      	ldr	r0, [r7, #24]
 8006a9c:	f000 f90a 	bl	8006cb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b18 <pvPortMalloc+0x18c>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8006b18 <pvPortMalloc+0x18c>)
 8006aac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aae:	4b1a      	ldr	r3, [pc, #104]	@ (8006b18 <pvPortMalloc+0x18c>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b20 <pvPortMalloc+0x194>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d203      	bcs.n	8006ac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006aba:	4b17      	ldr	r3, [pc, #92]	@ (8006b18 <pvPortMalloc+0x18c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a18      	ldr	r2, [pc, #96]	@ (8006b20 <pvPortMalloc+0x194>)
 8006ac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	4b13      	ldr	r3, [pc, #76]	@ (8006b14 <pvPortMalloc+0x188>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ad6:	4b13      	ldr	r3, [pc, #76]	@ (8006b24 <pvPortMalloc+0x198>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3301      	adds	r3, #1
 8006adc:	4a11      	ldr	r2, [pc, #68]	@ (8006b24 <pvPortMalloc+0x198>)
 8006ade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ae0:	f7fe fc04 	bl	80052ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <pvPortMalloc+0x17a>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	60fb      	str	r3, [r7, #12]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <pvPortMalloc+0x176>
	return pvReturn;
 8006b06:	69fb      	ldr	r3, [r7, #28]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3728      	adds	r7, #40	@ 0x28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	20001de0 	.word	0x20001de0
 8006b14:	20001df4 	.word	0x20001df4
 8006b18:	20001de4 	.word	0x20001de4
 8006b1c:	20001dd8 	.word	0x20001dd8
 8006b20:	20001de8 	.word	0x20001de8
 8006b24:	20001dec 	.word	0x20001dec

08006b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d04f      	beq.n	8006bda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	425b      	negs	r3, r3
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4413      	add	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	4b25      	ldr	r3, [pc, #148]	@ (8006be4 <vPortFree+0xbc>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10b      	bne.n	8006b6e <vPortFree+0x46>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	60fb      	str	r3, [r7, #12]
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	e7fd      	b.n	8006b6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <vPortFree+0x66>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	60bb      	str	r3, [r7, #8]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	4b14      	ldr	r3, [pc, #80]	@ (8006be4 <vPortFree+0xbc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01e      	beq.n	8006bda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d11a      	bne.n	8006bda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8006be4 <vPortFree+0xbc>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	43db      	mvns	r3, r3
 8006bae:	401a      	ands	r2, r3
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bb4:	f7fe fb8c 	bl	80052d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006be8 <vPortFree+0xc0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	4a09      	ldr	r2, [pc, #36]	@ (8006be8 <vPortFree+0xc0>)
 8006bc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bc6:	6938      	ldr	r0, [r7, #16]
 8006bc8:	f000 f874 	bl	8006cb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bcc:	4b07      	ldr	r3, [pc, #28]	@ (8006bec <vPortFree+0xc4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	4a06      	ldr	r2, [pc, #24]	@ (8006bec <vPortFree+0xc4>)
 8006bd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bd6:	f7fe fb89 	bl	80052ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bda:	bf00      	nop
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20001df4 	.word	0x20001df4
 8006be8:	20001de4 	.word	0x20001de4
 8006bec:	20001df0 	.word	0x20001df0

08006bf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bf6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006bfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bfc:	4b27      	ldr	r3, [pc, #156]	@ (8006c9c <prvHeapInit+0xac>)
 8006bfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00c      	beq.n	8006c24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3307      	adds	r3, #7
 8006c0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0307 	bic.w	r3, r3, #7
 8006c16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c9c <prvHeapInit+0xac>)
 8006c20:	4413      	add	r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c28:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca0 <prvHeapInit+0xb0>)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca0 <prvHeapInit+0xb0>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	4413      	add	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0307 	bic.w	r3, r3, #7
 8006c4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a15      	ldr	r2, [pc, #84]	@ (8006ca4 <prvHeapInit+0xb4>)
 8006c50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c52:	4b14      	ldr	r3, [pc, #80]	@ (8006ca4 <prvHeapInit+0xb4>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2200      	movs	r2, #0
 8006c58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c5a:	4b12      	ldr	r3, [pc, #72]	@ (8006ca4 <prvHeapInit+0xb4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	1ad2      	subs	r2, r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca4 <prvHeapInit+0xb4>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ca8 <prvHeapInit+0xb8>)
 8006c7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	4a09      	ldr	r2, [pc, #36]	@ (8006cac <prvHeapInit+0xbc>)
 8006c86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c88:	4b09      	ldr	r3, [pc, #36]	@ (8006cb0 <prvHeapInit+0xc0>)
 8006c8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c8e:	601a      	str	r2, [r3, #0]
}
 8006c90:	bf00      	nop
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	200011d8 	.word	0x200011d8
 8006ca0:	20001dd8 	.word	0x20001dd8
 8006ca4:	20001de0 	.word	0x20001de0
 8006ca8:	20001de8 	.word	0x20001de8
 8006cac:	20001de4 	.word	0x20001de4
 8006cb0:	20001df4 	.word	0x20001df4

08006cb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cbc:	4b28      	ldr	r3, [pc, #160]	@ (8006d60 <prvInsertBlockIntoFreeList+0xac>)
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	e002      	b.n	8006cc8 <prvInsertBlockIntoFreeList+0x14>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d8f7      	bhi.n	8006cc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	4413      	add	r3, r2
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d108      	bne.n	8006cf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	441a      	add	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d118      	bne.n	8006d3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b15      	ldr	r3, [pc, #84]	@ (8006d64 <prvInsertBlockIntoFreeList+0xb0>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d00d      	beq.n	8006d32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	441a      	add	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	e008      	b.n	8006d44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d32:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <prvInsertBlockIntoFreeList+0xb0>)
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e003      	b.n	8006d44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d002      	beq.n	8006d52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	20001dd8 	.word	0x20001dd8
 8006d64:	20001de0 	.word	0x20001de0

08006d68 <memset>:
 8006d68:	4402      	add	r2, r0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d100      	bne.n	8006d72 <memset+0xa>
 8006d70:	4770      	bx	lr
 8006d72:	f803 1b01 	strb.w	r1, [r3], #1
 8006d76:	e7f9      	b.n	8006d6c <memset+0x4>

08006d78 <__libc_init_array>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8006db0 <__libc_init_array+0x38>)
 8006d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8006db4 <__libc_init_array+0x3c>)
 8006d7e:	1b64      	subs	r4, r4, r5
 8006d80:	10a4      	asrs	r4, r4, #2
 8006d82:	2600      	movs	r6, #0
 8006d84:	42a6      	cmp	r6, r4
 8006d86:	d109      	bne.n	8006d9c <__libc_init_array+0x24>
 8006d88:	4d0b      	ldr	r5, [pc, #44]	@ (8006db8 <__libc_init_array+0x40>)
 8006d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8006dbc <__libc_init_array+0x44>)
 8006d8c:	f000 f826 	bl	8006ddc <_init>
 8006d90:	1b64      	subs	r4, r4, r5
 8006d92:	10a4      	asrs	r4, r4, #2
 8006d94:	2600      	movs	r6, #0
 8006d96:	42a6      	cmp	r6, r4
 8006d98:	d105      	bne.n	8006da6 <__libc_init_array+0x2e>
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da0:	4798      	blx	r3
 8006da2:	3601      	adds	r6, #1
 8006da4:	e7ee      	b.n	8006d84 <__libc_init_array+0xc>
 8006da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006daa:	4798      	blx	r3
 8006dac:	3601      	adds	r6, #1
 8006dae:	e7f2      	b.n	8006d96 <__libc_init_array+0x1e>
 8006db0:	08006e7c 	.word	0x08006e7c
 8006db4:	08006e7c 	.word	0x08006e7c
 8006db8:	08006e7c 	.word	0x08006e7c
 8006dbc:	08006e80 	.word	0x08006e80

08006dc0 <memcpy>:
 8006dc0:	440a      	add	r2, r1
 8006dc2:	4291      	cmp	r1, r2
 8006dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc8:	d100      	bne.n	8006dcc <memcpy+0xc>
 8006dca:	4770      	bx	lr
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dd6:	4291      	cmp	r1, r2
 8006dd8:	d1f9      	bne.n	8006dce <memcpy+0xe>
 8006dda:	bd10      	pop	{r4, pc}

08006ddc <_init>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr

08006de8 <_fini>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr
