
TMS_SLAVE_AMP_226.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d6c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08008f50  08008f50  00009f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009028  08009028  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009028  08009028  0000b060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009028  08009028  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009028  08009028  0000a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800902c  0800902c  0000a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009030  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fd0  20000060  08009090  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002030  08009090  0000c030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016441  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003596  00000000  00000000  000214d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00024a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f3b  00000000  00000000  00025e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022199  00000000  00000000  00026dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015952  00000000  00000000  00048f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd013  00000000  00000000  0005e8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b8c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a04  00000000  00000000  0013b904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00141308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008f34 	.word	0x08008f34

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08008f34 	.word	0x08008f34

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	@ 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <convertBitsToVoltage>:
#include "stdio.h"

float readingsHistory [numberOfThermistors][windowSize], filteredReadings[numberOfThermistors];
int circularIndex [numberOfThermistors] = {0}, validReadingsCount[numberOfThermistors] = {0};

float convertBitsToVoltage(uint16_t rawAdcVal){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
	return (rawAdcVal*vcc)/adcResolution;
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc8d 	bl	80004c4 <__aeabi_i2d>
 8000baa:	a30f      	add	r3, pc, #60	@ (adr r3, 8000be8 <convertBitsToVoltage+0x50>)
 8000bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb0:	f7ff fcf2 	bl	8000598 <__aeabi_dmul>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	4610      	mov	r0, r2
 8000bba:	4619      	mov	r1, r3
 8000bbc:	a30c      	add	r3, pc, #48	@ (adr r3, 8000bf0 <convertBitsToVoltage+0x58>)
 8000bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc2:	f7ff fe13 	bl	80007ec <__aeabi_ddiv>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	460b      	mov	r3, r1
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f7ff ff93 	bl	8000af8 <__aeabi_d2f>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	ee07 3a90 	vmov	s15, r3
}
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	f3af 8000 	nop.w
 8000be8:	66666666 	.word	0x66666666
 8000bec:	400a6666 	.word	0x400a6666
 8000bf0:	00000000 	.word	0x00000000
 8000bf4:	40affe00 	.word	0x40affe00

08000bf8 <convertVoltageToTemperature>:

float convertVoltageToTemperature(float voltage){
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	ed87 0a01 	vstr	s0, [r7, #4]
	return C0 + C1 * voltage + C2 * pow(voltage, 2) + C3 * pow(voltage, 3) + C4 *pow(voltage, 4);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fc70 	bl	80004e8 <__aeabi_f2d>
 8000c08:	a33d      	add	r3, pc, #244	@ (adr r3, 8000d00 <convertVoltageToTemperature+0x108>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f7ff fcc3 	bl	8000598 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4610      	mov	r0, r2
 8000c18:	4619      	mov	r1, r3
 8000c1a:	a33b      	add	r3, pc, #236	@ (adr r3, 8000d08 <convertVoltageToTemperature+0x110>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	f7ff fb04 	bl	800022c <__adddf3>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4614      	mov	r4, r2
 8000c2a:	461d      	mov	r5, r3
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fc5b 	bl	80004e8 <__aeabi_f2d>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 8000ce8 <convertVoltageToTemperature+0xf0>
 8000c3a:	ec43 2b10 	vmov	d0, r2, r3
 8000c3e:	f007 fa1b 	bl	8008078 <pow>
 8000c42:	ec51 0b10 	vmov	r0, r1, d0
 8000c46:	a332      	add	r3, pc, #200	@ (adr r3, 8000d10 <convertVoltageToTemperature+0x118>)
 8000c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4c:	f7ff fca4 	bl	8000598 <__aeabi_dmul>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4620      	mov	r0, r4
 8000c56:	4629      	mov	r1, r5
 8000c58:	f7ff fae8 	bl	800022c <__adddf3>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4614      	mov	r4, r2
 8000c62:	461d      	mov	r5, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff fc3f 	bl	80004e8 <__aeabi_f2d>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8000cf0 <convertVoltageToTemperature+0xf8>
 8000c72:	ec43 2b10 	vmov	d0, r2, r3
 8000c76:	f007 f9ff 	bl	8008078 <pow>
 8000c7a:	ec51 0b10 	vmov	r0, r1, d0
 8000c7e:	a326      	add	r3, pc, #152	@ (adr r3, 8000d18 <convertVoltageToTemperature+0x120>)
 8000c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c84:	f7ff fc88 	bl	8000598 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	f7ff facc 	bl	800022c <__adddf3>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4614      	mov	r4, r2
 8000c9a:	461d      	mov	r5, r3
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fc23 	bl	80004e8 <__aeabi_f2d>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8000cf8 <convertVoltageToTemperature+0x100>
 8000caa:	ec43 2b10 	vmov	d0, r2, r3
 8000cae:	f007 f9e3 	bl	8008078 <pow>
 8000cb2:	ec51 0b10 	vmov	r0, r1, d0
 8000cb6:	a31a      	add	r3, pc, #104	@ (adr r3, 8000d20 <convertVoltageToTemperature+0x128>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fc6c 	bl	8000598 <__aeabi_dmul>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	4629      	mov	r1, r5
 8000cc8:	f7ff fab0 	bl	800022c <__adddf3>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f7ff ff10 	bl	8000af8 <__aeabi_d2f>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	ee07 3a90 	vmov	s15, r3
}
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	40000000 	.word	0x40000000
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	40080000 	.word	0x40080000
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	40100000 	.word	0x40100000
 8000d00:	66666666 	.word	0x66666666
 8000d04:	c0638e66 	.word	0xc0638e66
 8000d08:	00000000 	.word	0x00000000
 8000d0c:	4060c800 	.word	0x4060c800
 8000d10:	c28f5c29 	.word	0xc28f5c29
 8000d14:	405a68f5 	.word	0x405a68f5
 8000d18:	c28f5c29 	.word	0xc28f5c29
 8000d1c:	c04468f5 	.word	0xc04468f5
 8000d20:	51eb851f 	.word	0x51eb851f
 8000d24:	40181eb8 	.word	0x40181eb8

08000d28 <initializeHistory>:

void initializeHistory(){
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
	for (int i = 0; i < numberOfThermistors; i++){
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	e024      	b.n	8000d7e <initializeHistory+0x56>
		for(int j = 0; j < windowSize; j++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	e00f      	b.n	8000d5a <initializeHistory+0x32>
			readingsHistory[i][j] = 0;
 8000d3a:	4916      	ldr	r1, [pc, #88]	@ (8000d94 <initializeHistory+0x6c>)
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < windowSize; j++){
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b09      	cmp	r3, #9
 8000d5e:	ddec      	ble.n	8000d3a <initializeHistory+0x12>
		}
		filteredReadings[i] = 0;
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <initializeHistory+0x70>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
		validReadingsCount[i] = 0;
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d9c <initializeHistory+0x74>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2100      	movs	r1, #0
 8000d74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < numberOfThermistors; i++){
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	ddd7      	ble.n	8000d34 <initializeHistory+0xc>
	}
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000007c 	.word	0x2000007c
 8000d98:	200002fc 	.word	0x200002fc
 8000d9c:	2000037c 	.word	0x2000037c

08000da0 <applyMovingAverageFilter>:

void applyMovingAverageFilter(float rawReadings[]){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	float currentReading;
	float sumOfReadings;
	float divisor;

	for(int i = 0; i < numberOfThermistors; i++){
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	e078      	b.n	8000ea0 <applyMovingAverageFilter+0x100>
		currentReading = convertVoltageToTemperature(rawReadings[i]);
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	edd3 7a00 	vldr	s15, [r3]
 8000dba:	eeb0 0a67 	vmov.f32	s0, s15
 8000dbe:	f7ff ff1b 	bl	8000bf8 <convertVoltageToTemperature>
 8000dc2:	ed87 0a04 	vstr	s0, [r7, #16]
		readingsHistory[i][circularIndex[i]] = currentReading;
 8000dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8000eb0 <applyMovingAverageFilter+0x110>)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000dce:	4839      	ldr	r0, [pc, #228]	@ (8000eb4 <applyMovingAverageFilter+0x114>)
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	440b      	add	r3, r1
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4403      	add	r3, r0
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	601a      	str	r2, [r3, #0]
		circularIndex[i] = (circularIndex[i] + 1) % windowSize;
 8000de4:	4a32      	ldr	r2, [pc, #200]	@ (8000eb0 <applyMovingAverageFilter+0x110>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dec:	1c59      	adds	r1, r3, #1
 8000dee:	4b32      	ldr	r3, [pc, #200]	@ (8000eb8 <applyMovingAverageFilter+0x118>)
 8000df0:	fb83 2301 	smull	r2, r3, r3, r1
 8000df4:	109a      	asrs	r2, r3, #2
 8000df6:	17cb      	asrs	r3, r1, #31
 8000df8:	1ad2      	subs	r2, r2, r3
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	1aca      	subs	r2, r1, r3
 8000e04:	492a      	ldr	r1, [pc, #168]	@ (8000eb0 <applyMovingAverageFilter+0x110>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (validReadingsCount[i] < windowSize){
 8000e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000ebc <applyMovingAverageFilter+0x11c>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	2b09      	cmp	r3, #9
 8000e16:	dc08      	bgt.n	8000e2a <applyMovingAverageFilter+0x8a>
			validReadingsCount[i]++;
 8000e18:	4a28      	ldr	r2, [pc, #160]	@ (8000ebc <applyMovingAverageFilter+0x11c>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	4926      	ldr	r1, [pc, #152]	@ (8000ebc <applyMovingAverageFilter+0x11c>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		sumOfReadings = 0;
 8000e2a:	f04f 0300 	mov.w	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]

		for(int j = 0; j < validReadingsCount[i]; j++){
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e014      	b.n	8000e60 <applyMovingAverageFilter+0xc0>
			sumOfReadings += readingsHistory[i][j];
 8000e36:	491f      	ldr	r1, [pc, #124]	@ (8000eb4 <applyMovingAverageFilter+0x114>)
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4413      	add	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e56:	edc7 7a07 	vstr	s15, [r7, #28]
		for(int j = 0; j < validReadingsCount[i]; j++){
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <applyMovingAverageFilter+0x11c>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbe3      	blt.n	8000e36 <applyMovingAverageFilter+0x96>
		}

		divisor = validReadingsCount[i];
 8000e6e:	4a13      	ldr	r2, [pc, #76]	@ (8000ebc <applyMovingAverageFilter+0x11c>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	ee07 3a90 	vmov	s15, r3
 8000e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e7e:	edc7 7a03 	vstr	s15, [r7, #12]

		filteredReadings[i] = sumOfReadings / divisor;
 8000e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8000e86:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec0 <applyMovingAverageFilter+0x120>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < numberOfThermistors; i++){
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	dd83      	ble.n	8000dae <applyMovingAverageFilter+0xe>
	}
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000033c 	.word	0x2000033c
 8000eb4:	2000007c 	.word	0x2000007c
 8000eb8:	66666667 	.word	0x66666667
 8000ebc:	2000037c 	.word	0x2000037c
 8000ec0:	200002fc 	.word	0x200002fc

08000ec4 <sendTemperatureToMaster0>:

extern FDCAN_HandleTypeDef hfdcan1;
uint8_t FDCAN1TxData[8];
FDCAN_TxHeaderTypeDef FDCAN1TxHeader;

void sendTemperatureToMaster0(float buffer[]){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <sendTemperatureToMaster0+0x5c>)
 8000ece:	2208      	movs	r2, #8
 8000ed0:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst0;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <sendTemperatureToMaster0+0x5c>)
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <sendTemperatureToMaster0+0x60>)
 8000ee0:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <sendTemperatureToMaster0+0x60>)
 8000eec:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000eee:	e009      	b.n	8000f04 <sendTemperatureToMaster0+0x40>
		int count = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
		count++;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b13      	cmp	r3, #19
 8000efe:	dd01      	ble.n	8000f04 <sendTemperatureToMaster0+0x40>
			Error_Handler();
 8000f00:	f000 fcf2 	bl	80018e8 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000f04:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <sendTemperatureToMaster0+0x60>)
 8000f06:	4906      	ldr	r1, [pc, #24]	@ (8000f20 <sendTemperatureToMaster0+0x5c>)
 8000f08:	4807      	ldr	r0, [pc, #28]	@ (8000f28 <sendTemperatureToMaster0+0x64>)
 8000f0a:	f002 fe35 	bl	8003b78 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1ed      	bne.n	8000ef0 <sendTemperatureToMaster0+0x2c>
		}
	}
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200003c4 	.word	0x200003c4
 8000f24:	200003bc 	.word	0x200003bc
 8000f28:	200004b4 	.word	0x200004b4

08000f2c <sendTemperatureToMaster1>:

void sendTemperatureToMaster1(float buffer[]){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <sendTemperatureToMaster1+0x5c>)
 8000f36:	2208      	movs	r2, #8
 8000f38:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst1;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <sendTemperatureToMaster1+0x5c>)
 8000f3c:	2211      	movs	r2, #17
 8000f3e:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <sendTemperatureToMaster1+0x60>)
 8000f48:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <sendTemperatureToMaster1+0x60>)
 8000f54:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000f56:	e009      	b.n	8000f6c <sendTemperatureToMaster1+0x40>
		int count = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
		count++;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b13      	cmp	r3, #19
 8000f66:	dd01      	ble.n	8000f6c <sendTemperatureToMaster1+0x40>
			Error_Handler();
 8000f68:	f000 fcbe 	bl	80018e8 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000f6c:	4a07      	ldr	r2, [pc, #28]	@ (8000f8c <sendTemperatureToMaster1+0x60>)
 8000f6e:	4906      	ldr	r1, [pc, #24]	@ (8000f88 <sendTemperatureToMaster1+0x5c>)
 8000f70:	4807      	ldr	r0, [pc, #28]	@ (8000f90 <sendTemperatureToMaster1+0x64>)
 8000f72:	f002 fe01 	bl	8003b78 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1ed      	bne.n	8000f58 <sendTemperatureToMaster1+0x2c>
		}
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200003c4 	.word	0x200003c4
 8000f8c:	200003bc 	.word	0x200003bc
 8000f90:	200004b4 	.word	0x200004b4

08000f94 <sendTemperatureToMaster2>:

void sendTemperatureToMaster2(float buffer[]){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <sendTemperatureToMaster2+0x5c>)
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst2;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <sendTemperatureToMaster2+0x5c>)
 8000fa4:	2212      	movs	r2, #18
 8000fa6:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <sendTemperatureToMaster2+0x60>)
 8000fb0:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <sendTemperatureToMaster2+0x60>)
 8000fbc:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000fbe:	e009      	b.n	8000fd4 <sendTemperatureToMaster2+0x40>
		int count = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
		count++;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b13      	cmp	r3, #19
 8000fce:	dd01      	ble.n	8000fd4 <sendTemperatureToMaster2+0x40>
			Error_Handler();
 8000fd0:	f000 fc8a 	bl	80018e8 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000fd4:	4a07      	ldr	r2, [pc, #28]	@ (8000ff4 <sendTemperatureToMaster2+0x60>)
 8000fd6:	4906      	ldr	r1, [pc, #24]	@ (8000ff0 <sendTemperatureToMaster2+0x5c>)
 8000fd8:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <sendTemperatureToMaster2+0x64>)
 8000fda:	f002 fdcd 	bl	8003b78 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1ed      	bne.n	8000fc0 <sendTemperatureToMaster2+0x2c>
		}
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200003c4 	.word	0x200003c4
 8000ff4:	200003bc 	.word	0x200003bc
 8000ff8:	200004b4 	.word	0x200004b4

08000ffc <sendTemperatureToMaster3>:

void sendTemperatureToMaster3(float buffer[]){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <sendTemperatureToMaster3+0x5c>)
 8001006:	2208      	movs	r2, #8
 8001008:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst3;
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <sendTemperatureToMaster3+0x5c>)
 800100c:	2213      	movs	r2, #19
 800100e:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <sendTemperatureToMaster3+0x60>)
 8001018:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3304      	adds	r3, #4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <sendTemperatureToMaster3+0x60>)
 8001024:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8001026:	e009      	b.n	800103c <sendTemperatureToMaster3+0x40>
		int count = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
		count++;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b13      	cmp	r3, #19
 8001036:	dd01      	ble.n	800103c <sendTemperatureToMaster3+0x40>
			Error_Handler();
 8001038:	f000 fc56 	bl	80018e8 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <sendTemperatureToMaster3+0x60>)
 800103e:	4906      	ldr	r1, [pc, #24]	@ (8001058 <sendTemperatureToMaster3+0x5c>)
 8001040:	4807      	ldr	r0, [pc, #28]	@ (8001060 <sendTemperatureToMaster3+0x64>)
 8001042:	f002 fd99 	bl	8003b78 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1ed      	bne.n	8001028 <sendTemperatureToMaster3+0x2c>
		}
	}
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200003c4 	.word	0x200003c4
 800105c:	200003bc 	.word	0x200003bc
 8001060:	200004b4 	.word	0x200004b4

08001064 <sendTemperatureToMaster4>:

void sendTemperatureToMaster4(float buffer[]){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <sendTemperatureToMaster4+0x5c>)
 800106e:	2208      	movs	r2, #8
 8001070:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst4;
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <sendTemperatureToMaster4+0x5c>)
 8001074:	2214      	movs	r2, #20
 8001076:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <sendTemperatureToMaster4+0x60>)
 8001080:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <sendTemperatureToMaster4+0x60>)
 800108c:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 800108e:	e009      	b.n	80010a4 <sendTemperatureToMaster4+0x40>
		int count = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
		count++;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3301      	adds	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b13      	cmp	r3, #19
 800109e:	dd01      	ble.n	80010a4 <sendTemperatureToMaster4+0x40>
			Error_Handler();
 80010a0:	f000 fc22 	bl	80018e8 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80010a4:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <sendTemperatureToMaster4+0x60>)
 80010a6:	4906      	ldr	r1, [pc, #24]	@ (80010c0 <sendTemperatureToMaster4+0x5c>)
 80010a8:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <sendTemperatureToMaster4+0x64>)
 80010aa:	f002 fd65 	bl	8003b78 <HAL_FDCAN_AddMessageToTxFifoQ>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1ed      	bne.n	8001090 <sendTemperatureToMaster4+0x2c>
		}
	}
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200003c4 	.word	0x200003c4
 80010c4:	200003bc 	.word	0x200003bc
 80010c8:	200004b4 	.word	0x200004b4

080010cc <sendTemperatureToMaster5>:

void sendTemperatureToMaster5(float buffer[]){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <sendTemperatureToMaster5+0x5c>)
 80010d6:	2208      	movs	r2, #8
 80010d8:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst5;
 80010da:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <sendTemperatureToMaster5+0x5c>)
 80010dc:	2215      	movs	r2, #21
 80010de:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <sendTemperatureToMaster5+0x60>)
 80010e8:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <sendTemperatureToMaster5+0x60>)
 80010f4:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80010f6:	e009      	b.n	800110c <sendTemperatureToMaster5+0x40>
		int count = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
		count++;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b13      	cmp	r3, #19
 8001106:	dd01      	ble.n	800110c <sendTemperatureToMaster5+0x40>
			Error_Handler();
 8001108:	f000 fbee 	bl	80018e8 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 800110c:	4a07      	ldr	r2, [pc, #28]	@ (800112c <sendTemperatureToMaster5+0x60>)
 800110e:	4906      	ldr	r1, [pc, #24]	@ (8001128 <sendTemperatureToMaster5+0x5c>)
 8001110:	4807      	ldr	r0, [pc, #28]	@ (8001130 <sendTemperatureToMaster5+0x64>)
 8001112:	f002 fd31 	bl	8003b78 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1ed      	bne.n	80010f8 <sendTemperatureToMaster5+0x2c>
		}
	}
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200003c4 	.word	0x200003c4
 800112c:	200003bc 	.word	0x200003bc
 8001130:	200004b4 	.word	0x200004b4

08001134 <sendTemperatureToMaster6>:

void sendTemperatureToMaster6(float buffer[]){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <sendTemperatureToMaster6+0x5c>)
 800113e:	2208      	movs	r2, #8
 8001140:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst6;
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <sendTemperatureToMaster6+0x5c>)
 8001144:	2216      	movs	r2, #22
 8001146:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <sendTemperatureToMaster6+0x60>)
 8001150:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3304      	adds	r3, #4
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <sendTemperatureToMaster6+0x60>)
 800115c:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 800115e:	e009      	b.n	8001174 <sendTemperatureToMaster6+0x40>
		int count = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
		count++;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3301      	adds	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b13      	cmp	r3, #19
 800116e:	dd01      	ble.n	8001174 <sendTemperatureToMaster6+0x40>
			Error_Handler();
 8001170:	f000 fbba 	bl	80018e8 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <sendTemperatureToMaster6+0x60>)
 8001176:	4906      	ldr	r1, [pc, #24]	@ (8001190 <sendTemperatureToMaster6+0x5c>)
 8001178:	4807      	ldr	r0, [pc, #28]	@ (8001198 <sendTemperatureToMaster6+0x64>)
 800117a:	f002 fcfd 	bl	8003b78 <HAL_FDCAN_AddMessageToTxFifoQ>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ed      	bne.n	8001160 <sendTemperatureToMaster6+0x2c>
		}
	}
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200003c4 	.word	0x200003c4
 8001194:	200003bc 	.word	0x200003bc
 8001198:	200004b4 	.word	0x200004b4

0800119c <sendTemperatureToMaster7>:

void sendTemperatureToMaster7(float buffer[]){
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <sendTemperatureToMaster7+0x5c>)
 80011a6:	2208      	movs	r2, #8
 80011a8:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst7;
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <sendTemperatureToMaster7+0x5c>)
 80011ac:	2217      	movs	r2, #23
 80011ae:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <sendTemperatureToMaster7+0x60>)
 80011b8:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3304      	adds	r3, #4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <sendTemperatureToMaster7+0x60>)
 80011c4:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80011c6:	e009      	b.n	80011dc <sendTemperatureToMaster7+0x40>
		int count = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
		count++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2b13      	cmp	r3, #19
 80011d6:	dd01      	ble.n	80011dc <sendTemperatureToMaster7+0x40>
			Error_Handler();
 80011d8:	f000 fb86 	bl	80018e8 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <sendTemperatureToMaster7+0x60>)
 80011de:	4906      	ldr	r1, [pc, #24]	@ (80011f8 <sendTemperatureToMaster7+0x5c>)
 80011e0:	4807      	ldr	r0, [pc, #28]	@ (8001200 <sendTemperatureToMaster7+0x64>)
 80011e2:	f002 fcc9 	bl	8003b78 <HAL_FDCAN_AddMessageToTxFifoQ>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1ed      	bne.n	80011c8 <sendTemperatureToMaster7+0x2c>
		}
	}
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200003c4 	.word	0x200003c4
 80011fc:	200003bc 	.word	0x200003bc
 8001200:	200004b4 	.word	0x200004b4

08001204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001208:	f000 fd41 	bl	8001c8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120c:	f000 f82c 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001210:	f000 fa62 	bl	80016d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001214:	f000 fa36 	bl	8001684 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001218:	f000 f9da 	bl	80015d0 <MX_FDCAN1_Init>
  MX_ADC2_Init();
 800121c:	f000 f870 	bl	8001300 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  initializeHistory();
 8001220:	f7ff fd82 	bl	8000d28 <initializeHistory>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001224:	f004 f87e 	bl	8005324 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xReadTemp */
  xReadTempHandle = osThreadNew(xReadTempFunction, NULL, &xReadTemp_attributes);
 8001228:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <main+0x4c>)
 800122a:	2100      	movs	r1, #0
 800122c:	4809      	ldr	r0, [pc, #36]	@ (8001254 <main+0x50>)
 800122e:	f004 f8c3 	bl	80053b8 <osThreadNew>
 8001232:	4603      	mov	r3, r0
 8001234:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <main+0x54>)
 8001236:	6013      	str	r3, [r2, #0]

  /* creation of xSendCAN */
  xSendCANHandle = osThreadNew(xSendCANFunction, NULL, &xSendCAN_attributes);
 8001238:	4a08      	ldr	r2, [pc, #32]	@ (800125c <main+0x58>)
 800123a:	2100      	movs	r1, #0
 800123c:	4808      	ldr	r0, [pc, #32]	@ (8001260 <main+0x5c>)
 800123e:	f004 f8bb 	bl	80053b8 <osThreadNew>
 8001242:	4603      	mov	r3, r0
 8001244:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <main+0x60>)
 8001246:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001248:	f004 f890 	bl	800536c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <main+0x48>
 8001250:	08008f80 	.word	0x08008f80
 8001254:	080017cd 	.word	0x080017cd
 8001258:	20000518 	.word	0x20000518
 800125c:	08008fa4 	.word	0x08008fa4
 8001260:	0800184d 	.word	0x0800184d
 8001264:	2000051c 	.word	0x2000051c

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2238      	movs	r2, #56	@ 0x38
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f006 febe 	bl	8007ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800128a:	2000      	movs	r0, #0
 800128c:	f003 f830 	bl	80042f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129a:	2340      	movs	r3, #64	@ 0x40
 800129c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80012aa:	2355      	movs	r3, #85	@ 0x55
 80012ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 f8ca 	bl	8004458 <HAL_RCC_OscConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012ca:	f000 fb0d 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	230f      	movs	r3, #15
 80012d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d2:	2303      	movs	r3, #3
 80012d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2104      	movs	r1, #4
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fbc8 	bl	8004a7c <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012f2:	f000 faf9 	bl	80018e8 <Error_Handler>
  }
}
 80012f6:	bf00      	nop
 80012f8:	3750      	adds	r7, #80	@ 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001306:	463b      	mov	r3, r7
 8001308:	2220      	movs	r2, #32
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f006 fe73 	bl	8007ff8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001312:	4b9c      	ldr	r3, [pc, #624]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001314:	4a9c      	ldr	r2, [pc, #624]	@ (8001588 <MX_ADC2_Init+0x288>)
 8001316:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001318:	4b9a      	ldr	r3, [pc, #616]	@ (8001584 <MX_ADC2_Init+0x284>)
 800131a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800131e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001320:	4b98      	ldr	r3, [pc, #608]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001326:	4b97      	ldr	r3, [pc, #604]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800132c:	4b95      	ldr	r3, [pc, #596]	@ (8001584 <MX_ADC2_Init+0x284>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001332:	4b94      	ldr	r3, [pc, #592]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001334:	2201      	movs	r2, #1
 8001336:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001338:	4b92      	ldr	r3, [pc, #584]	@ (8001584 <MX_ADC2_Init+0x284>)
 800133a:	2204      	movs	r2, #4
 800133c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800133e:	4b91      	ldr	r3, [pc, #580]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001340:	2200      	movs	r2, #0
 8001342:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001344:	4b8f      	ldr	r3, [pc, #572]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001346:	2201      	movs	r2, #1
 8001348:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 16;
 800134a:	4b8e      	ldr	r3, [pc, #568]	@ (8001584 <MX_ADC2_Init+0x284>)
 800134c:	2210      	movs	r2, #16
 800134e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001350:	4b8c      	ldr	r3, [pc, #560]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001358:	4b8a      	ldr	r3, [pc, #552]	@ (8001584 <MX_ADC2_Init+0x284>)
 800135a:	2200      	movs	r2, #0
 800135c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135e:	4b89      	ldr	r3, [pc, #548]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001364:	4b87      	ldr	r3, [pc, #540]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800136c:	4b85      	ldr	r3, [pc, #532]	@ (8001584 <MX_ADC2_Init+0x284>)
 800136e:	2200      	movs	r2, #0
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001372:	4b84      	ldr	r3, [pc, #528]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800137a:	4882      	ldr	r0, [pc, #520]	@ (8001584 <MX_ADC2_Init+0x284>)
 800137c:	f000 ff16 	bl	80021ac <HAL_ADC_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001386:	f000 faaf 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800138a:	4b80      	ldr	r3, [pc, #512]	@ (800158c <MX_ADC2_Init+0x28c>)
 800138c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138e:	2306      	movs	r3, #6
 8001390:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001392:	2307      	movs	r3, #7
 8001394:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001396:	237f      	movs	r3, #127	@ 0x7f
 8001398:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800139a:	2304      	movs	r3, #4
 800139c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	4619      	mov	r1, r3
 80013a6:	4877      	ldr	r0, [pc, #476]	@ (8001584 <MX_ADC2_Init+0x284>)
 80013a8:	f001 f98c 	bl	80026c4 <HAL_ADC_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80013b2:	f000 fa99 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013b6:	4b76      	ldr	r3, [pc, #472]	@ (8001590 <MX_ADC2_Init+0x290>)
 80013b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013ba:	230c      	movs	r3, #12
 80013bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	4870      	ldr	r0, [pc, #448]	@ (8001584 <MX_ADC2_Init+0x284>)
 80013c4:	f001 f97e 	bl	80026c4 <HAL_ADC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80013ce:	f000 fa8b 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013d2:	4b70      	ldr	r3, [pc, #448]	@ (8001594 <MX_ADC2_Init+0x294>)
 80013d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013d6:	2312      	movs	r3, #18
 80013d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4869      	ldr	r0, [pc, #420]	@ (8001584 <MX_ADC2_Init+0x284>)
 80013e0:	f001 f970 	bl	80026c4 <HAL_ADC_ConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80013ea:	f000 fa7d 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001598 <MX_ADC2_Init+0x298>)
 80013f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013f2:	2318      	movs	r3, #24
 80013f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	4862      	ldr	r0, [pc, #392]	@ (8001584 <MX_ADC2_Init+0x284>)
 80013fc:	f001 f962 	bl	80026c4 <HAL_ADC_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8001406:	f000 fa6f 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800140a:	4b64      	ldr	r3, [pc, #400]	@ (800159c <MX_ADC2_Init+0x29c>)
 800140c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800140e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001412:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	485a      	ldr	r0, [pc, #360]	@ (8001584 <MX_ADC2_Init+0x284>)
 800141a:	f001 f953 	bl	80026c4 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8001424:	f000 fa60 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001428:	4b5d      	ldr	r3, [pc, #372]	@ (80015a0 <MX_ADC2_Init+0x2a0>)
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800142c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001430:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4853      	ldr	r0, [pc, #332]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001438:	f001 f944 	bl	80026c4 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 8001442:	f000 fa51 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001446:	4b57      	ldr	r3, [pc, #348]	@ (80015a4 <MX_ADC2_Init+0x2a4>)
 8001448:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800144a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800144e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	484b      	ldr	r0, [pc, #300]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001456:	f001 f935 	bl	80026c4 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 8001460:	f000 fa42 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001464:	4b50      	ldr	r3, [pc, #320]	@ (80015a8 <MX_ADC2_Init+0x2a8>)
 8001466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001468:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800146c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4844      	ldr	r0, [pc, #272]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001474:	f001 f926 	bl	80026c4 <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 800147e:	f000 fa33 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001482:	4b4a      	ldr	r3, [pc, #296]	@ (80015ac <MX_ADC2_Init+0x2ac>)
 8001484:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001486:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800148a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	483c      	ldr	r0, [pc, #240]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001492:	f001 f917 	bl	80026c4 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC2_Init+0x1a0>
  {
    Error_Handler();
 800149c:	f000 fa24 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014a0:	4b43      	ldr	r3, [pc, #268]	@ (80015b0 <MX_ADC2_Init+0x2b0>)
 80014a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80014a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	4835      	ldr	r0, [pc, #212]	@ (8001584 <MX_ADC2_Init+0x284>)
 80014b0:	f001 f908 	bl	80026c4 <HAL_ADC_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC2_Init+0x1be>
  {
    Error_Handler();
 80014ba:	f000 fa15 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014be:	4b3d      	ldr	r3, [pc, #244]	@ (80015b4 <MX_ADC2_Init+0x2b4>)
 80014c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80014c2:	f240 2306 	movw	r3, #518	@ 0x206
 80014c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	482d      	ldr	r0, [pc, #180]	@ (8001584 <MX_ADC2_Init+0x284>)
 80014ce:	f001 f8f9 	bl	80026c4 <HAL_ADC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_ADC2_Init+0x1dc>
  {
    Error_Handler();
 80014d8:	f000 fa06 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80014dc:	4b36      	ldr	r3, [pc, #216]	@ (80015b8 <MX_ADC2_Init+0x2b8>)
 80014de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80014e0:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80014e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	4619      	mov	r1, r3
 80014ea:	4826      	ldr	r0, [pc, #152]	@ (8001584 <MX_ADC2_Init+0x284>)
 80014ec:	f001 f8ea 	bl	80026c4 <HAL_ADC_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC2_Init+0x1fa>
  {
    Error_Handler();
 80014f6:	f000 f9f7 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80014fa:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <MX_ADC2_Init+0x2bc>)
 80014fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80014fe:	f240 2312 	movw	r3, #530	@ 0x212
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	481e      	ldr	r0, [pc, #120]	@ (8001584 <MX_ADC2_Init+0x284>)
 800150a:	f001 f8db 	bl	80026c4 <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC2_Init+0x218>
  {
    Error_Handler();
 8001514:	f000 f9e8 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001518:	4b29      	ldr	r3, [pc, #164]	@ (80015c0 <MX_ADC2_Init+0x2c0>)
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800151c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001520:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	4619      	mov	r1, r3
 8001526:	4817      	ldr	r0, [pc, #92]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001528:	f001 f8cc 	bl	80026c4 <HAL_ADC_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ADC2_Init+0x236>
  {
    Error_Handler();
 8001532:	f000 f9d9 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001536:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <MX_ADC2_Init+0x2c4>)
 8001538:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800153a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800153e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	480f      	ldr	r0, [pc, #60]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001546:	f001 f8bd 	bl	80026c4 <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC2_Init+0x254>
  {
    Error_Handler();
 8001550:	f000 f9ca 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001554:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <MX_ADC2_Init+0x2c8>)
 8001556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8001558:	f240 3306 	movw	r3, #774	@ 0x306
 800155c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4808      	ldr	r0, [pc, #32]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001564:	f001 f8ae 	bl	80026c4 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC2_Init+0x272>
  {
    Error_Handler();
 800156e:	f000 f9bb 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) rawAdcBuffer, numberOfThermistors);
 8001572:	2210      	movs	r2, #16
 8001574:	4915      	ldr	r1, [pc, #84]	@ (80015cc <MX_ADC2_Init+0x2cc>)
 8001576:	4803      	ldr	r0, [pc, #12]	@ (8001584 <MX_ADC2_Init+0x284>)
 8001578:	f000 ffc6 	bl	8002508 <HAL_ADC_Start_DMA>
  /* USER CODE END ADC2_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200003e8 	.word	0x200003e8
 8001588:	50000100 	.word	0x50000100
 800158c:	04300002 	.word	0x04300002
 8001590:	08600004 	.word	0x08600004
 8001594:	0c900008 	.word	0x0c900008
 8001598:	10c00010 	.word	0x10c00010
 800159c:	14f00020 	.word	0x14f00020
 80015a0:	19200040 	.word	0x19200040
 80015a4:	1d500080 	.word	0x1d500080
 80015a8:	21800100 	.word	0x21800100
 80015ac:	25b00200 	.word	0x25b00200
 80015b0:	2a000400 	.word	0x2a000400
 80015b4:	2e300800 	.word	0x2e300800
 80015b8:	32601000 	.word	0x32601000
 80015bc:	36902000 	.word	0x36902000
 80015c0:	3ac04000 	.word	0x3ac04000
 80015c4:	3ef08000 	.word	0x3ef08000
 80015c8:	47520000 	.word	0x47520000
 80015cc:	20000520 	.word	0x20000520

080015d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80015d4:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 80015d6:	4a29      	ldr	r2, [pc, #164]	@ (800167c <MX_FDCAN1_Init+0xac>)
 80015d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80015e0:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80015e6:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80015ec:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 8001600:	220a      	movs	r2, #10
 8001602:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001604:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 8001606:	2201      	movs	r2, #1
 8001608:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 800160c:	2216      	movs	r2, #22
 800160e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 8001612:	220b      	movs	r2, #11
 8001614:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 8001618:	2201      	movs	r2, #1
 800161a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 800161e:	2201      	movs	r2, #1
 8001620:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 8001624:	2201      	movs	r2, #1
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 800162a:	2201      	movs	r2, #1
 800162c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800162e:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 8001630:	2200      	movs	r2, #0
 8001632:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001634:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 8001636:	2200      	movs	r2, #0
 8001638:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800163a:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001640:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 8001642:	f002 f917 	bl	8003874 <HAL_FDCAN_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800164c:	f000 f94c 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2101      	movs	r1, #1
 8001654:	4808      	ldr	r0, [pc, #32]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 8001656:	f002 fad3 	bl	8003c00 <HAL_FDCAN_ActivateNotification>
  HAL_FDCAN_Start(&hfdcan1);
 800165a:	4807      	ldr	r0, [pc, #28]	@ (8001678 <MX_FDCAN1_Init+0xa8>)
 800165c:	f002 fa64 	bl	8003b28 <HAL_FDCAN_Start>

  FDCAN1TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <MX_FDCAN1_Init+0xb0>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  FDCAN1TxHeader.IdType = FDCAN_STANDARD_ID;
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <MX_FDCAN1_Init+0xb0>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  FDCAN1TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <MX_FDCAN1_Init+0xb0>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  /* USER CODE END FDCAN1_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200004b4 	.word	0x200004b4
 800167c:	40006400 	.word	0x40006400
 8001680:	200003c4 	.word	0x200003c4

08001684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <MX_DMA_Init+0x50>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168e:	4a11      	ldr	r2, [pc, #68]	@ (80016d4 <MX_DMA_Init+0x50>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6493      	str	r3, [r2, #72]	@ 0x48
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <MX_DMA_Init+0x50>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_DMA_Init+0x50>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a6:	4a0b      	ldr	r2, [pc, #44]	@ (80016d4 <MX_DMA_Init+0x50>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_DMA_Init+0x50>)
 80016b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2105      	movs	r1, #5
 80016be:	200b      	movs	r0, #11
 80016c0:	f001 fe31 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016c4:	200b      	movs	r0, #11
 80016c6:	f001 fe48 	bl	800335a <HAL_NVIC_EnableIRQ>

}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ee:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <MX_GPIO_Init+0xa8>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	4a23      	ldr	r2, [pc, #140]	@ (8001780 <MX_GPIO_Init+0xa8>)
 80016f4:	f043 0320 	orr.w	r3, r3, #32
 80016f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fa:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <MX_GPIO_Init+0xa8>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	f003 0320 	and.w	r3, r3, #32
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <MX_GPIO_Init+0xa8>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	4a1d      	ldr	r2, [pc, #116]	@ (8001780 <MX_GPIO_Init+0xa8>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001712:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <MX_GPIO_Init+0xa8>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <MX_GPIO_Init+0xa8>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	4a17      	ldr	r2, [pc, #92]	@ (8001780 <MX_GPIO_Init+0xa8>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <MX_GPIO_Init+0xa8>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <MX_GPIO_Init+0xa8>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4a11      	ldr	r2, [pc, #68]	@ (8001780 <MX_GPIO_Init+0xa8>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <MX_GPIO_Init+0xa8>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(userLED_GPIO_Port, userLED_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001754:	480b      	ldr	r0, [pc, #44]	@ (8001784 <MX_GPIO_Init+0xac>)
 8001756:	f002 fd99 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userLED_Pin */
  GPIO_InitStruct.Pin = userLED_Pin;
 800175a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(userLED_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4804      	ldr	r0, [pc, #16]	@ (8001784 <MX_GPIO_Init+0xac>)
 8001774:	f002 fc08 	bl	8003f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	@ 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	48000800 	.word	0x48000800

08001788 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(xReadTempHandle, &xHigherPriorityTaskWoken);
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f107 020c 	add.w	r2, r7, #12
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f005 fbaa 	bl	8006ef8 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_ADC_ConvCpltCallback+0x32>
 80017aa:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <HAL_ADC_ConvCpltCallback+0x40>)
 80017ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f3bf 8f4f 	dsb	sy
 80017b6:	f3bf 8f6f 	isb	sy
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000518 	.word	0x20000518
 80017c8:	e000ed04 	.word	0xe000ed04

080017cc <xReadTempFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_xReadTempFunction */
void xReadTempFunction(void *argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	xReadTempHandle = xTaskGetCurrentTaskHandle();
 80017d4:	f005 faaa 	bl	8006d2c <xTaskGetCurrentTaskHandle>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a19      	ldr	r2, [pc, #100]	@ (8001840 <xReadTempFunction+0x74>)
 80017dc:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80017de:	f04f 31ff 	mov.w	r1, #4294967295
 80017e2:	2001      	movs	r0, #1
 80017e4:	f005 fb40 	bl	8006e68 <ulTaskNotifyTake>
	  for(int i = 0; i < numberOfThermistors; i++){
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e01e      	b.n	800182c <xReadTempFunction+0x60>
		  rawTempBuffer[i] =  convertVoltageToTemperature(convertBitsToVoltage(rawAdcBuffer[i]));
 80017ee:	4a15      	ldr	r2, [pc, #84]	@ (8001844 <xReadTempFunction+0x78>)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fe:	ee17 3a90 	vmov	r3, s15
 8001802:	b29b      	uxth	r3, r3
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff f9c7 	bl	8000b98 <convertBitsToVoltage>
 800180a:	eef0 7a40 	vmov.f32	s15, s0
 800180e:	eeb0 0a67 	vmov.f32	s0, s15
 8001812:	f7ff f9f1 	bl	8000bf8 <convertVoltageToTemperature>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
 800181a:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <xReadTempFunction+0x7c>)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	edc3 7a00 	vstr	s15, [r3]
	  for(int i = 0; i < numberOfThermistors; i++){
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3301      	adds	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	dddd      	ble.n	80017ee <xReadTempFunction+0x22>
	  }
	  applyMovingAverageFilter(rawTempBuffer);
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <xReadTempFunction+0x7c>)
 8001834:	f7ff fab4 	bl	8000da0 <applyMovingAverageFilter>

	osDelay(1);
 8001838:	2001      	movs	r0, #1
 800183a:	f003 fe4f 	bl	80054dc <osDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800183e:	e7ce      	b.n	80017de <xReadTempFunction+0x12>
 8001840:	20000518 	.word	0x20000518
 8001844:	20000520 	.word	0x20000520
 8001848:	20000560 	.word	0x20000560

0800184c <xSendCANFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_xSendCANFunction */
void xSendCANFunction(void *argument)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  static int burst = 0;

	  if(burst % 3 == 0){
 8001854:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <xSendCANFunction+0x8c>)
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <xSendCANFunction+0x90>)
 800185a:	fb83 3201 	smull	r3, r2, r3, r1
 800185e:	17cb      	asrs	r3, r1, #31
 8001860:	1ad2      	subs	r2, r2, r3
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	1aca      	subs	r2, r1, r3
 800186a:	2a00      	cmp	r2, #0
 800186c:	d109      	bne.n	8001882 <xSendCANFunction+0x36>
		  sendTemperatureToMaster0(filteredReadings);
 800186e:	481c      	ldr	r0, [pc, #112]	@ (80018e0 <xSendCANFunction+0x94>)
 8001870:	f7ff fb28 	bl	8000ec4 <sendTemperatureToMaster0>
		  sendTemperatureToMaster1(filteredReadings);
 8001874:	481a      	ldr	r0, [pc, #104]	@ (80018e0 <xSendCANFunction+0x94>)
 8001876:	f7ff fb59 	bl	8000f2c <sendTemperatureToMaster1>
		  sendTemperatureToMaster2(filteredReadings);
 800187a:	4819      	ldr	r0, [pc, #100]	@ (80018e0 <xSendCANFunction+0x94>)
 800187c:	f7ff fb8a 	bl	8000f94 <sendTemperatureToMaster2>
 8001880:	e01c      	b.n	80018bc <xSendCANFunction+0x70>
	  }
	  else if(burst % 3 == 1){
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <xSendCANFunction+0x8c>)
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <xSendCANFunction+0x90>)
 8001888:	fb83 3201 	smull	r3, r2, r3, r1
 800188c:	17cb      	asrs	r3, r1, #31
 800188e:	1ad2      	subs	r2, r2, r3
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	1aca      	subs	r2, r1, r3
 8001898:	2a01      	cmp	r2, #1
 800189a:	d109      	bne.n	80018b0 <xSendCANFunction+0x64>
		  sendTemperatureToMaster3(filteredReadings);
 800189c:	4810      	ldr	r0, [pc, #64]	@ (80018e0 <xSendCANFunction+0x94>)
 800189e:	f7ff fbad 	bl	8000ffc <sendTemperatureToMaster3>
		  sendTemperatureToMaster4(filteredReadings);
 80018a2:	480f      	ldr	r0, [pc, #60]	@ (80018e0 <xSendCANFunction+0x94>)
 80018a4:	f7ff fbde 	bl	8001064 <sendTemperatureToMaster4>
		  sendTemperatureToMaster5(filteredReadings);
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <xSendCANFunction+0x94>)
 80018aa:	f7ff fc0f 	bl	80010cc <sendTemperatureToMaster5>
 80018ae:	e005      	b.n	80018bc <xSendCANFunction+0x70>
	  }
	  else{
		  sendTemperatureToMaster6(filteredReadings);
 80018b0:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <xSendCANFunction+0x94>)
 80018b2:	f7ff fc3f 	bl	8001134 <sendTemperatureToMaster6>
		  sendTemperatureToMaster7(filteredReadings);
 80018b6:	480a      	ldr	r0, [pc, #40]	@ (80018e0 <xSendCANFunction+0x94>)
 80018b8:	f7ff fc70 	bl	800119c <sendTemperatureToMaster7>
	  }

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80018bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c0:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <xSendCANFunction+0x98>)
 80018c2:	f002 fcfb 	bl	80042bc <HAL_GPIO_TogglePin>
	  burst++;
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <xSendCANFunction+0x8c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a02      	ldr	r2, [pc, #8]	@ (80018d8 <xSendCANFunction+0x8c>)
 80018ce:	6013      	str	r3, [r2, #0]

    osDelay(100);
 80018d0:	2064      	movs	r0, #100	@ 0x64
 80018d2:	f003 fe03 	bl	80054dc <osDelay>
  {
 80018d6:	e7bd      	b.n	8001854 <xSendCANFunction+0x8>
 80018d8:	200005a0 	.word	0x200005a0
 80018dc:	55555556 	.word	0x55555556
 80018e0:	200002fc 	.word	0x200002fc
 80018e4:	48000800 	.word	0x48000800

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018f2:	4803      	ldr	r0, [pc, #12]	@ (8001900 <Error_Handler+0x18>)
 80018f4:	f002 fcca 	bl	800428c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <Error_Handler+0x14>
 8001900:	48000800 	.word	0x48000800

08001904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_MspInit+0x50>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190e:	4a11      	ldr	r2, [pc, #68]	@ (8001954 <HAL_MspInit+0x50>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6613      	str	r3, [r2, #96]	@ 0x60
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <HAL_MspInit+0x50>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <HAL_MspInit+0x50>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <HAL_MspInit+0x50>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192c:	6593      	str	r3, [r2, #88]	@ 0x58
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_MspInit+0x50>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	210f      	movs	r1, #15
 800193e:	f06f 0001 	mvn.w	r0, #1
 8001942:	f001 fcf0 	bl	8003326 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001946:	f002 fd77 	bl	8004438 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0a0      	sub	sp, #128	@ 0x80
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	2250      	movs	r2, #80	@ 0x50
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f006 fb3d 	bl	8007ff8 <memset>
  if(hadc->Instance==ADC2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a58      	ldr	r2, [pc, #352]	@ (8001ae4 <HAL_ADC_MspInit+0x18c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	f040 80a9 	bne.w	8001adc <HAL_ADC_MspInit+0x184>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800198a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800198e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001990:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001994:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fa52 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80019a6:	f7ff ff9f 	bl	80018e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019aa:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019c2:	4b49      	ldr	r3, [pc, #292]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	4a48      	ldr	r2, [pc, #288]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019c8:	f043 0320 	orr.w	r3, r3, #32
 80019cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ce:	4b46      	ldr	r3, [pc, #280]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019da:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	4a42      	ldr	r2, [pc, #264]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e6:	4b40      	ldr	r3, [pc, #256]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	4a36      	ldr	r2, [pc, #216]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a16:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <HAL_ADC_MspInit+0x190>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ADC2_IN11
    PB2     ------> ADC2_IN12
    PB11     ------> ADC2_IN14
    PB15     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a22:	2302      	movs	r3, #2
 8001a24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a26:	2303      	movs	r3, #3
 8001a28:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a32:	4619      	mov	r1, r3
 8001a34:	482d      	ldr	r0, [pc, #180]	@ (8001aec <HAL_ADC_MspInit+0x194>)
 8001a36:	f002 faa7 	bl	8003f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a3a:	233f      	movs	r3, #63	@ 0x3f
 8001a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4828      	ldr	r0, [pc, #160]	@ (8001af0 <HAL_ADC_MspInit+0x198>)
 8001a4e:	f002 fa9b 	bl	8003f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001a52:	23f3      	movs	r3, #243	@ 0xf3
 8001a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a56:	2303      	movs	r3, #3
 8001a58:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a62:	4619      	mov	r1, r3
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a68:	f002 fa8e 	bl	8003f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_15;
 8001a6c:	f648 0304 	movw	r3, #34820	@ 0x8804
 8001a70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a72:	2303      	movs	r3, #3
 8001a74:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481c      	ldr	r0, [pc, #112]	@ (8001af4 <HAL_ADC_MspInit+0x19c>)
 8001a82:	f002 fa81 	bl	8003f88 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001a88:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <HAL_ADC_MspInit+0x1a4>)
 8001a8a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001a8e:	2224      	movs	r2, #36	@ 0x24
 8001a90:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a92:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001aa0:	2280      	movs	r2, #128	@ 0x80
 8001aa2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001aa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aaa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001aae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ab2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001ac0:	480d      	ldr	r0, [pc, #52]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001ac2:	f001 fc65 	bl	8003390 <HAL_DMA_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8001acc:	f7ff ff0c 	bl	80018e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a09      	ldr	r2, [pc, #36]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001ad4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ad6:	4a08      	ldr	r2, [pc, #32]	@ (8001af8 <HAL_ADC_MspInit+0x1a0>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8001adc:	bf00      	nop
 8001ade:	3780      	adds	r7, #128	@ 0x80
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	50000100 	.word	0x50000100
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	48001400 	.word	0x48001400
 8001af0:	48000800 	.word	0x48000800
 8001af4:	48000400 	.word	0x48000400
 8001af8:	20000454 	.word	0x20000454
 8001afc:	40020008 	.word	0x40020008

08001b00 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b09e      	sub	sp, #120	@ 0x78
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2250      	movs	r2, #80	@ 0x50
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f006 fa69 	bl	8007ff8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a20      	ldr	r2, [pc, #128]	@ (8001bac <HAL_FDCAN_MspInit+0xac>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d139      	bne.n	8001ba4 <HAL_FDCAN_MspInit+0xa4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b34:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 f97f 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001b4c:	f7ff fecc 	bl	80018e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b50:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <HAL_FDCAN_MspInit+0xb0>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b54:	4a16      	ldr	r2, [pc, #88]	@ (8001bb0 <HAL_FDCAN_MspInit+0xb0>)
 8001b56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b5c:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <HAL_FDCAN_MspInit+0xb0>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_FDCAN_MspInit+0xb0>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6c:	4a10      	ldr	r2, [pc, #64]	@ (8001bb0 <HAL_FDCAN_MspInit+0xb0>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b74:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_FDCAN_MspInit+0xb0>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b80:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b92:	2309      	movs	r3, #9
 8001b94:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba0:	f002 f9f2 	bl	8003f88 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3778      	adds	r7, #120	@ 0x78
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40006400 	.word	0x40006400
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <NMI_Handler+0x4>

08001bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <HardFault_Handler+0x4>

08001bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <MemManage_Handler+0x4>

08001bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bee:	f000 f8a1 	bl	8001d34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001bf2:	f005 f8ab 	bl	8006d4c <xTaskGetSchedulerState>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d001      	beq.n	8001c00 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001bfc:	f005 ff7c 	bl	8007af8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <DMA1_Channel1_IRQHandler+0x10>)
 8001c0a:	f001 fce4 	bl	80035d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000454 	.word	0x20000454

08001c18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <SystemInit+0x20>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c22:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <SystemInit+0x20>)
 8001c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c3c:	480d      	ldr	r0, [pc, #52]	@ (8001c74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c3e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c40:	f7ff ffea 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c46:	490d      	ldr	r1, [pc, #52]	@ (8001c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c48:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <LoopForever+0xe>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c88 <LoopForever+0x16>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f006 f9d3 	bl	8008014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c6e:	f7ff fac9 	bl	8001204 <main>

08001c72 <LoopForever>:

LoopForever:
    b LoopForever
 8001c72:	e7fe      	b.n	8001c72 <LoopForever>
  ldr   r0, =_estack
 8001c74:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c80:	08009030 	.word	0x08009030
  ldr r2, =_sbss
 8001c84:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c88:	20002030 	.word	0x20002030

08001c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC1_2_IRQHandler>

08001c8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f001 fb39 	bl	8003310 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c9e:	200f      	movs	r0, #15
 8001ca0:	f000 f80e 	bl	8001cc0 <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	71fb      	strb	r3, [r7, #7]
 8001cae:	e001      	b.n	8001cb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cb0:	f7ff fe28 	bl	8001904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cb4:	79fb      	ldrb	r3, [r7, #7]

}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ccc:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <HAL_InitTick+0x68>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d022      	beq.n	8001d1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cd4:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_InitTick+0x6c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <HAL_InitTick+0x68>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 fb44 	bl	8003376 <HAL_SYSTICK_Config>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10f      	bne.n	8001d14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	d809      	bhi.n	8001d0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8001d02:	f001 fb10 	bl	8003326 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <HAL_InitTick+0x70>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e007      	b.n	8001d1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e004      	b.n	8001d1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e001      	b.n	8001d1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004

08001d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_IncTick+0x1c>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <HAL_IncTick+0x20>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a03      	ldr	r2, [pc, #12]	@ (8001d50 <HAL_IncTick+0x1c>)
 8001d44:	6013      	str	r3, [r2, #0]
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	200005a4 	.word	0x200005a4
 8001d54:	20000008 	.word	0x20000008

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200005a4 	.word	0x200005a4

08001d70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	609a      	str	r2, [r3, #8]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	609a      	str	r2, [r3, #8]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3360      	adds	r3, #96	@ 0x60
 8001dea:	461a      	mov	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <LL_ADC_SetOffset+0x44>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e10:	bf00      	nop
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	03fff000 	.word	0x03fff000

08001e20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3360      	adds	r3, #96	@ 0x60
 8001e2e:	461a      	mov	r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3360      	adds	r3, #96	@ 0x60
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b087      	sub	sp, #28
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3360      	adds	r3, #96	@ 0x60
 8001e92:	461a      	mov	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001eac:	bf00      	nop
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3360      	adds	r3, #96	@ 0x60
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ee2:	bf00      	nop
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	615a      	str	r2, [r3, #20]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b087      	sub	sp, #28
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3330      	adds	r3, #48	@ 0x30
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	4413      	add	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	211f      	movs	r1, #31
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0e9b      	lsrs	r3, r3, #26
 8001f72:	f003 011f 	and.w	r1, r3, #31
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b087      	sub	sp, #28
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	0e5b      	lsrs	r3, r3, #25
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	4413      	add	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	0d1b      	lsrs	r3, r3, #20
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	2107      	movs	r1, #7
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	0d1b      	lsrs	r3, r3, #20
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fdc:	bf00      	nop
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0318 	and.w	r3, r3, #24
 800200a:	4908      	ldr	r1, [pc, #32]	@ (800202c <LL_ADC_SetChannelSingleDiff+0x44>)
 800200c:	40d9      	lsrs	r1, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	400b      	ands	r3, r1
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	0007ffff 	.word	0x0007ffff

08002030 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 031f 	and.w	r3, r3, #31
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800205c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6093      	str	r3, [r2, #8]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002080:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002084:	d101      	bne.n	800208a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80020a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020d4:	d101      	bne.n	80020da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <LL_ADC_IsEnabled+0x18>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <LL_ADC_IsEnabled+0x1a>
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002146:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800214a:	f043 0204 	orr.w	r2, r3, #4
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b04      	cmp	r3, #4
 8002170:	d101      	bne.n	8002176 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b08      	cmp	r3, #8
 8002196:	d101      	bne.n	800219c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b089      	sub	sp, #36	@ 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e19b      	b.n	80024fe <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fbbf 	bl	8001958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff3f 	bl	8002070 <LL_ADC_IsDeepPowerDownEnabled>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d004      	beq.n	8002202 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff25 	bl	800204c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff5a 	bl	80020c0 <LL_ADC_IsInternalRegulatorEnabled>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d115      	bne.n	800223e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff3e 	bl	8002098 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800221c:	4b97      	ldr	r3, [pc, #604]	@ (800247c <HAL_ADC_Init+0x2d0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	4a97      	ldr	r2, [pc, #604]	@ (8002480 <HAL_ADC_Init+0x2d4>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	3301      	adds	r3, #1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002230:	e002      	b.n	8002238 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3b01      	subs	r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f9      	bne.n	8002232 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff3c 	bl	80020c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002252:	f043 0210 	orr.w	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff75 	bl	800215e <LL_ADC_REG_IsConversionOngoing>
 8002274:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 8134 	bne.w	80024ec <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 8130 	bne.w	80024ec <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002294:	f043 0202 	orr.w	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff35 	bl	8002110 <LL_ADC_IsEnabled>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d137      	bne.n	800231c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022b4:	d004      	beq.n	80022c0 <HAL_ADC_Init+0x114>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a72      	ldr	r2, [pc, #456]	@ (8002484 <HAL_ADC_Init+0x2d8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d10f      	bne.n	80022e0 <HAL_ADC_Init+0x134>
 80022c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022c4:	f7ff ff24 	bl	8002110 <LL_ADC_IsEnabled>
 80022c8:	4604      	mov	r4, r0
 80022ca:	486e      	ldr	r0, [pc, #440]	@ (8002484 <HAL_ADC_Init+0x2d8>)
 80022cc:	f7ff ff20 	bl	8002110 <LL_ADC_IsEnabled>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4323      	orrs	r3, r4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e008      	b.n	80022f2 <HAL_ADC_Init+0x146>
 80022e0:	4869      	ldr	r0, [pc, #420]	@ (8002488 <HAL_ADC_Init+0x2dc>)
 80022e2:	f7ff ff15 	bl	8002110 <LL_ADC_IsEnabled>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d012      	beq.n	800231c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022fe:	d004      	beq.n	800230a <HAL_ADC_Init+0x15e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a5f      	ldr	r2, [pc, #380]	@ (8002484 <HAL_ADC_Init+0x2d8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d101      	bne.n	800230e <HAL_ADC_Init+0x162>
 800230a:	4a60      	ldr	r2, [pc, #384]	@ (800248c <HAL_ADC_Init+0x2e0>)
 800230c:	e000      	b.n	8002310 <HAL_ADC_Init+0x164>
 800230e:	4a60      	ldr	r2, [pc, #384]	@ (8002490 <HAL_ADC_Init+0x2e4>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f7ff fd2a 	bl	8001d70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7f5b      	ldrb	r3, [r3, #29]
 8002320:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002326:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800232c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002332:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800233a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002346:	2b01      	cmp	r3, #1
 8002348:	d106      	bne.n	8002358 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	045b      	lsls	r3, r3, #17
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d009      	beq.n	8002374 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002364:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	4b46      	ldr	r3, [pc, #280]	@ (8002494 <HAL_ADC_Init+0x2e8>)
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	69b9      	ldr	r1, [r7, #24]
 8002384:	430b      	orrs	r3, r1
 8002386:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff feee 	bl	8002184 <LL_ADC_INJ_IsConversionOngoing>
 80023a8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d17b      	bne.n	80024a8 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d178      	bne.n	80024a8 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023ba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023c2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023d2:	f023 0302 	bic.w	r3, r3, #2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	430b      	orrs	r3, r1
 80023de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d017      	beq.n	8002418 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80023f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002400:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002404:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6911      	ldr	r1, [r2, #16]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	430b      	orrs	r3, r1
 8002412:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002416:	e013      	b.n	8002440 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002426:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002438:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800243c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002446:	2b01      	cmp	r3, #1
 8002448:	d126      	bne.n	8002498 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002460:	4311      	orrs	r1, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002466:	4311      	orrs	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800246c:	430a      	orrs	r2, r1
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	611a      	str	r2, [r3, #16]
 800247a:	e015      	b.n	80024a8 <HAL_ADC_Init+0x2fc>
 800247c:	20000000 	.word	0x20000000
 8002480:	053e2d63 	.word	0x053e2d63
 8002484:	50000100 	.word	0x50000100
 8002488:	50000400 	.word	0x50000400
 800248c:	50000300 	.word	0x50000300
 8002490:	50000700 	.word	0x50000700
 8002494:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d10c      	bne.n	80024ca <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	f023 010f 	bic.w	r1, r3, #15
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	1e5a      	subs	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024c8:	e007      	b.n	80024da <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 020f 	bic.w	r2, r2, #15
 80024d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024de:	f023 0303 	bic.w	r3, r3, #3
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024ea:	e007      	b.n	80024fc <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	f043 0210 	orr.w	r2, r3, #16
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	@ 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	bf00      	nop

08002508 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800251c:	d004      	beq.n	8002528 <HAL_ADC_Start_DMA+0x20>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a57      	ldr	r2, [pc, #348]	@ (8002680 <HAL_ADC_Start_DMA+0x178>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d101      	bne.n	800252c <HAL_ADC_Start_DMA+0x24>
 8002528:	4b56      	ldr	r3, [pc, #344]	@ (8002684 <HAL_ADC_Start_DMA+0x17c>)
 800252a:	e000      	b.n	800252e <HAL_ADC_Start_DMA+0x26>
 800252c:	4b56      	ldr	r3, [pc, #344]	@ (8002688 <HAL_ADC_Start_DMA+0x180>)
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fd7e 	bl	8002030 <LL_ADC_GetMultimode>
 8002534:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fe0f 	bl	800215e <LL_ADC_REG_IsConversionOngoing>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 8094 	bne.w	8002670 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_ADC_Start_DMA+0x4e>
 8002552:	2302      	movs	r3, #2
 8002554:	e08f      	b.n	8002676 <HAL_ADC_Start_DMA+0x16e>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a4a      	ldr	r2, [pc, #296]	@ (800268c <HAL_ADC_Start_DMA+0x184>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d008      	beq.n	800257a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d002      	beq.n	800257a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2b09      	cmp	r3, #9
 8002578:	d173      	bne.n	8002662 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fcce 	bl	8002f1c <ADC_Enable>
 8002580:	4603      	mov	r3, r0
 8002582:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d166      	bne.n	8002658 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a37      	ldr	r2, [pc, #220]	@ (8002680 <HAL_ADC_Start_DMA+0x178>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d002      	beq.n	80025ae <HAL_ADC_Start_DMA+0xa6>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	e001      	b.n	80025b2 <HAL_ADC_Start_DMA+0xaa>
 80025ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d002      	beq.n	80025c0 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025dc:	f023 0206 	bic.w	r2, r3, #6
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	661a      	str	r2, [r3, #96]	@ 0x60
 80025e4:	e002      	b.n	80025ec <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	4a27      	ldr	r2, [pc, #156]	@ (8002690 <HAL_ADC_Start_DMA+0x188>)
 80025f2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	4a26      	ldr	r2, [pc, #152]	@ (8002694 <HAL_ADC_Start_DMA+0x18c>)
 80025fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002600:	4a25      	ldr	r2, [pc, #148]	@ (8002698 <HAL_ADC_Start_DMA+0x190>)
 8002602:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	221c      	movs	r2, #28
 800260a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0210 	orr.w	r2, r2, #16
 8002622:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3340      	adds	r3, #64	@ 0x40
 800263e:	4619      	mov	r1, r3
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f000 ff4c 	bl	80034e0 <HAL_DMA_Start_IT>
 8002648:	4603      	mov	r3, r0
 800264a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd70 	bl	8002136 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002656:	e00d      	b.n	8002674 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002660:	e008      	b.n	8002674 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800266e:	e001      	b.n	8002674 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002674:	7dfb      	ldrb	r3, [r7, #23]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	50000100 	.word	0x50000100
 8002684:	50000300 	.word	0x50000300
 8002688:	50000700 	.word	0x50000700
 800268c:	50000400 	.word	0x50000400
 8002690:	08003049 	.word	0x08003049
 8002694:	08003121 	.word	0x08003121
 8002698:	0800313d 	.word	0x0800313d

0800269c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0b6      	sub	sp, #216	@ 0xd8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x24>
 80026e2:	2302      	movs	r3, #2
 80026e4:	f000 bc04 	b.w	8002ef0 <HAL_ADC_ConfigChannel+0x82c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fd32 	bl	800215e <LL_ADC_REG_IsConversionOngoing>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f040 83e8 	bne.w	8002ed2 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	f7ff fc13 	bl	8001f3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fd20 	bl	800215e <LL_ADC_REG_IsConversionOngoing>
 800271e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fd2c 	bl	8002184 <LL_ADC_INJ_IsConversionOngoing>
 800272c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002730:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002734:	2b00      	cmp	r3, #0
 8002736:	f040 81d9 	bne.w	8002aec <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800273a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 81d4 	bne.w	8002aec <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800274c:	d10f      	bne.n	800276e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	4619      	mov	r1, r3
 800275a:	f7ff fc1a 	bl	8001f92 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fbc1 	bl	8001eee <LL_ADC_SetSamplingTimeCommonConfig>
 800276c:	e00e      	b.n	800278c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	461a      	mov	r2, r3
 800277c:	f7ff fc09 	bl	8001f92 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fbb1 	bl	8001eee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	08db      	lsrs	r3, r3, #3
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d022      	beq.n	80027f4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6919      	ldr	r1, [r3, #16]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027be:	f7ff fb0b 	bl	8001dd8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6919      	ldr	r1, [r3, #16]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f7ff fb57 	bl	8001e82 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d102      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x126>
 80027e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027e8:	e000      	b.n	80027ec <HAL_ADC_ConfigChannel+0x128>
 80027ea:	2300      	movs	r3, #0
 80027ec:	461a      	mov	r2, r3
 80027ee:	f7ff fb63 	bl	8001eb8 <LL_ADC_SetOffsetSaturation>
 80027f2:	e17b      	b.n	8002aec <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fb10 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 8002800:	4603      	mov	r3, r0
 8002802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x15c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fb05 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 8002816:	4603      	mov	r3, r0
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	f003 021f 	and.w	r2, r3, #31
 800281e:	e01e      	b.n	800285e <HAL_ADC_ConfigChannel+0x19a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fafa 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800283e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002842:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e004      	b.n	800285c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x1b2>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	e018      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x1e4>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800288a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800288e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e004      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800289e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fac9 	bl	8001e4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2101      	movs	r1, #1
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff faad 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x222>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff faa2 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	0e9b      	lsrs	r3, r3, #26
 80028e0:	f003 021f 	and.w	r2, r3, #31
 80028e4:	e01e      	b.n	8002924 <HAL_ADC_ConfigChannel+0x260>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2101      	movs	r1, #1
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fa97 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002904:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800290c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002914:	2320      	movs	r3, #32
 8002916:	e004      	b.n	8002922 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_ConfigChannel+0x278>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	e018      	b.n	800296e <HAL_ADC_ConfigChannel+0x2aa>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002950:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002960:	2320      	movs	r3, #32
 8002962:	e004      	b.n	800296e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002964:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800296e:	429a      	cmp	r2, r3
 8002970:	d106      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	2101      	movs	r1, #1
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fa66 	bl	8001e4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2102      	movs	r1, #2
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fa4a 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10a      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x2e8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2102      	movs	r1, #2
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fa3f 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	f003 021f 	and.w	r2, r3, #31
 80029aa:	e01e      	b.n	80029ea <HAL_ADC_ConfigChannel+0x326>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2102      	movs	r1, #2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fa34 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80029ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80029d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80029da:	2320      	movs	r3, #32
 80029dc:	e004      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80029de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x33e>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	e016      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x36c>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002a14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e004      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d106      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fa05 	bl	8001e4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2103      	movs	r1, #3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f9e9 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x3aa>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2103      	movs	r1, #3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f9de 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	e017      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x3da>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2103      	movs	r1, #3
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff f9d3 	bl	8001e20 <LL_ADC_GetOffsetChannel>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a88:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002a90:	2320      	movs	r3, #32
 8002a92:	e003      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d105      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x3f2>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0e9b      	lsrs	r3, r3, #26
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	e011      	b.n	8002ada <HAL_ADC_ConfigChannel+0x416>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ac6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e003      	b.n	8002ada <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d106      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2103      	movs	r1, #3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f9b0 	bl	8001e4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fb0d 	bl	8002110 <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 813d 	bne.w	8002d78 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f7ff fa6c 	bl	8001fe8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4aa2      	ldr	r2, [pc, #648]	@ (8002da0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	f040 812e 	bne.w	8002d78 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x480>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	3301      	adds	r3, #1
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	bf94      	ite	ls
 8002b3c:	2301      	movls	r3, #1
 8002b3e:	2300      	movhi	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	e019      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x4b4>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b54:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002b5c:	2320      	movs	r3, #32
 8002b5e:	e003      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002b60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2b09      	cmp	r3, #9
 8002b70:	bf94      	ite	ls
 8002b72:	2301      	movls	r3, #1
 8002b74:	2300      	movhi	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d079      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d107      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x4d4>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	3301      	adds	r3, #1
 8002b90:	069b      	lsls	r3, r3, #26
 8002b92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b96:	e015      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x500>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ba8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	e003      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	069b      	lsls	r3, r3, #26
 8002bc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x520>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0e9b      	lsrs	r3, r3, #26
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2101      	movs	r1, #1
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	e017      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x550>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	e003      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2101      	movs	r1, #1
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	ea42 0103 	orr.w	r1, r2, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x576>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	051b      	lsls	r3, r3, #20
 8002c38:	e018      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x5a8>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e003      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	e07e      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d107      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x5c8>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	3301      	adds	r3, #1
 8002c84:	069b      	lsls	r3, r3, #26
 8002c86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c8a:	e015      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x5f4>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	e003      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	069b      	lsls	r3, r3, #26
 8002cb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x614>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0e9b      	lsrs	r3, r3, #26
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	e017      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x644>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	61fb      	str	r3, [r7, #28]
  return result;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	e003      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2101      	movs	r1, #1
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	ea42 0103 	orr.w	r1, r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10d      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x670>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	3b1e      	subs	r3, #30
 8002d2c:	051b      	lsls	r3, r3, #20
 8002d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	e01b      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x6a8>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	613b      	str	r3, [r7, #16]
  return result;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	e003      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f003 021f 	and.w	r2, r3, #31
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	3b1e      	subs	r3, #30
 8002d66:	051b      	lsls	r3, r3, #20
 8002d68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d72:	4619      	mov	r1, r3
 8002d74:	f7ff f90d 	bl	8001f92 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <HAL_ADC_ConfigChannel+0x6e0>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80af 	beq.w	8002ee4 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d8e:	d004      	beq.n	8002d9a <HAL_ADC_ConfigChannel+0x6d6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <HAL_ADC_ConfigChannel+0x6e4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10a      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x6ec>
 8002d9a:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <HAL_ADC_ConfigChannel+0x6e8>)
 8002d9c:	e009      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x6ee>
 8002d9e:	bf00      	nop
 8002da0:	407f0000 	.word	0x407f0000
 8002da4:	80080000 	.word	0x80080000
 8002da8:	50000100 	.word	0x50000100
 8002dac:	50000300 	.word	0x50000300
 8002db0:	4b51      	ldr	r3, [pc, #324]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x834>)
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff f802 	bl	8001dbc <LL_ADC_GetCommonPathInternalCh>
 8002db8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a4e      	ldr	r2, [pc, #312]	@ (8002efc <HAL_ADC_ConfigChannel+0x838>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADC_ConfigChannel+0x70c>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a4d      	ldr	r2, [pc, #308]	@ (8002f00 <HAL_ADC_ConfigChannel+0x83c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d134      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d12e      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002de4:	d17e      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x736>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a43      	ldr	r2, [pc, #268]	@ (8002f04 <HAL_ADC_ConfigChannel+0x840>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x73a>
 8002dfa:	4a43      	ldr	r2, [pc, #268]	@ (8002f08 <HAL_ADC_ConfigChannel+0x844>)
 8002dfc:	e000      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x73c>
 8002dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x834>)
 8002e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7fe ffc3 	bl	8001d96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e10:	4b3e      	ldr	r3, [pc, #248]	@ (8002f0c <HAL_ADC_ConfigChannel+0x848>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	4a3e      	ldr	r2, [pc, #248]	@ (8002f10 <HAL_ADC_ConfigChannel+0x84c>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e2a:	e002      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f9      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e38:	e054      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a35      	ldr	r2, [pc, #212]	@ (8002f14 <HAL_ADC_ConfigChannel+0x850>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d120      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d11a      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e58:	d144      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e62:	d004      	beq.n	8002e6e <HAL_ADC_ConfigChannel+0x7aa>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a26      	ldr	r2, [pc, #152]	@ (8002f04 <HAL_ADC_ConfigChannel+0x840>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x7ae>
 8002e6e:	4a26      	ldr	r2, [pc, #152]	@ (8002f08 <HAL_ADC_ConfigChannel+0x844>)
 8002e70:	e000      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x7b0>
 8002e72:	4a21      	ldr	r2, [pc, #132]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x834>)
 8002e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f7fe ff89 	bl	8001d96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e84:	e02e      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a23      	ldr	r2, [pc, #140]	@ (8002f18 <HAL_ADC_ConfigChannel+0x854>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d129      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d123      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <HAL_ADC_ConfigChannel+0x840>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01e      	beq.n	8002ee4 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eae:	d004      	beq.n	8002eba <HAL_ADC_ConfigChannel+0x7f6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a13      	ldr	r2, [pc, #76]	@ (8002f04 <HAL_ADC_ConfigChannel+0x840>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x7fa>
 8002eba:	4a13      	ldr	r2, [pc, #76]	@ (8002f08 <HAL_ADC_ConfigChannel+0x844>)
 8002ebc:	e000      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x7fc>
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x834>)
 8002ec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ec4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7fe ff63 	bl	8001d96 <LL_ADC_SetCommonPathInternalCh>
 8002ed0:	e008      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002eec:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	37d8      	adds	r7, #216	@ 0xd8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	50000700 	.word	0x50000700
 8002efc:	c3210000 	.word	0xc3210000
 8002f00:	90c00010 	.word	0x90c00010
 8002f04:	50000100 	.word	0x50000100
 8002f08:	50000300 	.word	0x50000300
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	053e2d63 	.word	0x053e2d63
 8002f14:	c7520000 	.word	0xc7520000
 8002f18:	cb840000 	.word	0xcb840000

08002f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff f8ef 	bl	8002110 <LL_ADC_IsEnabled>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d176      	bne.n	8003026 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003030 <ADC_Enable+0x114>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4a:	f043 0210 	orr.w	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f56:	f043 0201 	orr.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e062      	b.n	8003028 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f8be 	bl	80020e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f74:	d004      	beq.n	8002f80 <ADC_Enable+0x64>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2e      	ldr	r2, [pc, #184]	@ (8003034 <ADC_Enable+0x118>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d101      	bne.n	8002f84 <ADC_Enable+0x68>
 8002f80:	4b2d      	ldr	r3, [pc, #180]	@ (8003038 <ADC_Enable+0x11c>)
 8002f82:	e000      	b.n	8002f86 <ADC_Enable+0x6a>
 8002f84:	4b2d      	ldr	r3, [pc, #180]	@ (800303c <ADC_Enable+0x120>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe ff18 	bl	8001dbc <LL_ADC_GetCommonPathInternalCh>
 8002f8c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d013      	beq.n	8002fbe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f96:	4b2a      	ldr	r3, [pc, #168]	@ (8003040 <ADC_Enable+0x124>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	4a29      	ldr	r2, [pc, #164]	@ (8003044 <ADC_Enable+0x128>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	099b      	lsrs	r3, r3, #6
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fb0:	e002      	b.n	8002fb8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f9      	bne.n	8002fb2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fbe:	f7fe fecb 	bl	8001d58 <HAL_GetTick>
 8002fc2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fc4:	e028      	b.n	8003018 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff f8a0 	bl	8002110 <LL_ADC_IsEnabled>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f884 	bl	80020e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fe0:	f7fe feba 	bl	8001d58 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d914      	bls.n	8003018 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d00d      	beq.n	8003018 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003000:	f043 0210 	orr.w	r2, r3, #16
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e007      	b.n	8003028 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d1cf      	bne.n	8002fc6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	8000003f 	.word	0x8000003f
 8003034:	50000100 	.word	0x50000100
 8003038:	50000300 	.word	0x50000300
 800303c:	50000700 	.word	0x50000700
 8003040:	20000000 	.word	0x20000000
 8003044:	053e2d63 	.word	0x053e2d63

08003048 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003054:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800305e:	2b00      	cmp	r3, #0
 8003060:	d14b      	bne.n	80030fa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003066:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d021      	beq.n	80030c0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe ff47 	bl	8001f14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d032      	beq.n	80030f2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d12b      	bne.n	80030f2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11f      	bne.n	80030f2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030be:	e018      	b.n	80030f2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d111      	bne.n	80030f2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7fe fb48 	bl	8001788 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030f8:	e00e      	b.n	8003118 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff fad2 	bl	80026b0 <HAL_ADC_ErrorCallback>
}
 800310c:	e004      	b.n	8003118 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f7ff fab4 	bl	800269c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315a:	f043 0204 	orr.w	r2, r3, #4
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff faa4 	bl	80026b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003180:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800318c:	4013      	ands	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003198:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800319c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031a2:	4a04      	ldr	r2, [pc, #16]	@ (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	60d3      	str	r3, [r2, #12]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031bc:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <__NVIC_GetPriorityGrouping+0x18>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f003 0307 	and.w	r3, r3, #7
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	db0b      	blt.n	80031fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	f003 021f 	and.w	r2, r3, #31
 80031ec:	4907      	ldr	r1, [pc, #28]	@ (800320c <__NVIC_EnableIRQ+0x38>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2001      	movs	r0, #1
 80031f6:	fa00 f202 	lsl.w	r2, r0, r2
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	e000e100 	.word	0xe000e100

08003210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db0a      	blt.n	800323a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	490c      	ldr	r1, [pc, #48]	@ (800325c <__NVIC_SetPriority+0x4c>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	0112      	lsls	r2, r2, #4
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	440b      	add	r3, r1
 8003234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003238:	e00a      	b.n	8003250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4908      	ldr	r1, [pc, #32]	@ (8003260 <__NVIC_SetPriority+0x50>)
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3b04      	subs	r3, #4
 8003248:	0112      	lsls	r2, r2, #4
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	440b      	add	r3, r1
 800324e:	761a      	strb	r2, [r3, #24]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000e100 	.word	0xe000e100
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	@ 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f1c3 0307 	rsb	r3, r3, #7
 800327e:	2b04      	cmp	r3, #4
 8003280:	bf28      	it	cs
 8003282:	2304      	movcs	r3, #4
 8003284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3304      	adds	r3, #4
 800328a:	2b06      	cmp	r3, #6
 800328c:	d902      	bls.n	8003294 <NVIC_EncodePriority+0x30>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3b03      	subs	r3, #3
 8003292:	e000      	b.n	8003296 <NVIC_EncodePriority+0x32>
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	401a      	ands	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ac:	f04f 31ff 	mov.w	r1, #4294967295
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43d9      	mvns	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	4313      	orrs	r3, r2
         );
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	@ 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032dc:	d301      	bcc.n	80032e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032de:	2301      	movs	r3, #1
 80032e0:	e00f      	b.n	8003302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032e2:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <SysTick_Config+0x40>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ea:	210f      	movs	r1, #15
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f7ff ff8e 	bl	8003210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <SysTick_Config+0x40>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032fa:	4b04      	ldr	r3, [pc, #16]	@ (800330c <SysTick_Config+0x40>)
 80032fc:	2207      	movs	r2, #7
 80032fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	e000e010 	.word	0xe000e010

08003310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff29 	bl	8003170 <__NVIC_SetPriorityGrouping>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003334:	f7ff ff40 	bl	80031b8 <__NVIC_GetPriorityGrouping>
 8003338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f7ff ff90 	bl	8003264 <NVIC_EncodePriority>
 8003344:	4602      	mov	r2, r0
 8003346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff5f 	bl	8003210 <__NVIC_SetPriority>
}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff33 	bl	80031d4 <__NVIC_EnableIRQ>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ffa4 	bl	80032cc <SysTick_Config>
 8003384:	4603      	mov	r3, r0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e08d      	b.n	80034be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b47      	ldr	r3, [pc, #284]	@ (80034c8 <HAL_DMA_Init+0x138>)
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d80f      	bhi.n	80033ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b45      	ldr	r3, [pc, #276]	@ (80034cc <HAL_DMA_Init+0x13c>)
 80033b6:	4413      	add	r3, r2
 80033b8:	4a45      	ldr	r2, [pc, #276]	@ (80034d0 <HAL_DMA_Init+0x140>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	009a      	lsls	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a42      	ldr	r2, [pc, #264]	@ (80034d4 <HAL_DMA_Init+0x144>)
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80033cc:	e00e      	b.n	80033ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b40      	ldr	r3, [pc, #256]	@ (80034d8 <HAL_DMA_Init+0x148>)
 80033d6:	4413      	add	r3, r2
 80033d8:	4a3d      	ldr	r2, [pc, #244]	@ (80034d0 <HAL_DMA_Init+0x140>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	009a      	lsls	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a3c      	ldr	r2, [pc, #240]	@ (80034dc <HAL_DMA_Init+0x14c>)
 80033ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003406:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800341c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9b6 	bl	80037b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800344c:	d102      	bne.n	8003454 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003468:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d010      	beq.n	8003494 <HAL_DMA_Init+0x104>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d80c      	bhi.n	8003494 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9d6 	bl	800382c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	e008      	b.n	80034a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40020407 	.word	0x40020407
 80034cc:	bffdfff8 	.word	0xbffdfff8
 80034d0:	cccccccd 	.word	0xcccccccd
 80034d4:	40020000 	.word	0x40020000
 80034d8:	bffdfbf8 	.word	0xbffdfbf8
 80034dc:	40020400 	.word	0x40020400

080034e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_DMA_Start_IT+0x20>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e066      	b.n	80035ce <HAL_DMA_Start_IT+0xee>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d155      	bne.n	80035c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f8fb 	bl	8003734 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 020e 	orr.w	r2, r2, #14
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e00f      	b.n	8003578 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0204 	bic.w	r2, r2, #4
 8003566:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 020a 	orr.w	r2, r2, #10
 8003576:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003590:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003594:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e005      	b.n	80035cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
 80035ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2204      	movs	r2, #4
 80035f8:	409a      	lsls	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d026      	beq.n	8003650 <HAL_DMA_IRQHandler+0x7a>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d021      	beq.n	8003650 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d107      	bne.n	800362a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0204 	bic.w	r2, r2, #4
 8003628:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f003 021f 	and.w	r2, r3, #31
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2104      	movs	r1, #4
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	2b00      	cmp	r3, #0
 8003644:	d071      	beq.n	800372a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800364e:	e06c      	b.n	800372a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2202      	movs	r2, #2
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d02e      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d029      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020a 	bic.w	r2, r2, #10
 800368a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003698:	f003 021f 	and.w	r2, r3, #31
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a0:	2102      	movs	r1, #2
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d038      	beq.n	800372a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036c0:	e033      	b.n	800372a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	2208      	movs	r2, #8
 80036cc:	409a      	lsls	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d02a      	beq.n	800372c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d025      	beq.n	800372c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 020e 	bic.w	r2, r2, #14
 80036ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003702:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800372a:	bf00      	nop
 800372c:	bf00      	nop
}
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800374a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800375c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	f003 021f 	and.w	r2, r3, #31
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	2101      	movs	r1, #1
 800376c:	fa01 f202 	lsl.w	r2, r1, r2
 8003770:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b10      	cmp	r3, #16
 8003780:	d108      	bne.n	8003794 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003792:	e007      	b.n	80037a4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	60da      	str	r2, [r3, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	4b16      	ldr	r3, [pc, #88]	@ (8003818 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d802      	bhi.n	80037ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80037c4:	4b15      	ldr	r3, [pc, #84]	@ (800381c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	e001      	b.n	80037ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80037ca:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80037cc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3b08      	subs	r3, #8
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	009a      	lsls	r2, r3, #2
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	461a      	mov	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003828 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80037fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2201      	movs	r2, #1
 8003804:	409a      	lsls	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40020407 	.word	0x40020407
 800381c:	40020800 	.word	0x40020800
 8003820:	40020820 	.word	0x40020820
 8003824:	cccccccd 	.word	0xcccccccd
 8003828:	40020880 	.word	0x40020880

0800382c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	461a      	mov	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a08      	ldr	r2, [pc, #32]	@ (8003870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800384e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3b01      	subs	r3, #1
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	2201      	movs	r2, #1
 800385a:	409a      	lsls	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	1000823f 	.word	0x1000823f
 8003870:	40020940 	.word	0x40020940

08003874 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e147      	b.n	8003b16 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fe f930 	bl	8001b00 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0210 	bic.w	r2, r2, #16
 80038ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b0:	f7fe fa52 	bl	8001d58 <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80038b6:	e012      	b.n	80038de <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80038b8:	f7fe fa4e 	bl	8001d58 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b0a      	cmp	r3, #10
 80038c4:	d90b      	bls.n	80038de <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2203      	movs	r2, #3
 80038d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e11b      	b.n	8003b16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d0e5      	beq.n	80038b8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038fc:	f7fe fa2c 	bl	8001d58 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003902:	e012      	b.n	800392a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003904:	f7fe fa28 	bl	8001d58 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b0a      	cmp	r3, #10
 8003910:	d90b      	bls.n	800392a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2203      	movs	r2, #3
 8003922:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0f5      	b.n	8003b16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0e5      	beq.n	8003904 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0202 	orr.w	r2, r2, #2
 8003946:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a74      	ldr	r2, [pc, #464]	@ (8003b20 <HAL_FDCAN_Init+0x2ac>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d103      	bne.n	800395a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003952:	4a74      	ldr	r2, [pc, #464]	@ (8003b24 <HAL_FDCAN_Init+0x2b0>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7c1b      	ldrb	r3, [r3, #16]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d108      	bne.n	8003974 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003970:	619a      	str	r2, [r3, #24]
 8003972:	e007      	b.n	8003984 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003982:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7c5b      	ldrb	r3, [r3, #17]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d108      	bne.n	800399e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800399a:	619a      	str	r2, [r3, #24]
 800399c:	e007      	b.n	80039ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7c9b      	ldrb	r3, [r3, #18]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d108      	bne.n	80039c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039c4:	619a      	str	r2, [r3, #24]
 80039c6:	e007      	b.n	80039d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80039fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0210 	bic.w	r2, r2, #16
 8003a0c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d108      	bne.n	8003a28 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0204 	orr.w	r2, r2, #4
 8003a24:	619a      	str	r2, [r3, #24]
 8003a26:	e02c      	b.n	8003a82 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d028      	beq.n	8003a82 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d01c      	beq.n	8003a72 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a46:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0210 	orr.w	r2, r2, #16
 8003a56:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d110      	bne.n	8003a82 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0220 	orr.w	r2, r2, #32
 8003a6e:	619a      	str	r2, [r3, #24]
 8003a70:	e007      	b.n	8003a82 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0220 	orr.w	r2, r2, #32
 8003a80:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003a92:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003a9a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003aaa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003aac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ab6:	d115      	bne.n	8003ae4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ac6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003acc:	3b01      	subs	r3, #1
 8003ace:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003ad0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003ae0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ae2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f966 	bl	8003dcc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40006400 	.word	0x40006400
 8003b24:	40006500 	.word	0x40006500

08003b28 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d110      	bne.n	8003b5e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e006      	b.n	8003b6c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b62:	f043 0204 	orr.w	r2, r3, #4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d12c      	bne.n	8003bea <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e023      	b.n	8003bf8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f962 	bl	8003e90 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003bdc:	2201      	movs	r2, #1
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	409a      	lsls	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e006      	b.n	8003bf8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bee:	f043 0208 	orr.w	r2, r3, #8
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c12:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d003      	beq.n	8003c22 <HAL_FDCAN_ActivateNotification+0x22>
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	f040 80c8 	bne.w	8003db2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c28:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d03b      	beq.n	8003cb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d031      	beq.n	8003cb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d027      	beq.n	8003cb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01d      	beq.n	8003cb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d013      	beq.n	8003cb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d107      	bne.n	8003cc6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0201 	orr.w	r2, r2, #1
 8003cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d13b      	bne.n	8003d52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d131      	bne.n	8003d52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d127      	bne.n	8003d52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d11d      	bne.n	8003d52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d113      	bne.n	8003d52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d004      	beq.n	8003d3e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00c      	beq.n	8003d62 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0202 	orr.w	r2, r2, #2
 8003d60:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e006      	b.n	8003dc0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db6:	f043 0202 	orr.w	r2, r3, #2
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8003e88 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003dd6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8003e8c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d103      	bne.n	8003dea <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003de8:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e00:	041a      	lsls	r2, r3, #16
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e1e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	061a      	lsls	r2, r3, #24
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e005      	b.n	8003e6c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d3f3      	bcc.n	8003e60 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	4000a400 	.word	0x4000a400
 8003e8c:	40006800 	.word	0x40006800

08003e90 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	@ 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003eae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	e00a      	b.n	8003ed2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003ec4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003eca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ecc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ed0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003edc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003ee2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003ee8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	440b      	add	r3, r1
 8003f04:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e020      	b.n	8003f66 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3303      	adds	r3, #3
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3302      	adds	r3, #2
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	440b      	add	r3, r1
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003f3c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	3301      	adds	r3, #1
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	440b      	add	r3, r1
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003f4a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	440a      	add	r2, r1
 8003f52:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003f54:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	3304      	adds	r3, #4
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4a06      	ldr	r2, [pc, #24]	@ (8003f84 <FDCAN_CopyMessageToRAM+0xf4>)
 8003f6c:	5cd3      	ldrb	r3, [r2, r3]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d3d6      	bcc.n	8003f24 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	3724      	adds	r7, #36	@ 0x24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	08008fd8 	.word	0x08008fd8

08003f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f96:	e15a      	b.n	800424e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 814c 	beq.w	8004248 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d005      	beq.n	8003fc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d130      	bne.n	800402a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ffe:	2201      	movs	r2, #1
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	091b      	lsrs	r3, r3, #4
 8004014:	f003 0201 	and.w	r2, r3, #1
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b03      	cmp	r3, #3
 8004034:	d017      	beq.n	8004066 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	2203      	movs	r2, #3
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d123      	bne.n	80040ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	08da      	lsrs	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3208      	adds	r2, #8
 800407a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800407e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	220f      	movs	r2, #15
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	08da      	lsrs	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3208      	adds	r2, #8
 80040b4:	6939      	ldr	r1, [r7, #16]
 80040b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0203 	and.w	r2, r3, #3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80a6 	beq.w	8004248 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040fc:	4b5b      	ldr	r3, [pc, #364]	@ (800426c <HAL_GPIO_Init+0x2e4>)
 80040fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004100:	4a5a      	ldr	r2, [pc, #360]	@ (800426c <HAL_GPIO_Init+0x2e4>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6613      	str	r3, [r2, #96]	@ 0x60
 8004108:	4b58      	ldr	r3, [pc, #352]	@ (800426c <HAL_GPIO_Init+0x2e4>)
 800410a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004114:	4a56      	ldr	r2, [pc, #344]	@ (8004270 <HAL_GPIO_Init+0x2e8>)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	3302      	adds	r3, #2
 800411c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	220f      	movs	r2, #15
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800413e:	d01f      	beq.n	8004180 <HAL_GPIO_Init+0x1f8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a4c      	ldr	r2, [pc, #304]	@ (8004274 <HAL_GPIO_Init+0x2ec>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d019      	beq.n	800417c <HAL_GPIO_Init+0x1f4>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a4b      	ldr	r2, [pc, #300]	@ (8004278 <HAL_GPIO_Init+0x2f0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_GPIO_Init+0x1f0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a4a      	ldr	r2, [pc, #296]	@ (800427c <HAL_GPIO_Init+0x2f4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00d      	beq.n	8004174 <HAL_GPIO_Init+0x1ec>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a49      	ldr	r2, [pc, #292]	@ (8004280 <HAL_GPIO_Init+0x2f8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d007      	beq.n	8004170 <HAL_GPIO_Init+0x1e8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a48      	ldr	r2, [pc, #288]	@ (8004284 <HAL_GPIO_Init+0x2fc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <HAL_GPIO_Init+0x1e4>
 8004168:	2305      	movs	r3, #5
 800416a:	e00a      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 800416c:	2306      	movs	r3, #6
 800416e:	e008      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 8004170:	2304      	movs	r3, #4
 8004172:	e006      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 8004174:	2303      	movs	r3, #3
 8004176:	e004      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 8004178:	2302      	movs	r3, #2
 800417a:	e002      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 8004180:	2300      	movs	r3, #0
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	f002 0203 	and.w	r2, r2, #3
 8004188:	0092      	lsls	r2, r2, #2
 800418a:	4093      	lsls	r3, r2
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004192:	4937      	ldr	r1, [pc, #220]	@ (8004270 <HAL_GPIO_Init+0x2e8>)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	089b      	lsrs	r3, r3, #2
 8004198:	3302      	adds	r3, #2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041a0:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <HAL_GPIO_Init+0x300>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041c4:	4a30      	ldr	r2, [pc, #192]	@ (8004288 <HAL_GPIO_Init+0x300>)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004288 <HAL_GPIO_Init+0x300>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4013      	ands	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ee:	4a26      	ldr	r2, [pc, #152]	@ (8004288 <HAL_GPIO_Init+0x300>)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80041f4:	4b24      	ldr	r3, [pc, #144]	@ (8004288 <HAL_GPIO_Init+0x300>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004218:	4a1b      	ldr	r2, [pc, #108]	@ (8004288 <HAL_GPIO_Init+0x300>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800421e:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <HAL_GPIO_Init+0x300>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	43db      	mvns	r3, r3
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004242:	4a11      	ldr	r2, [pc, #68]	@ (8004288 <HAL_GPIO_Init+0x300>)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3301      	adds	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	f47f ae9d 	bne.w	8003f98 <HAL_GPIO_Init+0x10>
  }
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40021000 	.word	0x40021000
 8004270:	40010000 	.word	0x40010000
 8004274:	48000400 	.word	0x48000400
 8004278:	48000800 	.word	0x48000800
 800427c:	48000c00 	.word	0x48000c00
 8004280:	48001000 	.word	0x48001000
 8004284:	48001400 	.word	0x48001400
 8004288:	40010400 	.word	0x40010400

0800428c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
 8004298:	4613      	mov	r3, r2
 800429a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800429c:	787b      	ldrb	r3, [r7, #1]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042a8:	e002      	b.n	80042b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042aa:	887a      	ldrh	r2, [r7, #2]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4013      	ands	r3, r2
 80042d4:	041a      	lsls	r2, r3, #16
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	43d9      	mvns	r1, r3
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	400b      	ands	r3, r1
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	619a      	str	r2, [r3, #24]
}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d141      	bne.n	8004382 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042fe:	4b4b      	ldr	r3, [pc, #300]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430a:	d131      	bne.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800430c:	4b47      	ldr	r3, [pc, #284]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004312:	4a46      	ldr	r2, [pc, #280]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004318:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800431c:	4b43      	ldr	r3, [pc, #268]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004324:	4a41      	ldr	r2, [pc, #260]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800432a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800432c:	4b40      	ldr	r3, [pc, #256]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2232      	movs	r2, #50	@ 0x32
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	4a3f      	ldr	r2, [pc, #252]	@ (8004434 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	0c9b      	lsrs	r3, r3, #18
 800433e:	3301      	adds	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004342:	e002      	b.n	800434a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3b01      	subs	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800434a:	4b38      	ldr	r3, [pc, #224]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004356:	d102      	bne.n	800435e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f2      	bne.n	8004344 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800435e:	4b33      	ldr	r3, [pc, #204]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436a:	d158      	bne.n	800441e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e057      	b.n	8004420 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004370:	4b2e      	ldr	r3, [pc, #184]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004376:	4a2d      	ldr	r2, [pc, #180]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800437c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004380:	e04d      	b.n	800441e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004388:	d141      	bne.n	800440e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800438a:	4b28      	ldr	r3, [pc, #160]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004396:	d131      	bne.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004398:	4b24      	ldr	r3, [pc, #144]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800439e:	4a23      	ldr	r2, [pc, #140]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043a8:	4b20      	ldr	r3, [pc, #128]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043b0:	4a1e      	ldr	r2, [pc, #120]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2232      	movs	r2, #50	@ 0x32
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004434 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	0c9b      	lsrs	r3, r3, #18
 80043ca:	3301      	adds	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ce:	e002      	b.n	80043d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d6:	4b15      	ldr	r3, [pc, #84]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e2:	d102      	bne.n	80043ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f2      	bne.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ea:	4b10      	ldr	r3, [pc, #64]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f6:	d112      	bne.n	800441e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e011      	b.n	8004420 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043fc:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004402:	4a0a      	ldr	r2, [pc, #40]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800440c:	e007      	b.n	800441e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800440e:	4b07      	ldr	r3, [pc, #28]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004416:	4a05      	ldr	r2, [pc, #20]	@ (800442c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800441c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	40007000 	.word	0x40007000
 8004430:	20000000 	.word	0x20000000
 8004434:	431bde83 	.word	0x431bde83

08004438 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800443c:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4a04      	ldr	r2, [pc, #16]	@ (8004454 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004446:	6093      	str	r3, [r2, #8]
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40007000 	.word	0x40007000

08004458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e2fe      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d075      	beq.n	8004562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004476:	4b97      	ldr	r3, [pc, #604]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004480:	4b94      	ldr	r3, [pc, #592]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	d102      	bne.n	8004496 <HAL_RCC_OscConfig+0x3e>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d002      	beq.n	800449c <HAL_RCC_OscConfig+0x44>
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d10b      	bne.n	80044b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449c:	4b8d      	ldr	r3, [pc, #564]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d05b      	beq.n	8004560 <HAL_RCC_OscConfig+0x108>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d157      	bne.n	8004560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e2d9      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044bc:	d106      	bne.n	80044cc <HAL_RCC_OscConfig+0x74>
 80044be:	4b85      	ldr	r3, [pc, #532]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a84      	ldr	r2, [pc, #528]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e01d      	b.n	8004508 <HAL_RCC_OscConfig+0xb0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x98>
 80044d6:	4b7f      	ldr	r3, [pc, #508]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a7e      	ldr	r2, [pc, #504]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80044dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b7c      	ldr	r3, [pc, #496]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7b      	ldr	r2, [pc, #492]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80044e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e00b      	b.n	8004508 <HAL_RCC_OscConfig+0xb0>
 80044f0:	4b78      	ldr	r3, [pc, #480]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a77      	ldr	r2, [pc, #476]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80044f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	4b75      	ldr	r3, [pc, #468]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a74      	ldr	r2, [pc, #464]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d013      	beq.n	8004538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd fc22 	bl	8001d58 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004518:	f7fd fc1e 	bl	8001d58 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	@ 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e29e      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452a:	4b6a      	ldr	r3, [pc, #424]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCC_OscConfig+0xc0>
 8004536:	e014      	b.n	8004562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd fc0e 	bl	8001d58 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004540:	f7fd fc0a 	bl	8001d58 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	@ 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e28a      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004552:	4b60      	ldr	r3, [pc, #384]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0xe8>
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d075      	beq.n	800465a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800456e:	4b59      	ldr	r3, [pc, #356]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004578:	4b56      	ldr	r3, [pc, #344]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b0c      	cmp	r3, #12
 8004586:	d102      	bne.n	800458e <HAL_RCC_OscConfig+0x136>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d002      	beq.n	8004594 <HAL_RCC_OscConfig+0x13c>
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d11f      	bne.n	80045d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004594:	4b4f      	ldr	r3, [pc, #316]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_OscConfig+0x154>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e25d      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b49      	ldr	r3, [pc, #292]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	4946      	ldr	r1, [pc, #280]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045c0:	4b45      	ldr	r3, [pc, #276]	@ (80046d8 <HAL_RCC_OscConfig+0x280>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fd fb7b 	bl	8001cc0 <HAL_InitTick>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d043      	beq.n	8004658 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e249      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d023      	beq.n	8004624 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045dc:	4b3d      	ldr	r3, [pc, #244]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a3c      	ldr	r2, [pc, #240]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80045e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd fbb6 	bl	8001d58 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f0:	f7fd fbb2 	bl	8001d58 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e232      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004602:	4b34      	ldr	r3, [pc, #208]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460e:	4b31      	ldr	r3, [pc, #196]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	492d      	ldr	r1, [pc, #180]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
 8004622:	e01a      	b.n	800465a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004624:	4b2b      	ldr	r3, [pc, #172]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2a      	ldr	r2, [pc, #168]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 800462a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800462e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fd fb92 	bl	8001d58 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004638:	f7fd fb8e 	bl	8001d58 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e20e      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800464a:	4b22      	ldr	r3, [pc, #136]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x1e0>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d041      	beq.n	80046ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01c      	beq.n	80046a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466e:	4b19      	ldr	r3, [pc, #100]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004674:	4a17      	ldr	r2, [pc, #92]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fd fb6b 	bl	8001d58 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004686:	f7fd fb67 	bl	8001d58 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e1e7      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004698:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 800469a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0ef      	beq.n	8004686 <HAL_RCC_OscConfig+0x22e>
 80046a6:	e020      	b.n	80046ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a8:	4b0a      	ldr	r3, [pc, #40]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80046aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ae:	4a09      	ldr	r2, [pc, #36]	@ (80046d4 <HAL_RCC_OscConfig+0x27c>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fd fb4e 	bl	8001d58 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046be:	e00d      	b.n	80046dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fd fb4a 	bl	8001d58 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d906      	bls.n	80046dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e1ca      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000
 80046d8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80046de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ea      	bne.n	80046c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80a6 	beq.w	8004844 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f8:	2300      	movs	r3, #0
 80046fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046fc:	4b84      	ldr	r3, [pc, #528]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_OscConfig+0x2b4>
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <HAL_RCC_OscConfig+0x2b6>
 800470c:	2300      	movs	r3, #0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	4b7f      	ldr	r3, [pc, #508]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004716:	4a7e      	ldr	r2, [pc, #504]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471c:	6593      	str	r3, [r2, #88]	@ 0x58
 800471e:	4b7c      	ldr	r3, [pc, #496]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 8004720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800472a:	2301      	movs	r3, #1
 800472c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472e:	4b79      	ldr	r3, [pc, #484]	@ (8004914 <HAL_RCC_OscConfig+0x4bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d118      	bne.n	800476c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800473a:	4b76      	ldr	r3, [pc, #472]	@ (8004914 <HAL_RCC_OscConfig+0x4bc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a75      	ldr	r2, [pc, #468]	@ (8004914 <HAL_RCC_OscConfig+0x4bc>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004746:	f7fd fb07 	bl	8001d58 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474e:	f7fd fb03 	bl	8001d58 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e183      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004760:	4b6c      	ldr	r3, [pc, #432]	@ (8004914 <HAL_RCC_OscConfig+0x4bc>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d108      	bne.n	8004786 <HAL_RCC_OscConfig+0x32e>
 8004774:	4b66      	ldr	r3, [pc, #408]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	4a65      	ldr	r2, [pc, #404]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004784:	e024      	b.n	80047d0 <HAL_RCC_OscConfig+0x378>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b05      	cmp	r3, #5
 800478c:	d110      	bne.n	80047b0 <HAL_RCC_OscConfig+0x358>
 800478e:	4b60      	ldr	r3, [pc, #384]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004794:	4a5e      	ldr	r2, [pc, #376]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800479e:	4b5c      	ldr	r3, [pc, #368]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047ae:	e00f      	b.n	80047d0 <HAL_RCC_OscConfig+0x378>
 80047b0:	4b57      	ldr	r3, [pc, #348]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	4a56      	ldr	r2, [pc, #344]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047c0:	4b53      	ldr	r3, [pc, #332]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	4a52      	ldr	r2, [pc, #328]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d016      	beq.n	8004806 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d8:	f7fd fabe 	bl	8001d58 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047de:	e00a      	b.n	80047f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e0:	f7fd faba 	bl	8001d58 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e138      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f6:	4b46      	ldr	r3, [pc, #280]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ed      	beq.n	80047e0 <HAL_RCC_OscConfig+0x388>
 8004804:	e015      	b.n	8004832 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004806:	f7fd faa7 	bl	8001d58 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800480c:	e00a      	b.n	8004824 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fd faa3 	bl	8001d58 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e121      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004824:	4b3a      	ldr	r3, [pc, #232]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1ed      	bne.n	800480e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004832:	7ffb      	ldrb	r3, [r7, #31]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004838:	4b35      	ldr	r3, [pc, #212]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483c:	4a34      	ldr	r2, [pc, #208]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 800483e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004842:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d03c      	beq.n	80048ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01c      	beq.n	8004892 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004858:	4b2d      	ldr	r3, [pc, #180]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 800485a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800485e:	4a2c      	ldr	r2, [pc, #176]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fd fa76 	bl	8001d58 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004870:	f7fd fa72 	bl	8001d58 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0f2      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004882:	4b23      	ldr	r3, [pc, #140]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 8004884:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ef      	beq.n	8004870 <HAL_RCC_OscConfig+0x418>
 8004890:	e01b      	b.n	80048ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004892:	4b1f      	ldr	r3, [pc, #124]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 8004894:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004898:	4a1d      	ldr	r2, [pc, #116]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fd fa59 	bl	8001d58 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048aa:	f7fd fa55 	bl	8001d58 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e0d5      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048bc:	4b14      	ldr	r3, [pc, #80]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80048be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1ef      	bne.n	80048aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80c9 	beq.w	8004a66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b0c      	cmp	r3, #12
 80048de:	f000 8083 	beq.w	80049e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d15e      	bne.n	80049a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ea:	4b09      	ldr	r3, [pc, #36]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a08      	ldr	r2, [pc, #32]	@ (8004910 <HAL_RCC_OscConfig+0x4b8>)
 80048f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7fd fa2f 	bl	8001d58 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048fc:	e00c      	b.n	8004918 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fe:	f7fd fa2b 	bl	8001d58 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d905      	bls.n	8004918 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e0ab      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
 8004910:	40021000 	.word	0x40021000
 8004914:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004918:	4b55      	ldr	r3, [pc, #340]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ec      	bne.n	80048fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004924:	4b52      	ldr	r3, [pc, #328]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	4b52      	ldr	r3, [pc, #328]	@ (8004a74 <HAL_RCC_OscConfig+0x61c>)
 800492a:	4013      	ands	r3, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6a11      	ldr	r1, [r2, #32]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004934:	3a01      	subs	r2, #1
 8004936:	0112      	lsls	r2, r2, #4
 8004938:	4311      	orrs	r1, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800493e:	0212      	lsls	r2, r2, #8
 8004940:	4311      	orrs	r1, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004946:	0852      	lsrs	r2, r2, #1
 8004948:	3a01      	subs	r2, #1
 800494a:	0552      	lsls	r2, r2, #21
 800494c:	4311      	orrs	r1, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004952:	0852      	lsrs	r2, r2, #1
 8004954:	3a01      	subs	r2, #1
 8004956:	0652      	lsls	r2, r2, #25
 8004958:	4311      	orrs	r1, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800495e:	06d2      	lsls	r2, r2, #27
 8004960:	430a      	orrs	r2, r1
 8004962:	4943      	ldr	r1, [pc, #268]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 8004964:	4313      	orrs	r3, r2
 8004966:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004968:	4b41      	ldr	r3, [pc, #260]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a40      	ldr	r2, [pc, #256]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 800496e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004972:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004974:	4b3e      	ldr	r3, [pc, #248]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a3d      	ldr	r2, [pc, #244]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 800497a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800497e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd f9ea 	bl	8001d58 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7fd f9e6 	bl	8001d58 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e066      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499a:	4b35      	ldr	r3, [pc, #212]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x530>
 80049a6:	e05e      	b.n	8004a66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b31      	ldr	r3, [pc, #196]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a30      	ldr	r2, [pc, #192]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 80049ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd f9d0 	bl	8001d58 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fd f9cc 	bl	8001d58 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e04c      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ce:	4b28      	ldr	r3, [pc, #160]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049da:	4b25      	ldr	r3, [pc, #148]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	4924      	ldr	r1, [pc, #144]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 80049e0:	4b25      	ldr	r3, [pc, #148]	@ (8004a78 <HAL_RCC_OscConfig+0x620>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	60cb      	str	r3, [r1, #12]
 80049e6:	e03e      	b.n	8004a66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e039      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004a70 <HAL_RCC_OscConfig+0x618>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f003 0203 	and.w	r2, r3, #3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d12c      	bne.n	8004a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	3b01      	subs	r3, #1
 8004a14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d123      	bne.n	8004a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d11b      	bne.n	8004a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d113      	bne.n	8004a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	3b01      	subs	r3, #1
 8004a48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d109      	bne.n	8004a62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d001      	beq.n	8004a66 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021000 	.word	0x40021000
 8004a74:	019f800c 	.word	0x019f800c
 8004a78:	feeefffc 	.word	0xfeeefffc

08004a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e11e      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a94:	4b91      	ldr	r3, [pc, #580]	@ (8004cdc <HAL_RCC_ClockConfig+0x260>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d910      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b8e      	ldr	r3, [pc, #568]	@ (8004cdc <HAL_RCC_ClockConfig+0x260>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 020f 	bic.w	r2, r3, #15
 8004aaa:	498c      	ldr	r1, [pc, #560]	@ (8004cdc <HAL_RCC_ClockConfig+0x260>)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b8a      	ldr	r3, [pc, #552]	@ (8004cdc <HAL_RCC_ClockConfig+0x260>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e106      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d073      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d129      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad8:	4b81      	ldr	r3, [pc, #516]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0f4      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ae8:	f000 f966 	bl	8004db8 <RCC_GetSysClockFreqFromPLLSource>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4a7c      	ldr	r2, [pc, #496]	@ (8004ce4 <HAL_RCC_ClockConfig+0x268>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d93f      	bls.n	8004b76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004af6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d033      	beq.n	8004b76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d12f      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b16:	4b72      	ldr	r3, [pc, #456]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b1e:	4a70      	ldr	r2, [pc, #448]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b26:	2380      	movs	r3, #128	@ 0x80
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e024      	b.n	8004b76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d107      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b34:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0c6      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b44:	4b66      	ldr	r3, [pc, #408]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0be      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b54:	f000 f8ce 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8004b58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4a61      	ldr	r2, [pc, #388]	@ (8004ce4 <HAL_RCC_ClockConfig+0x268>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d909      	bls.n	8004b76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b62:	4b5f      	ldr	r3, [pc, #380]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b6a:	4a5d      	ldr	r2, [pc, #372]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b72:	2380      	movs	r3, #128	@ 0x80
 8004b74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b76:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f023 0203 	bic.w	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4957      	ldr	r1, [pc, #348]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fd f8e6 	bl	8001d58 <HAL_GetTick>
 8004b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8e:	e00a      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b90:	f7fd f8e2 	bl	8001d58 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e095      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 020c 	and.w	r2, r3, #12
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d1eb      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d023      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd0:	4b43      	ldr	r3, [pc, #268]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4a42      	ldr	r2, [pc, #264]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004bd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004be8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004bf2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf8:	4b39      	ldr	r3, [pc, #228]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4936      	ldr	r1, [pc, #216]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b80      	cmp	r3, #128	@ 0x80
 8004c10:	d105      	bne.n	8004c1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c12:	4b33      	ldr	r3, [pc, #204]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	4a32      	ldr	r2, [pc, #200]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004c18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8004cdc <HAL_RCC_ClockConfig+0x260>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d21d      	bcs.n	8004c68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cdc <HAL_RCC_ClockConfig+0x260>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f023 020f 	bic.w	r2, r3, #15
 8004c34:	4929      	ldr	r1, [pc, #164]	@ (8004cdc <HAL_RCC_ClockConfig+0x260>)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c3c:	f7fd f88c 	bl	8001d58 <HAL_GetTick>
 8004c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c44:	f7fd f888 	bl	8001d58 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e03b      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <HAL_RCC_ClockConfig+0x260>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d1ed      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4917      	ldr	r1, [pc, #92]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c92:	4b13      	ldr	r3, [pc, #76]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	490f      	ldr	r1, [pc, #60]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ca6:	f000 f825 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8004caa:	4602      	mov	r2, r0
 8004cac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <HAL_RCC_ClockConfig+0x264>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	490c      	ldr	r1, [pc, #48]	@ (8004ce8 <HAL_RCC_ClockConfig+0x26c>)
 8004cb8:	5ccb      	ldrb	r3, [r1, r3]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cec <HAL_RCC_ClockConfig+0x270>)
 8004cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <HAL_RCC_ClockConfig+0x274>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fc fff8 	bl	8001cc0 <HAL_InitTick>
 8004cd0:	4603      	mov	r3, r0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40022000 	.word	0x40022000
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	04c4b400 	.word	0x04c4b400
 8004ce8:	08008fc8 	.word	0x08008fc8
 8004cec:	20000000 	.word	0x20000000
 8004cf0:	20000004 	.word	0x20000004

08004cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d102      	bne.n	8004d0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d06:	4b2a      	ldr	r3, [pc, #168]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	e047      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d0c:	4b27      	ldr	r3, [pc, #156]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 030c 	and.w	r3, r3, #12
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d102      	bne.n	8004d1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d18:	4b26      	ldr	r3, [pc, #152]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	e03e      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d1e:	4b23      	ldr	r3, [pc, #140]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b0c      	cmp	r3, #12
 8004d28:	d136      	bne.n	8004d98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d2a:	4b20      	ldr	r3, [pc, #128]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d34:	4b1d      	ldr	r3, [pc, #116]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	3301      	adds	r3, #1
 8004d40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d10c      	bne.n	8004d62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d48:	4a1a      	ldr	r2, [pc, #104]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	4a16      	ldr	r2, [pc, #88]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d52:	68d2      	ldr	r2, [r2, #12]
 8004d54:	0a12      	lsrs	r2, r2, #8
 8004d56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	617b      	str	r3, [r7, #20]
      break;
 8004d60:	e00c      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d62:	4a13      	ldr	r2, [pc, #76]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6a:	4a10      	ldr	r2, [pc, #64]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d6c:	68d2      	ldr	r2, [r2, #12]
 8004d6e:	0a12      	lsrs	r2, r2, #8
 8004d70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d74:	fb02 f303 	mul.w	r3, r2, r3
 8004d78:	617b      	str	r3, [r7, #20]
      break;
 8004d7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	0e5b      	lsrs	r3, r3, #25
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	3301      	adds	r3, #1
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	e001      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d9c:	693b      	ldr	r3, [r7, #16]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	00f42400 	.word	0x00f42400
 8004db4:	016e3600 	.word	0x016e3600

08004db8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8004e38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d10c      	bne.n	8004df6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ddc:	4a17      	ldr	r2, [pc, #92]	@ (8004e3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	4a14      	ldr	r2, [pc, #80]	@ (8004e38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004de6:	68d2      	ldr	r2, [r2, #12]
 8004de8:	0a12      	lsrs	r2, r2, #8
 8004dea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	617b      	str	r3, [r7, #20]
    break;
 8004df4:	e00c      	b.n	8004e10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df6:	4a12      	ldr	r2, [pc, #72]	@ (8004e40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8004e38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e00:	68d2      	ldr	r2, [r2, #12]
 8004e02:	0a12      	lsrs	r2, r2, #8
 8004e04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e08:	fb02 f303 	mul.w	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]
    break;
 8004e0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e10:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	0e5b      	lsrs	r3, r3, #25
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e2a:	687b      	ldr	r3, [r7, #4]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	016e3600 	.word	0x016e3600
 8004e40:	00f42400 	.word	0x00f42400

08004e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e50:	2300      	movs	r3, #0
 8004e52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8098 	beq.w	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e62:	2300      	movs	r3, #0
 8004e64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e66:	4b43      	ldr	r3, [pc, #268]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10d      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e72:	4b40      	ldr	r3, [pc, #256]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e76:	4a3f      	ldr	r2, [pc, #252]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a39      	ldr	r2, [pc, #228]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e9a:	f7fc ff5d 	bl	8001d58 <HAL_GetTick>
 8004e9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ea0:	e009      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea2:	f7fc ff59 	bl	8001d58 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d902      	bls.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	74fb      	strb	r3, [r7, #19]
        break;
 8004eb4:	e005      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eb6:	4b30      	ldr	r3, [pc, #192]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0ef      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ec2:	7cfb      	ldrb	r3, [r7, #19]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d159      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01e      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d019      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ee4:	4b23      	ldr	r3, [pc, #140]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ef0:	4b20      	ldr	r3, [pc, #128]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f00:	4b1c      	ldr	r3, [pc, #112]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f10:	4a18      	ldr	r2, [pc, #96]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d016      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fc ff19 	bl	8001d58 <HAL_GetTick>
 8004f26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f28:	e00b      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7fc ff15 	bl	8001d58 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d902      	bls.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	74fb      	strb	r3, [r7, #19]
            break;
 8004f40:	e006      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f42:	4b0c      	ldr	r3, [pc, #48]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0ec      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f56:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f64:	4903      	ldr	r1, [pc, #12]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f6c:	e008      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	74bb      	strb	r3, [r7, #18]
 8004f72:	e005      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f80:	7c7b      	ldrb	r3, [r7, #17]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d105      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f86:	4ba7      	ldr	r3, [pc, #668]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8a:	4aa6      	ldr	r2, [pc, #664]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f9e:	4ba1      	ldr	r3, [pc, #644]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	f023 0203 	bic.w	r2, r3, #3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	499d      	ldr	r1, [pc, #628]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fc0:	4b98      	ldr	r3, [pc, #608]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc6:	f023 020c 	bic.w	r2, r3, #12
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	4995      	ldr	r1, [pc, #596]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fe2:	4b90      	ldr	r3, [pc, #576]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	498c      	ldr	r1, [pc, #560]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005004:	4b87      	ldr	r3, [pc, #540]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	4984      	ldr	r1, [pc, #528]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005026:	4b7f      	ldr	r3, [pc, #508]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	497b      	ldr	r1, [pc, #492]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005048:	4b76      	ldr	r3, [pc, #472]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	4973      	ldr	r1, [pc, #460]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800506a:	4b6e      	ldr	r3, [pc, #440]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005070:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	496a      	ldr	r1, [pc, #424]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800508c:	4b65      	ldr	r3, [pc, #404]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005092:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	4962      	ldr	r1, [pc, #392]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050ae:	4b5d      	ldr	r3, [pc, #372]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050bc:	4959      	ldr	r1, [pc, #356]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050d0:	4b54      	ldr	r3, [pc, #336]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	4951      	ldr	r1, [pc, #324]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d015      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050f2:	4b4c      	ldr	r3, [pc, #304]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005100:	4948      	ldr	r1, [pc, #288]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005110:	d105      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005112:	4b44      	ldr	r3, [pc, #272]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	4a43      	ldr	r2, [pc, #268]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005118:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800511c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005126:	2b00      	cmp	r3, #0
 8005128:	d015      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800512a:	4b3e      	ldr	r3, [pc, #248]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005130:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005138:	493a      	ldr	r1, [pc, #232]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005148:	d105      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800514a:	4b36      	ldr	r3, [pc, #216]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	4a35      	ldr	r2, [pc, #212]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005150:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005154:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d015      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005162:	4b30      	ldr	r3, [pc, #192]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005168:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005170:	492c      	ldr	r1, [pc, #176]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005180:	d105      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005182:	4b28      	ldr	r3, [pc, #160]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	4a27      	ldr	r2, [pc, #156]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800518c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d015      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800519a:	4b22      	ldr	r3, [pc, #136]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	491e      	ldr	r1, [pc, #120]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051b8:	d105      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	4a19      	ldr	r2, [pc, #100]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051c4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d015      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051d2:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e0:	4910      	ldr	r1, [pc, #64]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051f0:	d105      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d018      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800520a:	4b06      	ldr	r3, [pc, #24]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005210:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	4902      	ldr	r1, [pc, #8]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	e001      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005224:	40021000 	.word	0x40021000
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800522e:	d105      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005230:	4b21      	ldr	r3, [pc, #132]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a20      	ldr	r2, [pc, #128]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005256:	4918      	ldr	r1, [pc, #96]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d105      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005268:	4b13      	ldr	r3, [pc, #76]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a12      	ldr	r2, [pc, #72]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800526e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005272:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005280:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528e:	490a      	ldr	r1, [pc, #40]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800529a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800529e:	d105      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a0:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80052a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000

080052bc <__NVIC_SetPriority>:
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	6039      	str	r1, [r7, #0]
 80052c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	db0a      	blt.n	80052e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	490c      	ldr	r1, [pc, #48]	@ (8005308 <__NVIC_SetPriority+0x4c>)
 80052d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052da:	0112      	lsls	r2, r2, #4
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	440b      	add	r3, r1
 80052e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80052e4:	e00a      	b.n	80052fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	4908      	ldr	r1, [pc, #32]	@ (800530c <__NVIC_SetPriority+0x50>)
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	3b04      	subs	r3, #4
 80052f4:	0112      	lsls	r2, r2, #4
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	440b      	add	r3, r1
 80052fa:	761a      	strb	r2, [r3, #24]
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	e000e100 	.word	0xe000e100
 800530c:	e000ed00 	.word	0xe000ed00

08005310 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005314:	2100      	movs	r1, #0
 8005316:	f06f 0004 	mvn.w	r0, #4
 800531a:	f7ff ffcf 	bl	80052bc <__NVIC_SetPriority>
#endif
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800532a:	f3ef 8305 	mrs	r3, IPSR
 800532e:	603b      	str	r3, [r7, #0]
  return(result);
 8005330:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005336:	f06f 0305 	mvn.w	r3, #5
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	e00c      	b.n	8005358 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800533e:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <osKernelInitialize+0x44>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d105      	bne.n	8005352 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005346:	4b08      	ldr	r3, [pc, #32]	@ (8005368 <osKernelInitialize+0x44>)
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800534c:	2300      	movs	r3, #0
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	e002      	b.n	8005358 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005352:	f04f 33ff 	mov.w	r3, #4294967295
 8005356:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005358:	687b      	ldr	r3, [r7, #4]
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	200005a8 	.word	0x200005a8

0800536c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005372:	f3ef 8305 	mrs	r3, IPSR
 8005376:	603b      	str	r3, [r7, #0]
  return(result);
 8005378:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <osKernelStart+0x1a>
    stat = osErrorISR;
 800537e:	f06f 0305 	mvn.w	r3, #5
 8005382:	607b      	str	r3, [r7, #4]
 8005384:	e010      	b.n	80053a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005386:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <osKernelStart+0x48>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d109      	bne.n	80053a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800538e:	f7ff ffbf 	bl	8005310 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005392:	4b08      	ldr	r3, [pc, #32]	@ (80053b4 <osKernelStart+0x48>)
 8005394:	2202      	movs	r2, #2
 8005396:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005398:	f001 f87a 	bl	8006490 <vTaskStartScheduler>
      stat = osOK;
 800539c:	2300      	movs	r3, #0
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	e002      	b.n	80053a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295
 80053a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053a8:	687b      	ldr	r3, [r7, #4]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	200005a8 	.word	0x200005a8

080053b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	@ 0x38
 80053bc:	af04      	add	r7, sp, #16
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c8:	f3ef 8305 	mrs	r3, IPSR
 80053cc:	617b      	str	r3, [r7, #20]
  return(result);
 80053ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d17e      	bne.n	80054d2 <osThreadNew+0x11a>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d07b      	beq.n	80054d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053da:	2380      	movs	r3, #128	@ 0x80
 80053dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053de:	2318      	movs	r3, #24
 80053e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80053e6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d045      	beq.n	800547e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <osThreadNew+0x48>
        name = attr->name;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <osThreadNew+0x6e>
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	2b38      	cmp	r3, #56	@ 0x38
 8005418:	d805      	bhi.n	8005426 <osThreadNew+0x6e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <osThreadNew+0x72>
        return (NULL);
 8005426:	2300      	movs	r3, #0
 8005428:	e054      	b.n	80054d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	089b      	lsrs	r3, r3, #2
 8005438:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <osThreadNew+0xa8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b5b      	cmp	r3, #91	@ 0x5b
 8005448:	d90a      	bls.n	8005460 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800544e:	2b00      	cmp	r3, #0
 8005450:	d006      	beq.n	8005460 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <osThreadNew+0xa8>
        mem = 1;
 800545a:	2301      	movs	r3, #1
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	e010      	b.n	8005482 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10c      	bne.n	8005482 <osThreadNew+0xca>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d108      	bne.n	8005482 <osThreadNew+0xca>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d104      	bne.n	8005482 <osThreadNew+0xca>
          mem = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	e001      	b.n	8005482 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d110      	bne.n	80054aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005490:	9202      	str	r2, [sp, #8]
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6a3a      	ldr	r2, [r7, #32]
 800549c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fe1a 	bl	80060d8 <xTaskCreateStatic>
 80054a4:	4603      	mov	r3, r0
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e013      	b.n	80054d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d110      	bne.n	80054d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	f107 0310 	add.w	r3, r7, #16
 80054b8:	9301      	str	r3, [sp, #4]
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 fe68 	bl	8006198 <xTaskCreate>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d001      	beq.n	80054d2 <osThreadNew+0x11a>
            hTask = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054d2:	693b      	ldr	r3, [r7, #16]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3728      	adds	r7, #40	@ 0x28
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e4:	f3ef 8305 	mrs	r3, IPSR
 80054e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80054ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <osDelay+0x1c>
    stat = osErrorISR;
 80054f0:	f06f 0305 	mvn.w	r3, #5
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	e007      	b.n	8005508 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 ff8e 	bl	8006424 <vTaskDelay>
    }
  }

  return (stat);
 8005508:	68fb      	ldr	r3, [r7, #12]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a07      	ldr	r2, [pc, #28]	@ (8005540 <vApplicationGetIdleTaskMemory+0x2c>)
 8005524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4a06      	ldr	r2, [pc, #24]	@ (8005544 <vApplicationGetIdleTaskMemory+0x30>)
 800552a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2280      	movs	r2, #128	@ 0x80
 8005530:	601a      	str	r2, [r3, #0]
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	200005ac 	.word	0x200005ac
 8005544:	20000608 	.word	0x20000608

08005548 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a07      	ldr	r2, [pc, #28]	@ (8005574 <vApplicationGetTimerTaskMemory+0x2c>)
 8005558:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4a06      	ldr	r2, [pc, #24]	@ (8005578 <vApplicationGetTimerTaskMemory+0x30>)
 800555e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005566:	601a      	str	r2, [r3, #0]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	20000808 	.word	0x20000808
 8005578:	20000864 	.word	0x20000864

0800557c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f103 0208 	add.w	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f103 0208 	add.w	r2, r3, #8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f103 0208 	add.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d103      	bne.n	800563e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e00c      	b.n	8005658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3308      	adds	r3, #8
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e002      	b.n	800564c <vListInsert+0x2e>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d2f6      	bcs.n	8005646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6892      	ldr	r2, [r2, #8]
 80056a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6852      	ldr	r2, [r2, #4]
 80056b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d103      	bne.n	80056c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	1e5a      	subs	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005710:	f002 f962 	bl	80079d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571c:	68f9      	ldr	r1, [r7, #12]
 800571e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	441a      	add	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005740:	3b01      	subs	r3, #1
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	441a      	add	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	22ff      	movs	r2, #255	@ 0xff
 8005754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	22ff      	movs	r2, #255	@ 0xff
 800575c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d114      	bne.n	8005790 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01a      	beq.n	80057a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3310      	adds	r3, #16
 8005772:	4618      	mov	r0, r3
 8005774:	f001 f91a 	bl	80069ac <xTaskRemoveFromEventList>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d012      	beq.n	80057a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800577e:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <xQueueGenericReset+0xd0>)
 8005780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	e009      	b.n	80057a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3310      	adds	r3, #16
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fef1 	bl	800557c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3324      	adds	r3, #36	@ 0x24
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff feec 	bl	800557c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057a4:	f002 f94a 	bl	8007a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057a8:	2301      	movs	r3, #1
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08e      	sub	sp, #56	@ 0x38
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	e7fd      	b.n	80057e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10b      	bne.n	8005802 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057fc:	bf00      	nop
 80057fe:	bf00      	nop
 8005800:	e7fd      	b.n	80057fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <xQueueGenericCreateStatic+0x56>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <xQueueGenericCreateStatic+0x5a>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <xQueueGenericCreateStatic+0x5c>
 8005812:	2300      	movs	r3, #0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10b      	bne.n	8005830 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	623b      	str	r3, [r7, #32]
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	e7fd      	b.n	800582c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d102      	bne.n	800583c <xQueueGenericCreateStatic+0x84>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <xQueueGenericCreateStatic+0x88>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <xQueueGenericCreateStatic+0x8a>
 8005840:	2300      	movs	r3, #0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	61fb      	str	r3, [r7, #28]
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	e7fd      	b.n	800585a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800585e:	2350      	movs	r3, #80	@ 0x50
 8005860:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b50      	cmp	r3, #80	@ 0x50
 8005866:	d00b      	beq.n	8005880 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	61bb      	str	r3, [r7, #24]
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	e7fd      	b.n	800587c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005880:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800588c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005894:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f805 	bl	80058b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3730      	adds	r7, #48	@ 0x30
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d103      	bne.n	80058ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e002      	b.n	80058d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058e0:	2101      	movs	r1, #1
 80058e2:	69b8      	ldr	r0, [r7, #24]
 80058e4:	f7ff fefe 	bl	80056e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	78fa      	ldrb	r2, [r7, #3]
 80058ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08e      	sub	sp, #56	@ 0x38
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005906:	2300      	movs	r3, #0
 8005908:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <xQueueGenericSend+0x34>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	e7fd      	b.n	8005928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d103      	bne.n	800593a <xQueueGenericSend+0x42>
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <xQueueGenericSend+0x46>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <xQueueGenericSend+0x48>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10b      	bne.n	800595c <xQueueGenericSend+0x64>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	e7fd      	b.n	8005958 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d103      	bne.n	800596a <xQueueGenericSend+0x72>
 8005962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <xQueueGenericSend+0x76>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <xQueueGenericSend+0x78>
 800596e:	2300      	movs	r3, #0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <xQueueGenericSend+0x94>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	623b      	str	r3, [r7, #32]
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800598c:	f001 f9de 	bl	8006d4c <xTaskGetSchedulerState>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d102      	bne.n	800599c <xQueueGenericSend+0xa4>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <xQueueGenericSend+0xa8>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <xQueueGenericSend+0xaa>
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <xQueueGenericSend+0xc6>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	61fb      	str	r3, [r7, #28]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059be:	f002 f80b 	bl	80079d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <xQueueGenericSend+0xdc>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d129      	bne.n	8005a28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059da:	f000 fa0f 	bl	8005dfc <prvCopyDataToQueue>
 80059de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d010      	beq.n	8005a0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	3324      	adds	r3, #36	@ 0x24
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 ffdd 	bl	80069ac <xTaskRemoveFromEventList>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d013      	beq.n	8005a20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059f8:	4b3f      	ldr	r3, [pc, #252]	@ (8005af8 <xQueueGenericSend+0x200>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	e00a      	b.n	8005a20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a10:	4b39      	ldr	r3, [pc, #228]	@ (8005af8 <xQueueGenericSend+0x200>)
 8005a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a20:	f002 f80c 	bl	8007a3c <vPortExitCritical>
				return pdPASS;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e063      	b.n	8005af0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a2e:	f002 f805 	bl	8007a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e05c      	b.n	8005af0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a3c:	f107 0314 	add.w	r3, r7, #20
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f817 	bl	8006a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a46:	2301      	movs	r3, #1
 8005a48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a4a:	f001 fff7 	bl	8007a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a4e:	f000 fd87 	bl	8006560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a52:	f001 ffc1 	bl	80079d8 <vPortEnterCritical>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a5c:	b25b      	sxtb	r3, r3
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d103      	bne.n	8005a6c <xQueueGenericSend+0x174>
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a72:	b25b      	sxtb	r3, r3
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a78:	d103      	bne.n	8005a82 <xQueueGenericSend+0x18a>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a82:	f001 ffdb 	bl	8007a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a86:	1d3a      	adds	r2, r7, #4
 8005a88:	f107 0314 	add.w	r3, r7, #20
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 f806 	bl	8006aa0 <xTaskCheckForTimeOut>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d124      	bne.n	8005ae4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a9c:	f000 faa6 	bl	8005fec <prvIsQueueFull>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d018      	beq.n	8005ad8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	3310      	adds	r3, #16
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 ff2a 	bl	8006908 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ab6:	f000 fa31 	bl	8005f1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005aba:	f000 fd5f 	bl	800657c <xTaskResumeAll>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f47f af7c 	bne.w	80059be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <xQueueGenericSend+0x200>)
 8005ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	e772      	b.n	80059be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ada:	f000 fa1f 	bl	8005f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ade:	f000 fd4d 	bl	800657c <xTaskResumeAll>
 8005ae2:	e76c      	b.n	80059be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ae6:	f000 fa19 	bl	8005f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aea:	f000 fd47 	bl	800657c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3738      	adds	r7, #56	@ 0x38
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b090      	sub	sp, #64	@ 0x40
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10b      	bne.n	8005b2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <xQueueGenericSendFromISR+0x3e>
 8005b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <xQueueGenericSendFromISR+0x42>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <xQueueGenericSendFromISR+0x44>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10b      	bne.n	8005b5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
 8005b5a:	e7fd      	b.n	8005b58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d103      	bne.n	8005b6a <xQueueGenericSendFromISR+0x6e>
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <xQueueGenericSendFromISR+0x72>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <xQueueGenericSendFromISR+0x74>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	623b      	str	r3, [r7, #32]
}
 8005b86:	bf00      	nop
 8005b88:	bf00      	nop
 8005b8a:	e7fd      	b.n	8005b88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b8c:	f002 f804 	bl	8007b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b90:	f3ef 8211 	mrs	r2, BASEPRI
 8005b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	61fa      	str	r2, [r7, #28]
 8005ba6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005baa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d302      	bcc.n	8005bbe <xQueueGenericSendFromISR+0xc2>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d12f      	bne.n	8005c1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005bd4:	f000 f912 	bl	8005dfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bd8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d112      	bne.n	8005c08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d016      	beq.n	8005c18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bec:	3324      	adds	r3, #36	@ 0x24
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fedc 	bl	80069ac <xTaskRemoveFromEventList>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00e      	beq.n	8005c18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e007      	b.n	8005c18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	b25a      	sxtb	r2, r3
 8005c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005c1c:	e001      	b.n	8005c22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3740      	adds	r7, #64	@ 0x40
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08c      	sub	sp, #48	@ 0x30
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10b      	bne.n	8005c6a <xQueueReceive+0x32>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	623b      	str	r3, [r7, #32]
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d103      	bne.n	8005c78 <xQueueReceive+0x40>
 8005c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <xQueueReceive+0x44>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <xQueueReceive+0x46>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <xQueueReceive+0x62>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	61fb      	str	r3, [r7, #28]
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	e7fd      	b.n	8005c96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c9a:	f001 f857 	bl	8006d4c <xTaskGetSchedulerState>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <xQueueReceive+0x72>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <xQueueReceive+0x76>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <xQueueReceive+0x78>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10b      	bne.n	8005ccc <xQueueReceive+0x94>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	61bb      	str	r3, [r7, #24]
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	e7fd      	b.n	8005cc8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ccc:	f001 fe84 	bl	80079d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01f      	beq.n	8005d1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ce0:	f000 f8f6 	bl	8005ed0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	1e5a      	subs	r2, r3, #1
 8005ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00f      	beq.n	8005d14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf6:	3310      	adds	r3, #16
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fe57 	bl	80069ac <xTaskRemoveFromEventList>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d04:	4b3c      	ldr	r3, [pc, #240]	@ (8005df8 <xQueueReceive+0x1c0>)
 8005d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d14:	f001 fe92 	bl	8007a3c <vPortExitCritical>
				return pdPASS;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e069      	b.n	8005df0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d103      	bne.n	8005d2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d22:	f001 fe8b 	bl	8007a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e062      	b.n	8005df0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d30:	f107 0310 	add.w	r3, r7, #16
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fe9d 	bl	8006a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d3e:	f001 fe7d 	bl	8007a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d42:	f000 fc0d 	bl	8006560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d46:	f001 fe47 	bl	80079d8 <vPortEnterCritical>
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d50:	b25b      	sxtb	r3, r3
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d103      	bne.n	8005d60 <xQueueReceive+0x128>
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d66:	b25b      	sxtb	r3, r3
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d103      	bne.n	8005d76 <xQueueReceive+0x13e>
 8005d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d76:	f001 fe61 	bl	8007a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d7a:	1d3a      	adds	r2, r7, #4
 8005d7c:	f107 0310 	add.w	r3, r7, #16
 8005d80:	4611      	mov	r1, r2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fe8c 	bl	8006aa0 <xTaskCheckForTimeOut>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d123      	bne.n	8005dd6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d90:	f000 f916 	bl	8005fc0 <prvIsQueueEmpty>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d017      	beq.n	8005dca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9c:	3324      	adds	r3, #36	@ 0x24
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fdb0 	bl	8006908 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005daa:	f000 f8b7 	bl	8005f1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dae:	f000 fbe5 	bl	800657c <xTaskResumeAll>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d189      	bne.n	8005ccc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005db8:	4b0f      	ldr	r3, [pc, #60]	@ (8005df8 <xQueueReceive+0x1c0>)
 8005dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	e780      	b.n	8005ccc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dcc:	f000 f8a6 	bl	8005f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dd0:	f000 fbd4 	bl	800657c <xTaskResumeAll>
 8005dd4:	e77a      	b.n	8005ccc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dd8:	f000 f8a0 	bl	8005f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ddc:	f000 fbce 	bl	800657c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005de0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005de2:	f000 f8ed 	bl	8005fc0 <prvIsQueueEmpty>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f43f af6f 	beq.w	8005ccc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3730      	adds	r7, #48	@ 0x30
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10d      	bne.n	8005e36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d14d      	bne.n	8005ebe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 ffae 	bl	8006d88 <xTaskPriorityDisinherit>
 8005e2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	609a      	str	r2, [r3, #8]
 8005e34:	e043      	b.n	8005ebe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d119      	bne.n	8005e70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6858      	ldr	r0, [r3, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e44:	461a      	mov	r2, r3
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	f002 f908 	bl	800805c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e54:	441a      	add	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d32b      	bcc.n	8005ebe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	e026      	b.n	8005ebe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68d8      	ldr	r0, [r3, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e78:	461a      	mov	r2, r3
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	f002 f8ee 	bl	800805c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e88:	425b      	negs	r3, r3
 8005e8a:	441a      	add	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d207      	bcs.n	8005eac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea4:	425b      	negs	r3, r3
 8005ea6:	441a      	add	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d105      	bne.n	8005ebe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ec6:	697b      	ldr	r3, [r7, #20]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d018      	beq.n	8005f14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eea:	441a      	add	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d303      	bcc.n	8005f04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68d9      	ldr	r1, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6838      	ldr	r0, [r7, #0]
 8005f10:	f002 f8a4 	bl	800805c <memcpy>
	}
}
 8005f14:	bf00      	nop
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f24:	f001 fd58 	bl	80079d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f30:	e011      	b.n	8005f56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d012      	beq.n	8005f60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3324      	adds	r3, #36	@ 0x24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 fd34 	bl	80069ac <xTaskRemoveFromEventList>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f4a:	f000 fe0d 	bl	8006b68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dce9      	bgt.n	8005f32 <prvUnlockQueue+0x16>
 8005f5e:	e000      	b.n	8005f62 <prvUnlockQueue+0x46>
					break;
 8005f60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	22ff      	movs	r2, #255	@ 0xff
 8005f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f6a:	f001 fd67 	bl	8007a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f6e:	f001 fd33 	bl	80079d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f7a:	e011      	b.n	8005fa0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d012      	beq.n	8005faa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3310      	adds	r3, #16
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fd0f 	bl	80069ac <xTaskRemoveFromEventList>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f94:	f000 fde8 	bl	8006b68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f98:	7bbb      	ldrb	r3, [r7, #14]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	dce9      	bgt.n	8005f7c <prvUnlockQueue+0x60>
 8005fa8:	e000      	b.n	8005fac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005faa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	22ff      	movs	r2, #255	@ 0xff
 8005fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005fb4:	f001 fd42 	bl	8007a3c <vPortExitCritical>
}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fc8:	f001 fd06 	bl	80079d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e001      	b.n	8005fde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fde:	f001 fd2d 	bl	8007a3c <vPortExitCritical>

	return xReturn;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ff4:	f001 fcf0 	bl	80079d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006000:	429a      	cmp	r2, r3
 8006002:	d102      	bne.n	800600a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006004:	2301      	movs	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	e001      	b.n	800600e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800600e:	f001 fd15 	bl	8007a3c <vPortExitCritical>

	return xReturn;
 8006012:	68fb      	ldr	r3, [r7, #12]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e014      	b.n	8006056 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800602c:	4a0f      	ldr	r2, [pc, #60]	@ (800606c <vQueueAddToRegistry+0x50>)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006038:	490c      	ldr	r1, [pc, #48]	@ (800606c <vQueueAddToRegistry+0x50>)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006042:	4a0a      	ldr	r2, [pc, #40]	@ (800606c <vQueueAddToRegistry+0x50>)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	4413      	add	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800604e:	e006      	b.n	800605e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b07      	cmp	r3, #7
 800605a:	d9e7      	bls.n	800602c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800605c:	bf00      	nop
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000c64 	.word	0x20000c64

08006070 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006080:	f001 fcaa 	bl	80079d8 <vPortEnterCritical>
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800608a:	b25b      	sxtb	r3, r3
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d103      	bne.n	800609a <vQueueWaitForMessageRestricted+0x2a>
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060a0:	b25b      	sxtb	r3, r3
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a6:	d103      	bne.n	80060b0 <vQueueWaitForMessageRestricted+0x40>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060b0:	f001 fcc4 	bl	8007a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	3324      	adds	r3, #36	@ 0x24
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fc45 	bl	8006954 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060ca:	6978      	ldr	r0, [r7, #20]
 80060cc:	f7ff ff26 	bl	8005f1c <prvUnlockQueue>
	}
 80060d0:	bf00      	nop
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08e      	sub	sp, #56	@ 0x38
 80060dc:	af04      	add	r7, sp, #16
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <xTaskCreateStatic+0x2c>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	623b      	str	r3, [r7, #32]
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <xTaskCreateStatic+0x4a>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	61fb      	str	r3, [r7, #28]
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	e7fd      	b.n	800611e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006122:	235c      	movs	r3, #92	@ 0x5c
 8006124:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b5c      	cmp	r3, #92	@ 0x5c
 800612a:	d00b      	beq.n	8006144 <xTaskCreateStatic+0x6c>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	61bb      	str	r3, [r7, #24]
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	e7fd      	b.n	8006140 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006144:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01e      	beq.n	800618a <xTaskCreateStatic+0xb2>
 800614c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614e:	2b00      	cmp	r3, #0
 8006150:	d01b      	beq.n	800618a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800615a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006164:	2300      	movs	r3, #0
 8006166:	9303      	str	r3, [sp, #12]
 8006168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616a:	9302      	str	r3, [sp, #8]
 800616c:	f107 0314 	add.w	r3, r7, #20
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f850 	bl	8006222 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006182:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006184:	f000 f8de 	bl	8006344 <prvAddNewTaskToReadyList>
 8006188:	e001      	b.n	800618e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800618e:	697b      	ldr	r3, [r7, #20]
	}
 8006190:	4618      	mov	r0, r3
 8006192:	3728      	adds	r7, #40	@ 0x28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08c      	sub	sp, #48	@ 0x30
 800619c:	af04      	add	r7, sp, #16
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 fd35 	bl	8007c1c <pvPortMalloc>
 80061b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00e      	beq.n	80061d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061ba:	205c      	movs	r0, #92	@ 0x5c
 80061bc:	f001 fd2e 	bl	8007c1c <pvPortMalloc>
 80061c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80061ce:	e005      	b.n	80061dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061d0:	6978      	ldr	r0, [r7, #20]
 80061d2:	f001 fdf1 	bl	8007db8 <vPortFree>
 80061d6:	e001      	b.n	80061dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d017      	beq.n	8006212 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061ea:	88fa      	ldrh	r2, [r7, #6]
 80061ec:	2300      	movs	r3, #0
 80061ee:	9303      	str	r3, [sp, #12]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	9302      	str	r3, [sp, #8]
 80061f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f80e 	bl	8006222 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006206:	69f8      	ldr	r0, [r7, #28]
 8006208:	f000 f89c 	bl	8006344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800620c:	2301      	movs	r3, #1
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	e002      	b.n	8006218 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006212:	f04f 33ff 	mov.w	r3, #4294967295
 8006216:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006218:	69bb      	ldr	r3, [r7, #24]
	}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b088      	sub	sp, #32
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006232:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	461a      	mov	r2, r3
 800623a:	21a5      	movs	r1, #165	@ 0xa5
 800623c:	f001 fedc 	bl	8007ff8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006242:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800624a:	3b01      	subs	r3, #1
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f023 0307 	bic.w	r3, r3, #7
 8006258:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00b      	beq.n	800627c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	617b      	str	r3, [r7, #20]
}
 8006276:	bf00      	nop
 8006278:	bf00      	nop
 800627a:	e7fd      	b.n	8006278 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d01f      	beq.n	80062c2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	e012      	b.n	80062ae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	7819      	ldrb	r1, [r3, #0]
 8006290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	3334      	adds	r3, #52	@ 0x34
 8006298:	460a      	mov	r2, r1
 800629a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	3301      	adds	r3, #1
 80062ac:	61fb      	str	r3, [r7, #28]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	2b0f      	cmp	r3, #15
 80062b2:	d9e9      	bls.n	8006288 <prvInitialiseNewTask+0x66>
 80062b4:	e000      	b.n	80062b8 <prvInitialiseNewTask+0x96>
			{
				break;
 80062b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062c0:	e003      	b.n	80062ca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062cc:	2b37      	cmp	r3, #55	@ 0x37
 80062ce:	d901      	bls.n	80062d4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062d0:	2337      	movs	r3, #55	@ 0x37
 80062d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062de:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e2:	2200      	movs	r2, #0
 80062e4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	3304      	adds	r3, #4
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff f966 	bl	80055bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	3318      	adds	r3, #24
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff f961 	bl	80055bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006302:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006308:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800630e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	2200      	movs	r2, #0
 8006314:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	68f9      	ldr	r1, [r7, #12]
 8006322:	69b8      	ldr	r0, [r7, #24]
 8006324:	f001 fa2a 	bl	800777c <pxPortInitialiseStack>
 8006328:	4602      	mov	r2, r0
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800632e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800633a:	bf00      	nop
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800634c:	f001 fb44 	bl	80079d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006350:	4b2d      	ldr	r3, [pc, #180]	@ (8006408 <prvAddNewTaskToReadyList+0xc4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3301      	adds	r3, #1
 8006356:	4a2c      	ldr	r2, [pc, #176]	@ (8006408 <prvAddNewTaskToReadyList+0xc4>)
 8006358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800635a:	4b2c      	ldr	r3, [pc, #176]	@ (800640c <prvAddNewTaskToReadyList+0xc8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d109      	bne.n	8006376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006362:	4a2a      	ldr	r2, [pc, #168]	@ (800640c <prvAddNewTaskToReadyList+0xc8>)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006368:	4b27      	ldr	r3, [pc, #156]	@ (8006408 <prvAddNewTaskToReadyList+0xc4>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d110      	bne.n	8006392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006370:	f000 fc1e 	bl	8006bb0 <prvInitialiseTaskLists>
 8006374:	e00d      	b.n	8006392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006376:	4b26      	ldr	r3, [pc, #152]	@ (8006410 <prvAddNewTaskToReadyList+0xcc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800637e:	4b23      	ldr	r3, [pc, #140]	@ (800640c <prvAddNewTaskToReadyList+0xc8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006388:	429a      	cmp	r2, r3
 800638a:	d802      	bhi.n	8006392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800638c:	4a1f      	ldr	r2, [pc, #124]	@ (800640c <prvAddNewTaskToReadyList+0xc8>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006392:	4b20      	ldr	r3, [pc, #128]	@ (8006414 <prvAddNewTaskToReadyList+0xd0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	4a1e      	ldr	r2, [pc, #120]	@ (8006414 <prvAddNewTaskToReadyList+0xd0>)
 800639a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800639c:	4b1d      	ldr	r3, [pc, #116]	@ (8006414 <prvAddNewTaskToReadyList+0xd0>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006418 <prvAddNewTaskToReadyList+0xd4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d903      	bls.n	80063b8 <prvAddNewTaskToReadyList+0x74>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b4:	4a18      	ldr	r2, [pc, #96]	@ (8006418 <prvAddNewTaskToReadyList+0xd4>)
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4a15      	ldr	r2, [pc, #84]	@ (800641c <prvAddNewTaskToReadyList+0xd8>)
 80063c6:	441a      	add	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4610      	mov	r0, r2
 80063d0:	f7ff f901 	bl	80055d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063d4:	f001 fb32 	bl	8007a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <prvAddNewTaskToReadyList+0xcc>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00e      	beq.n	80063fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063e0:	4b0a      	ldr	r3, [pc, #40]	@ (800640c <prvAddNewTaskToReadyList+0xc8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d207      	bcs.n	80063fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006420 <prvAddNewTaskToReadyList+0xdc>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20001178 	.word	0x20001178
 800640c:	20000ca4 	.word	0x20000ca4
 8006410:	20001184 	.word	0x20001184
 8006414:	20001194 	.word	0x20001194
 8006418:	20001180 	.word	0x20001180
 800641c:	20000ca8 	.word	0x20000ca8
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d018      	beq.n	8006468 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006436:	4b14      	ldr	r3, [pc, #80]	@ (8006488 <vTaskDelay+0x64>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <vTaskDelay+0x32>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	60bb      	str	r3, [r7, #8]
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	e7fd      	b.n	8006452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006456:	f000 f883 	bl	8006560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800645a:	2100      	movs	r1, #0
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fddf 	bl	8007020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006462:	f000 f88b 	bl	800657c <xTaskResumeAll>
 8006466:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d107      	bne.n	800647e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800646e:	4b07      	ldr	r3, [pc, #28]	@ (800648c <vTaskDelay+0x68>)
 8006470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	200011a0 	.word	0x200011a0
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	@ 0x28
 8006494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800649e:	463a      	mov	r2, r7
 80064a0:	1d39      	adds	r1, r7, #4
 80064a2:	f107 0308 	add.w	r3, r7, #8
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff f834 	bl	8005514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	9202      	str	r2, [sp, #8]
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	2300      	movs	r3, #0
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	2300      	movs	r3, #0
 80064bc:	460a      	mov	r2, r1
 80064be:	4922      	ldr	r1, [pc, #136]	@ (8006548 <vTaskStartScheduler+0xb8>)
 80064c0:	4822      	ldr	r0, [pc, #136]	@ (800654c <vTaskStartScheduler+0xbc>)
 80064c2:	f7ff fe09 	bl	80060d8 <xTaskCreateStatic>
 80064c6:	4603      	mov	r3, r0
 80064c8:	4a21      	ldr	r2, [pc, #132]	@ (8006550 <vTaskStartScheduler+0xc0>)
 80064ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064cc:	4b20      	ldr	r3, [pc, #128]	@ (8006550 <vTaskStartScheduler+0xc0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064d4:	2301      	movs	r3, #1
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	e001      	b.n	80064de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d102      	bne.n	80064ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064e4:	f000 fdf0 	bl	80070c8 <xTimerCreateTimerTask>
 80064e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d116      	bne.n	800651e <vTaskStartScheduler+0x8e>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
}
 8006502:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006504:	4b13      	ldr	r3, [pc, #76]	@ (8006554 <vTaskStartScheduler+0xc4>)
 8006506:	f04f 32ff 	mov.w	r2, #4294967295
 800650a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800650c:	4b12      	ldr	r3, [pc, #72]	@ (8006558 <vTaskStartScheduler+0xc8>)
 800650e:	2201      	movs	r2, #1
 8006510:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006512:	4b12      	ldr	r3, [pc, #72]	@ (800655c <vTaskStartScheduler+0xcc>)
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006518:	f001 f9ba 	bl	8007890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800651c:	e00f      	b.n	800653e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d10b      	bne.n	800653e <vTaskStartScheduler+0xae>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	60fb      	str	r3, [r7, #12]
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	e7fd      	b.n	800653a <vTaskStartScheduler+0xaa>
}
 800653e:	bf00      	nop
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	08008f68 	.word	0x08008f68
 800654c:	08006b81 	.word	0x08006b81
 8006550:	2000119c 	.word	0x2000119c
 8006554:	20001198 	.word	0x20001198
 8006558:	20001184 	.word	0x20001184
 800655c:	2000117c 	.word	0x2000117c

08006560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006564:	4b04      	ldr	r3, [pc, #16]	@ (8006578 <vTaskSuspendAll+0x18>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	4a03      	ldr	r2, [pc, #12]	@ (8006578 <vTaskSuspendAll+0x18>)
 800656c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800656e:	bf00      	nop
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	200011a0 	.word	0x200011a0

0800657c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800658a:	4b42      	ldr	r3, [pc, #264]	@ (8006694 <xTaskResumeAll+0x118>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <xTaskResumeAll+0x2e>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	603b      	str	r3, [r7, #0]
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	e7fd      	b.n	80065a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065aa:	f001 fa15 	bl	80079d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065ae:	4b39      	ldr	r3, [pc, #228]	@ (8006694 <xTaskResumeAll+0x118>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	4a37      	ldr	r2, [pc, #220]	@ (8006694 <xTaskResumeAll+0x118>)
 80065b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b8:	4b36      	ldr	r3, [pc, #216]	@ (8006694 <xTaskResumeAll+0x118>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d162      	bne.n	8006686 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065c0:	4b35      	ldr	r3, [pc, #212]	@ (8006698 <xTaskResumeAll+0x11c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d05e      	beq.n	8006686 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065c8:	e02f      	b.n	800662a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ca:	4b34      	ldr	r3, [pc, #208]	@ (800669c <xTaskResumeAll+0x120>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3318      	adds	r3, #24
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff f85a 	bl	8005690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3304      	adds	r3, #4
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff f855 	bl	8005690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ea:	4b2d      	ldr	r3, [pc, #180]	@ (80066a0 <xTaskResumeAll+0x124>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d903      	bls.n	80065fa <xTaskResumeAll+0x7e>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f6:	4a2a      	ldr	r2, [pc, #168]	@ (80066a0 <xTaskResumeAll+0x124>)
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4a27      	ldr	r2, [pc, #156]	@ (80066a4 <xTaskResumeAll+0x128>)
 8006608:	441a      	add	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3304      	adds	r3, #4
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f7fe ffe0 	bl	80055d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661a:	4b23      	ldr	r3, [pc, #140]	@ (80066a8 <xTaskResumeAll+0x12c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	429a      	cmp	r2, r3
 8006622:	d302      	bcc.n	800662a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006624:	4b21      	ldr	r3, [pc, #132]	@ (80066ac <xTaskResumeAll+0x130>)
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800662a:	4b1c      	ldr	r3, [pc, #112]	@ (800669c <xTaskResumeAll+0x120>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1cb      	bne.n	80065ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006638:	f000 fb58 	bl	8006cec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800663c:	4b1c      	ldr	r3, [pc, #112]	@ (80066b0 <xTaskResumeAll+0x134>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d010      	beq.n	800666a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006648:	f000 f846 	bl	80066d8 <xTaskIncrementTick>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006652:	4b16      	ldr	r3, [pc, #88]	@ (80066ac <xTaskResumeAll+0x130>)
 8006654:	2201      	movs	r2, #1
 8006656:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3b01      	subs	r3, #1
 800665c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1f1      	bne.n	8006648 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006664:	4b12      	ldr	r3, [pc, #72]	@ (80066b0 <xTaskResumeAll+0x134>)
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800666a:	4b10      	ldr	r3, [pc, #64]	@ (80066ac <xTaskResumeAll+0x130>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006672:	2301      	movs	r3, #1
 8006674:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006676:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <xTaskResumeAll+0x138>)
 8006678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006686:	f001 f9d9 	bl	8007a3c <vPortExitCritical>

	return xAlreadyYielded;
 800668a:	68bb      	ldr	r3, [r7, #8]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	200011a0 	.word	0x200011a0
 8006698:	20001178 	.word	0x20001178
 800669c:	20001138 	.word	0x20001138
 80066a0:	20001180 	.word	0x20001180
 80066a4:	20000ca8 	.word	0x20000ca8
 80066a8:	20000ca4 	.word	0x20000ca4
 80066ac:	2000118c 	.word	0x2000118c
 80066b0:	20001188 	.word	0x20001188
 80066b4:	e000ed04 	.word	0xe000ed04

080066b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066be:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <xTaskGetTickCount+0x1c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066c4:	687b      	ldr	r3, [r7, #4]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	2000117c 	.word	0x2000117c

080066d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006820 <xTaskIncrementTick+0x148>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f040 8090 	bne.w	800680c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006824 <xTaskIncrementTick+0x14c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066f4:	4a4b      	ldr	r2, [pc, #300]	@ (8006824 <xTaskIncrementTick+0x14c>)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d121      	bne.n	8006744 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006700:	4b49      	ldr	r3, [pc, #292]	@ (8006828 <xTaskIncrementTick+0x150>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <xTaskIncrementTick+0x4a>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	603b      	str	r3, [r7, #0]
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <xTaskIncrementTick+0x46>
 8006722:	4b41      	ldr	r3, [pc, #260]	@ (8006828 <xTaskIncrementTick+0x150>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	4b40      	ldr	r3, [pc, #256]	@ (800682c <xTaskIncrementTick+0x154>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a3e      	ldr	r2, [pc, #248]	@ (8006828 <xTaskIncrementTick+0x150>)
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	4a3e      	ldr	r2, [pc, #248]	@ (800682c <xTaskIncrementTick+0x154>)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	4b3e      	ldr	r3, [pc, #248]	@ (8006830 <xTaskIncrementTick+0x158>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3301      	adds	r3, #1
 800673c:	4a3c      	ldr	r2, [pc, #240]	@ (8006830 <xTaskIncrementTick+0x158>)
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	f000 fad4 	bl	8006cec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006744:	4b3b      	ldr	r3, [pc, #236]	@ (8006834 <xTaskIncrementTick+0x15c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	429a      	cmp	r2, r3
 800674c:	d349      	bcc.n	80067e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800674e:	4b36      	ldr	r3, [pc, #216]	@ (8006828 <xTaskIncrementTick+0x150>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006758:	4b36      	ldr	r3, [pc, #216]	@ (8006834 <xTaskIncrementTick+0x15c>)
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	601a      	str	r2, [r3, #0]
					break;
 8006760:	e03f      	b.n	80067e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006762:	4b31      	ldr	r3, [pc, #196]	@ (8006828 <xTaskIncrementTick+0x150>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	429a      	cmp	r2, r3
 8006778:	d203      	bcs.n	8006782 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800677a:	4a2e      	ldr	r2, [pc, #184]	@ (8006834 <xTaskIncrementTick+0x15c>)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006780:	e02f      	b.n	80067e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3304      	adds	r3, #4
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe ff82 	bl	8005690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	3318      	adds	r3, #24
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe ff79 	bl	8005690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a2:	4b25      	ldr	r3, [pc, #148]	@ (8006838 <xTaskIncrementTick+0x160>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d903      	bls.n	80067b2 <xTaskIncrementTick+0xda>
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	4a22      	ldr	r2, [pc, #136]	@ (8006838 <xTaskIncrementTick+0x160>)
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4a1f      	ldr	r2, [pc, #124]	@ (800683c <xTaskIncrementTick+0x164>)
 80067c0:	441a      	add	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7fe ff04 	bl	80055d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006840 <xTaskIncrementTick+0x168>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d8:	429a      	cmp	r2, r3
 80067da:	d3b8      	bcc.n	800674e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e0:	e7b5      	b.n	800674e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067e2:	4b17      	ldr	r3, [pc, #92]	@ (8006840 <xTaskIncrementTick+0x168>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e8:	4914      	ldr	r1, [pc, #80]	@ (800683c <xTaskIncrementTick+0x164>)
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d901      	bls.n	80067fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80067fa:	2301      	movs	r3, #1
 80067fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067fe:	4b11      	ldr	r3, [pc, #68]	@ (8006844 <xTaskIncrementTick+0x16c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006806:	2301      	movs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	e004      	b.n	8006816 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800680c:	4b0e      	ldr	r3, [pc, #56]	@ (8006848 <xTaskIncrementTick+0x170>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a0d      	ldr	r2, [pc, #52]	@ (8006848 <xTaskIncrementTick+0x170>)
 8006814:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006816:	697b      	ldr	r3, [r7, #20]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	200011a0 	.word	0x200011a0
 8006824:	2000117c 	.word	0x2000117c
 8006828:	20001130 	.word	0x20001130
 800682c:	20001134 	.word	0x20001134
 8006830:	20001190 	.word	0x20001190
 8006834:	20001198 	.word	0x20001198
 8006838:	20001180 	.word	0x20001180
 800683c:	20000ca8 	.word	0x20000ca8
 8006840:	20000ca4 	.word	0x20000ca4
 8006844:	2000118c 	.word	0x2000118c
 8006848:	20001188 	.word	0x20001188

0800684c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006852:	4b28      	ldr	r3, [pc, #160]	@ (80068f4 <vTaskSwitchContext+0xa8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800685a:	4b27      	ldr	r3, [pc, #156]	@ (80068f8 <vTaskSwitchContext+0xac>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006860:	e042      	b.n	80068e8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006862:	4b25      	ldr	r3, [pc, #148]	@ (80068f8 <vTaskSwitchContext+0xac>)
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006868:	4b24      	ldr	r3, [pc, #144]	@ (80068fc <vTaskSwitchContext+0xb0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	e011      	b.n	8006894 <vTaskSwitchContext+0x48>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <vTaskSwitchContext+0x42>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	607b      	str	r3, [r7, #4]
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	e7fd      	b.n	800688a <vTaskSwitchContext+0x3e>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3b01      	subs	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	491a      	ldr	r1, [pc, #104]	@ (8006900 <vTaskSwitchContext+0xb4>)
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0e3      	beq.n	8006870 <vTaskSwitchContext+0x24>
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4a13      	ldr	r2, [pc, #76]	@ (8006900 <vTaskSwitchContext+0xb4>)
 80068b4:	4413      	add	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	3308      	adds	r3, #8
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d104      	bne.n	80068d8 <vTaskSwitchContext+0x8c>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	605a      	str	r2, [r3, #4]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	4a09      	ldr	r2, [pc, #36]	@ (8006904 <vTaskSwitchContext+0xb8>)
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	4a06      	ldr	r2, [pc, #24]	@ (80068fc <vTaskSwitchContext+0xb0>)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6013      	str	r3, [r2, #0]
}
 80068e8:	bf00      	nop
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	200011a0 	.word	0x200011a0
 80068f8:	2000118c 	.word	0x2000118c
 80068fc:	20001180 	.word	0x20001180
 8006900:	20000ca8 	.word	0x20000ca8
 8006904:	20000ca4 	.word	0x20000ca4

08006908 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10b      	bne.n	8006930 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	60fb      	str	r3, [r7, #12]
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	e7fd      	b.n	800692c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006930:	4b07      	ldr	r3, [pc, #28]	@ (8006950 <vTaskPlaceOnEventList+0x48>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3318      	adds	r3, #24
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7fe fe70 	bl	800561e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800693e:	2101      	movs	r1, #1
 8006940:	6838      	ldr	r0, [r7, #0]
 8006942:	f000 fb6d 	bl	8007020 <prvAddCurrentTaskToDelayedList>
}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000ca4 	.word	0x20000ca4

08006954 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10b      	bne.n	800697e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	617b      	str	r3, [r7, #20]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800697e:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3318      	adds	r3, #24
 8006984:	4619      	mov	r1, r3
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7fe fe25 	bl	80055d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006992:	f04f 33ff 	mov.w	r3, #4294967295
 8006996:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	68b8      	ldr	r0, [r7, #8]
 800699c:	f000 fb40 	bl	8007020 <prvAddCurrentTaskToDelayedList>
	}
 80069a0:	bf00      	nop
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000ca4 	.word	0x20000ca4

080069ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10b      	bne.n	80069da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	60fb      	str	r3, [r7, #12]
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	e7fd      	b.n	80069d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	3318      	adds	r3, #24
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fe56 	bl	8005690 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069e4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a5c <xTaskRemoveFromEventList+0xb0>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11d      	bne.n	8006a28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe fe4d 	bl	8005690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069fa:	4b19      	ldr	r3, [pc, #100]	@ (8006a60 <xTaskRemoveFromEventList+0xb4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d903      	bls.n	8006a0a <xTaskRemoveFromEventList+0x5e>
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a06:	4a16      	ldr	r2, [pc, #88]	@ (8006a60 <xTaskRemoveFromEventList+0xb4>)
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4a13      	ldr	r2, [pc, #76]	@ (8006a64 <xTaskRemoveFromEventList+0xb8>)
 8006a18:	441a      	add	r2, r3
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f7fe fdd8 	bl	80055d6 <vListInsertEnd>
 8006a26:	e005      	b.n	8006a34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	3318      	adds	r3, #24
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	480e      	ldr	r0, [pc, #56]	@ (8006a68 <xTaskRemoveFromEventList+0xbc>)
 8006a30:	f7fe fdd1 	bl	80055d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a38:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <xTaskRemoveFromEventList+0xc0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d905      	bls.n	8006a4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a42:	2301      	movs	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a46:	4b0a      	ldr	r3, [pc, #40]	@ (8006a70 <xTaskRemoveFromEventList+0xc4>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e001      	b.n	8006a52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a52:	697b      	ldr	r3, [r7, #20]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	200011a0 	.word	0x200011a0
 8006a60:	20001180 	.word	0x20001180
 8006a64:	20000ca8 	.word	0x20000ca8
 8006a68:	20001138 	.word	0x20001138
 8006a6c:	20000ca4 	.word	0x20000ca4
 8006a70:	2000118c 	.word	0x2000118c

08006a74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a7c:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <vTaskInternalSetTimeOutState+0x24>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a84:	4b05      	ldr	r3, [pc, #20]	@ (8006a9c <vTaskInternalSetTimeOutState+0x28>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	605a      	str	r2, [r3, #4]
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	20001190 	.word	0x20001190
 8006a9c:	2000117c 	.word	0x2000117c

08006aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10b      	bne.n	8006ac8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	613b      	str	r3, [r7, #16]
}
 8006ac2:	bf00      	nop
 8006ac4:	bf00      	nop
 8006ac6:	e7fd      	b.n	8006ac4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10b      	bne.n	8006ae6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60fb      	str	r3, [r7, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
 8006ae4:	e7fd      	b.n	8006ae2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006ae6:	f000 ff77 	bl	80079d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006aea:	4b1d      	ldr	r3, [pc, #116]	@ (8006b60 <xTaskCheckForTimeOut+0xc0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b02:	d102      	bne.n	8006b0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e023      	b.n	8006b52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <xTaskCheckForTimeOut+0xc4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d007      	beq.n	8006b26 <xTaskCheckForTimeOut+0x86>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d302      	bcc.n	8006b26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b20:	2301      	movs	r3, #1
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e015      	b.n	8006b52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d20b      	bcs.n	8006b48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	1ad2      	subs	r2, r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff ff99 	bl	8006a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	e004      	b.n	8006b52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b52:	f000 ff73 	bl	8007a3c <vPortExitCritical>

	return xReturn;
 8006b56:	69fb      	ldr	r3, [r7, #28]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	2000117c 	.word	0x2000117c
 8006b64:	20001190 	.word	0x20001190

08006b68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b6c:	4b03      	ldr	r3, [pc, #12]	@ (8006b7c <vTaskMissedYield+0x14>)
 8006b6e:	2201      	movs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
}
 8006b72:	bf00      	nop
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	2000118c 	.word	0x2000118c

08006b80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b88:	f000 f852 	bl	8006c30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ba8 <prvIdleTask+0x28>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d9f9      	bls.n	8006b88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b94:	4b05      	ldr	r3, [pc, #20]	@ (8006bac <prvIdleTask+0x2c>)
 8006b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ba4:	e7f0      	b.n	8006b88 <prvIdleTask+0x8>
 8006ba6:	bf00      	nop
 8006ba8:	20000ca8 	.word	0x20000ca8
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	e00c      	b.n	8006bd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4a12      	ldr	r2, [pc, #72]	@ (8006c10 <prvInitialiseTaskLists+0x60>)
 8006bc8:	4413      	add	r3, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe fcd6 	bl	800557c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	607b      	str	r3, [r7, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b37      	cmp	r3, #55	@ 0x37
 8006bda:	d9ef      	bls.n	8006bbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bdc:	480d      	ldr	r0, [pc, #52]	@ (8006c14 <prvInitialiseTaskLists+0x64>)
 8006bde:	f7fe fccd 	bl	800557c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006be2:	480d      	ldr	r0, [pc, #52]	@ (8006c18 <prvInitialiseTaskLists+0x68>)
 8006be4:	f7fe fcca 	bl	800557c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006be8:	480c      	ldr	r0, [pc, #48]	@ (8006c1c <prvInitialiseTaskLists+0x6c>)
 8006bea:	f7fe fcc7 	bl	800557c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bee:	480c      	ldr	r0, [pc, #48]	@ (8006c20 <prvInitialiseTaskLists+0x70>)
 8006bf0:	f7fe fcc4 	bl	800557c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bf4:	480b      	ldr	r0, [pc, #44]	@ (8006c24 <prvInitialiseTaskLists+0x74>)
 8006bf6:	f7fe fcc1 	bl	800557c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <prvInitialiseTaskLists+0x78>)
 8006bfc:	4a05      	ldr	r2, [pc, #20]	@ (8006c14 <prvInitialiseTaskLists+0x64>)
 8006bfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c00:	4b0a      	ldr	r3, [pc, #40]	@ (8006c2c <prvInitialiseTaskLists+0x7c>)
 8006c02:	4a05      	ldr	r2, [pc, #20]	@ (8006c18 <prvInitialiseTaskLists+0x68>)
 8006c04:	601a      	str	r2, [r3, #0]
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000ca8 	.word	0x20000ca8
 8006c14:	20001108 	.word	0x20001108
 8006c18:	2000111c 	.word	0x2000111c
 8006c1c:	20001138 	.word	0x20001138
 8006c20:	2000114c 	.word	0x2000114c
 8006c24:	20001164 	.word	0x20001164
 8006c28:	20001130 	.word	0x20001130
 8006c2c:	20001134 	.word	0x20001134

08006c30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c36:	e019      	b.n	8006c6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c38:	f000 fece 	bl	80079d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3c:	4b10      	ldr	r3, [pc, #64]	@ (8006c80 <prvCheckTasksWaitingTermination+0x50>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe fd21 	bl	8005690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <prvCheckTasksWaitingTermination+0x54>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	4a0b      	ldr	r2, [pc, #44]	@ (8006c84 <prvCheckTasksWaitingTermination+0x54>)
 8006c56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c58:	4b0b      	ldr	r3, [pc, #44]	@ (8006c88 <prvCheckTasksWaitingTermination+0x58>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8006c88 <prvCheckTasksWaitingTermination+0x58>)
 8006c60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c62:	f000 feeb 	bl	8007a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f810 	bl	8006c8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c6c:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <prvCheckTasksWaitingTermination+0x58>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e1      	bne.n	8006c38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	2000114c 	.word	0x2000114c
 8006c84:	20001178 	.word	0x20001178
 8006c88:	20001160 	.word	0x20001160

08006c8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d108      	bne.n	8006cb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f001 f888 	bl	8007db8 <vPortFree>
				vPortFree( pxTCB );
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 f885 	bl	8007db8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cae:	e019      	b.n	8006ce4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d103      	bne.n	8006cc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 f87c 	bl	8007db8 <vPortFree>
	}
 8006cc0:	e010      	b.n	8006ce4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d00b      	beq.n	8006ce4 <prvDeleteTCB+0x58>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	60fb      	str	r3, [r7, #12]
}
 8006cde:	bf00      	nop
 8006ce0:	bf00      	nop
 8006ce2:	e7fd      	b.n	8006ce0 <prvDeleteTCB+0x54>
	}
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d24 <prvResetNextTaskUnblockTime+0x38>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d104      	bne.n	8006d06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d28 <prvResetNextTaskUnblockTime+0x3c>)
 8006cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006d02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d04:	e008      	b.n	8006d18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d06:	4b07      	ldr	r3, [pc, #28]	@ (8006d24 <prvResetNextTaskUnblockTime+0x38>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4a04      	ldr	r2, [pc, #16]	@ (8006d28 <prvResetNextTaskUnblockTime+0x3c>)
 8006d16:	6013      	str	r3, [r2, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	20001130 	.word	0x20001130
 8006d28:	20001198 	.word	0x20001198

08006d2c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006d32:	4b05      	ldr	r3, [pc, #20]	@ (8006d48 <xTaskGetCurrentTaskHandle+0x1c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006d38:	687b      	ldr	r3, [r7, #4]
	}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000ca4 	.word	0x20000ca4

08006d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d52:	4b0b      	ldr	r3, [pc, #44]	@ (8006d80 <xTaskGetSchedulerState+0x34>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	e008      	b.n	8006d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d60:	4b08      	ldr	r3, [pc, #32]	@ (8006d84 <xTaskGetSchedulerState+0x38>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	e001      	b.n	8006d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d72:	687b      	ldr	r3, [r7, #4]
	}
 8006d74:	4618      	mov	r0, r3
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	20001184 	.word	0x20001184
 8006d84:	200011a0 	.word	0x200011a0

08006d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d058      	beq.n	8006e50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e5c <xTaskPriorityDisinherit+0xd4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d00b      	beq.n	8006dc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	60fb      	str	r3, [r7, #12]
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	e7fd      	b.n	8006dbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10b      	bne.n	8006de0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	60bb      	str	r3, [r7, #8]
}
 8006dda:	bf00      	nop
 8006ddc:	bf00      	nop
 8006dde:	e7fd      	b.n	8006ddc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de4:	1e5a      	subs	r2, r3, #1
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d02c      	beq.n	8006e50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d128      	bne.n	8006e50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fc44 	bl	8005690 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e20:	4b0f      	ldr	r3, [pc, #60]	@ (8006e60 <xTaskPriorityDisinherit+0xd8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d903      	bls.n	8006e30 <xTaskPriorityDisinherit+0xa8>
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8006e60 <xTaskPriorityDisinherit+0xd8>)
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4a09      	ldr	r2, [pc, #36]	@ (8006e64 <xTaskPriorityDisinherit+0xdc>)
 8006e3e:	441a      	add	r2, r3
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fe fbc5 	bl	80055d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e50:	697b      	ldr	r3, [r7, #20]
	}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000ca4 	.word	0x20000ca4
 8006e60:	20001180 	.word	0x20001180
 8006e64:	20000ca8 	.word	0x20000ca8

08006e68 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006e72:	f000 fdb1 	bl	80079d8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006e76:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef0 <ulTaskNotifyTake+0x88>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d113      	bne.n	8006ea8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006e80:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef0 <ulTaskNotifyTake+0x88>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e90:	2101      	movs	r1, #1
 8006e92:	6838      	ldr	r0, [r7, #0]
 8006e94:	f000 f8c4 	bl	8007020 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006e98:	4b16      	ldr	r3, [pc, #88]	@ (8006ef4 <ulTaskNotifyTake+0x8c>)
 8006e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006ea8:	f000 fdc8 	bl	8007a3c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006eac:	f000 fd94 	bl	80079d8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef0 <ulTaskNotifyTake+0x88>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00c      	beq.n	8006ed8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef0 <ulTaskNotifyTake+0x88>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	655a      	str	r2, [r3, #84]	@ 0x54
 8006ecc:	e004      	b.n	8006ed8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006ece:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <ulTaskNotifyTake+0x88>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	3a01      	subs	r2, #1
 8006ed6:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ed8:	4b05      	ldr	r3, [pc, #20]	@ (8006ef0 <ulTaskNotifyTake+0x88>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8006ee2:	f000 fdab 	bl	8007a3c <vPortExitCritical>

		return ulReturn;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
	}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000ca4 	.word	0x20000ca4
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	@ 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10b      	bne.n	8006f20 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	61bb      	str	r3, [r7, #24]
}
 8006f1a:	bf00      	nop
 8006f1c:	bf00      	nop
 8006f1e:	e7fd      	b.n	8006f1c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f20:	f000 fe3a 	bl	8007b98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006f28:	f3ef 8211 	mrs	r2, BASEPRI
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	617a      	str	r2, [r7, #20]
 8006f3e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f40:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f42:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f4a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f5e:	7ffb      	ldrb	r3, [r7, #31]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d147      	bne.n	8006ff4 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	60fb      	str	r3, [r7, #12]
}
 8006f7e:	bf00      	nop
 8006f80:	bf00      	nop
 8006f82:	e7fd      	b.n	8006f80 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f84:	4b20      	ldr	r3, [pc, #128]	@ (8007008 <vTaskNotifyGiveFromISR+0x110>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d11d      	bne.n	8006fc8 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe fb7d 	bl	8005690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800700c <vTaskNotifyGiveFromISR+0x114>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d903      	bls.n	8006faa <vTaskNotifyGiveFromISR+0xb2>
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	4a19      	ldr	r2, [pc, #100]	@ (800700c <vTaskNotifyGiveFromISR+0x114>)
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4a16      	ldr	r2, [pc, #88]	@ (8007010 <vTaskNotifyGiveFromISR+0x118>)
 8006fb8:	441a      	add	r2, r3
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	f7fe fb08 	bl	80055d6 <vListInsertEnd>
 8006fc6:	e005      	b.n	8006fd4 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	3318      	adds	r3, #24
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4811      	ldr	r0, [pc, #68]	@ (8007014 <vTaskNotifyGiveFromISR+0x11c>)
 8006fd0:	f7fe fb01 	bl	80055d6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8007018 <vTaskNotifyGiveFromISR+0x120>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d908      	bls.n	8006ff4 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2201      	movs	r2, #1
 8006fec:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006fee:	4b0b      	ldr	r3, [pc, #44]	@ (800701c <vTaskNotifyGiveFromISR+0x124>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f383 8811 	msr	BASEPRI, r3
}
 8006ffe:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007000:	bf00      	nop
 8007002:	3728      	adds	r7, #40	@ 0x28
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	200011a0 	.word	0x200011a0
 800700c:	20001180 	.word	0x20001180
 8007010:	20000ca8 	.word	0x20000ca8
 8007014:	20001138 	.word	0x20001138
 8007018:	20000ca4 	.word	0x20000ca4
 800701c:	2000118c 	.word	0x2000118c

08007020 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800702a:	4b21      	ldr	r3, [pc, #132]	@ (80070b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007030:	4b20      	ldr	r3, [pc, #128]	@ (80070b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3304      	adds	r3, #4
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fb2a 	bl	8005690 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d10a      	bne.n	800705a <prvAddCurrentTaskToDelayedList+0x3a>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d007      	beq.n	800705a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800704a:	4b1a      	ldr	r3, [pc, #104]	@ (80070b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3304      	adds	r3, #4
 8007050:	4619      	mov	r1, r3
 8007052:	4819      	ldr	r0, [pc, #100]	@ (80070b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007054:	f7fe fabf 	bl	80055d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007058:	e026      	b.n	80070a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4413      	add	r3, r2
 8007060:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007062:	4b14      	ldr	r3, [pc, #80]	@ (80070b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	429a      	cmp	r2, r3
 8007070:	d209      	bcs.n	8007086 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007072:	4b12      	ldr	r3, [pc, #72]	@ (80070bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	4b0f      	ldr	r3, [pc, #60]	@ (80070b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3304      	adds	r3, #4
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f7fe facd 	bl	800561e <vListInsert>
}
 8007084:	e010      	b.n	80070a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007086:	4b0e      	ldr	r3, [pc, #56]	@ (80070c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	4b0a      	ldr	r3, [pc, #40]	@ (80070b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3304      	adds	r3, #4
 8007090:	4619      	mov	r1, r3
 8007092:	4610      	mov	r0, r2
 8007094:	f7fe fac3 	bl	800561e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007098:	4b0a      	ldr	r3, [pc, #40]	@ (80070c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d202      	bcs.n	80070a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070a2:	4a08      	ldr	r2, [pc, #32]	@ (80070c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	6013      	str	r3, [r2, #0]
}
 80070a8:	bf00      	nop
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	2000117c 	.word	0x2000117c
 80070b4:	20000ca4 	.word	0x20000ca4
 80070b8:	20001164 	.word	0x20001164
 80070bc:	20001134 	.word	0x20001134
 80070c0:	20001130 	.word	0x20001130
 80070c4:	20001198 	.word	0x20001198

080070c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	@ 0x28
 80070cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070d2:	f000 fb13 	bl	80076fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070d6:	4b1d      	ldr	r3, [pc, #116]	@ (800714c <xTimerCreateTimerTask+0x84>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d021      	beq.n	8007122 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070e6:	1d3a      	adds	r2, r7, #4
 80070e8:	f107 0108 	add.w	r1, r7, #8
 80070ec:	f107 030c 	add.w	r3, r7, #12
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe fa29 	bl	8005548 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	9202      	str	r2, [sp, #8]
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	2302      	movs	r3, #2
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	2300      	movs	r3, #0
 8007106:	460a      	mov	r2, r1
 8007108:	4911      	ldr	r1, [pc, #68]	@ (8007150 <xTimerCreateTimerTask+0x88>)
 800710a:	4812      	ldr	r0, [pc, #72]	@ (8007154 <xTimerCreateTimerTask+0x8c>)
 800710c:	f7fe ffe4 	bl	80060d8 <xTaskCreateStatic>
 8007110:	4603      	mov	r3, r0
 8007112:	4a11      	ldr	r2, [pc, #68]	@ (8007158 <xTimerCreateTimerTask+0x90>)
 8007114:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007116:	4b10      	ldr	r3, [pc, #64]	@ (8007158 <xTimerCreateTimerTask+0x90>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800711e:	2301      	movs	r3, #1
 8007120:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10b      	bne.n	8007140 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	613b      	str	r3, [r7, #16]
}
 800713a:	bf00      	nop
 800713c:	bf00      	nop
 800713e:	e7fd      	b.n	800713c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007140:	697b      	ldr	r3, [r7, #20]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	200011d4 	.word	0x200011d4
 8007150:	08008f70 	.word	0x08008f70
 8007154:	08007295 	.word	0x08007295
 8007158:	200011d8 	.word	0x200011d8

0800715c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08a      	sub	sp, #40	@ 0x28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800716a:	2300      	movs	r3, #0
 800716c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10b      	bne.n	800718c <xTimerGenericCommand+0x30>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	623b      	str	r3, [r7, #32]
}
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	e7fd      	b.n	8007188 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800718c:	4b19      	ldr	r3, [pc, #100]	@ (80071f4 <xTimerGenericCommand+0x98>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d02a      	beq.n	80071ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b05      	cmp	r3, #5
 80071a4:	dc18      	bgt.n	80071d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071a6:	f7ff fdd1 	bl	8006d4c <xTaskGetSchedulerState>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d109      	bne.n	80071c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071b0:	4b10      	ldr	r3, [pc, #64]	@ (80071f4 <xTimerGenericCommand+0x98>)
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	f107 0110 	add.w	r1, r7, #16
 80071b8:	2300      	movs	r3, #0
 80071ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071bc:	f7fe fb9c 	bl	80058f8 <xQueueGenericSend>
 80071c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80071c2:	e012      	b.n	80071ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071c4:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <xTimerGenericCommand+0x98>)
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	f107 0110 	add.w	r1, r7, #16
 80071cc:	2300      	movs	r3, #0
 80071ce:	2200      	movs	r2, #0
 80071d0:	f7fe fb92 	bl	80058f8 <xQueueGenericSend>
 80071d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80071d6:	e008      	b.n	80071ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071d8:	4b06      	ldr	r3, [pc, #24]	@ (80071f4 <xTimerGenericCommand+0x98>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	f107 0110 	add.w	r1, r7, #16
 80071e0:	2300      	movs	r3, #0
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	f7fe fc8a 	bl	8005afc <xQueueGenericSendFromISR>
 80071e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3728      	adds	r7, #40	@ 0x28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	200011d4 	.word	0x200011d4

080071f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007202:	4b23      	ldr	r3, [pc, #140]	@ (8007290 <prvProcessExpiredTimer+0x98>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	3304      	adds	r3, #4
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fa3d 	bl	8005690 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d023      	beq.n	800726c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	18d1      	adds	r1, r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	6978      	ldr	r0, [r7, #20]
 8007232:	f000 f8d5 	bl	80073e0 <prvInsertTimerInActiveList>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d020      	beq.n	800727e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800723c:	2300      	movs	r3, #0
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	2300      	movs	r3, #0
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	2100      	movs	r1, #0
 8007246:	6978      	ldr	r0, [r7, #20]
 8007248:	f7ff ff88 	bl	800715c <xTimerGenericCommand>
 800724c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d114      	bne.n	800727e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	60fb      	str	r3, [r7, #12]
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	e7fd      	b.n	8007268 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007272:	f023 0301 	bic.w	r3, r3, #1
 8007276:	b2da      	uxtb	r2, r3
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	6978      	ldr	r0, [r7, #20]
 8007284:	4798      	blx	r3
}
 8007286:	bf00      	nop
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	200011cc 	.word	0x200011cc

08007294 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800729c:	f107 0308 	add.w	r3, r7, #8
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 f859 	bl	8007358 <prvGetNextExpireTime>
 80072a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4619      	mov	r1, r3
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f805 	bl	80072bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072b2:	f000 f8d7 	bl	8007464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072b6:	bf00      	nop
 80072b8:	e7f0      	b.n	800729c <prvTimerTask+0x8>
	...

080072bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072c6:	f7ff f94b 	bl	8006560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072ca:	f107 0308 	add.w	r3, r7, #8
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f866 	bl	80073a0 <prvSampleTimeNow>
 80072d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d130      	bne.n	800733e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <prvProcessTimerOrBlockTask+0x3c>
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d806      	bhi.n	80072f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072ea:	f7ff f947 	bl	800657c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff ff81 	bl	80071f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072f6:	e024      	b.n	8007342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d008      	beq.n	8007310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072fe:	4b13      	ldr	r3, [pc, #76]	@ (800734c <prvProcessTimerOrBlockTask+0x90>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <prvProcessTimerOrBlockTask+0x50>
 8007308:	2301      	movs	r3, #1
 800730a:	e000      	b.n	800730e <prvProcessTimerOrBlockTask+0x52>
 800730c:	2300      	movs	r3, #0
 800730e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007310:	4b0f      	ldr	r3, [pc, #60]	@ (8007350 <prvProcessTimerOrBlockTask+0x94>)
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4619      	mov	r1, r3
 800731e:	f7fe fea7 	bl	8006070 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007322:	f7ff f92b 	bl	800657c <xTaskResumeAll>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800732c:	4b09      	ldr	r3, [pc, #36]	@ (8007354 <prvProcessTimerOrBlockTask+0x98>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
}
 800733c:	e001      	b.n	8007342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800733e:	f7ff f91d 	bl	800657c <xTaskResumeAll>
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	200011d0 	.word	0x200011d0
 8007350:	200011d4 	.word	0x200011d4
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007360:	4b0e      	ldr	r3, [pc, #56]	@ (800739c <prvGetNextExpireTime+0x44>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <prvGetNextExpireTime+0x16>
 800736a:	2201      	movs	r2, #1
 800736c:	e000      	b.n	8007370 <prvGetNextExpireTime+0x18>
 800736e:	2200      	movs	r2, #0
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800737c:	4b07      	ldr	r3, [pc, #28]	@ (800739c <prvGetNextExpireTime+0x44>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e001      	b.n	800738c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800738c:	68fb      	ldr	r3, [r7, #12]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	200011cc 	.word	0x200011cc

080073a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073a8:	f7ff f986 	bl	80066b8 <xTaskGetTickCount>
 80073ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073ae:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <prvSampleTimeNow+0x3c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d205      	bcs.n	80073c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073b8:	f000 f93a 	bl	8007630 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	e002      	b.n	80073ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073ca:	4a04      	ldr	r2, [pc, #16]	@ (80073dc <prvSampleTimeNow+0x3c>)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	200011dc 	.word	0x200011dc

080073e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d812      	bhi.n	800742c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	1ad2      	subs	r2, r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	429a      	cmp	r2, r3
 8007412:	d302      	bcc.n	800741a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007414:	2301      	movs	r3, #1
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e01b      	b.n	8007452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800741a:	4b10      	ldr	r3, [pc, #64]	@ (800745c <prvInsertTimerInActiveList+0x7c>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f7fe f8fa 	bl	800561e <vListInsert>
 800742a:	e012      	b.n	8007452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d206      	bcs.n	8007442 <prvInsertTimerInActiveList+0x62>
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d302      	bcc.n	8007442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e007      	b.n	8007452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007442:	4b07      	ldr	r3, [pc, #28]	@ (8007460 <prvInsertTimerInActiveList+0x80>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3304      	adds	r3, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f7fe f8e6 	bl	800561e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007452:	697b      	ldr	r3, [r7, #20]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	200011d0 	.word	0x200011d0
 8007460:	200011cc 	.word	0x200011cc

08007464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08e      	sub	sp, #56	@ 0x38
 8007468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800746a:	e0ce      	b.n	800760a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	da19      	bge.n	80074a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007472:	1d3b      	adds	r3, r7, #4
 8007474:	3304      	adds	r3, #4
 8007476:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	61fb      	str	r3, [r7, #28]
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	e7fd      	b.n	8007492 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800749c:	6850      	ldr	r0, [r2, #4]
 800749e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074a0:	6892      	ldr	r2, [r2, #8]
 80074a2:	4611      	mov	r1, r2
 80074a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f2c0 80ae 	blt.w	800760a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074bc:	3304      	adds	r3, #4
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe f8e6 	bl	8005690 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074c4:	463b      	mov	r3, r7
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff ff6a 	bl	80073a0 <prvSampleTimeNow>
 80074cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b09      	cmp	r3, #9
 80074d2:	f200 8097 	bhi.w	8007604 <prvProcessReceivedCommands+0x1a0>
 80074d6:	a201      	add	r2, pc, #4	@ (adr r2, 80074dc <prvProcessReceivedCommands+0x78>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	08007505 	.word	0x08007505
 80074e0:	08007505 	.word	0x08007505
 80074e4:	08007505 	.word	0x08007505
 80074e8:	0800757b 	.word	0x0800757b
 80074ec:	0800758f 	.word	0x0800758f
 80074f0:	080075db 	.word	0x080075db
 80074f4:	08007505 	.word	0x08007505
 80074f8:	08007505 	.word	0x08007505
 80074fc:	0800757b 	.word	0x0800757b
 8007500:	0800758f 	.word	0x0800758f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800750a:	f043 0301 	orr.w	r3, r3, #1
 800750e:	b2da      	uxtb	r2, r3
 8007510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007512:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	18d1      	adds	r1, r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007524:	f7ff ff5c 	bl	80073e0 <prvInsertTimerInActiveList>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d06c      	beq.n	8007608 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800752e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007534:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d061      	beq.n	8007608 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	441a      	add	r2, r3
 800754c:	2300      	movs	r3, #0
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	2300      	movs	r3, #0
 8007552:	2100      	movs	r1, #0
 8007554:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007556:	f7ff fe01 	bl	800715c <xTimerGenericCommand>
 800755a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d152      	bne.n	8007608 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	61bb      	str	r3, [r7, #24]
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	e7fd      	b.n	8007576 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	b2da      	uxtb	r2, r3
 8007586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007588:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800758c:	e03d      	b.n	800760a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007594:	f043 0301 	orr.w	r3, r3, #1
 8007598:	b2da      	uxtb	r2, r3
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	617b      	str	r3, [r7, #20]
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	18d1      	adds	r1, r2, r3
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075d4:	f7ff ff04 	bl	80073e0 <prvInsertTimerInActiveList>
					break;
 80075d8:	e017      	b.n	800760a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80075e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075ea:	f000 fbe5 	bl	8007db8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075ee:	e00c      	b.n	800760a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075f6:	f023 0301 	bic.w	r3, r3, #1
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007602:	e002      	b.n	800760a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007604:	bf00      	nop
 8007606:	e000      	b.n	800760a <prvProcessReceivedCommands+0x1a6>
					break;
 8007608:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800760a:	4b08      	ldr	r3, [pc, #32]	@ (800762c <prvProcessReceivedCommands+0x1c8>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	1d39      	adds	r1, r7, #4
 8007610:	2200      	movs	r2, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fb10 	bl	8005c38 <xQueueReceive>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	f47f af26 	bne.w	800746c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop
 8007624:	3730      	adds	r7, #48	@ 0x30
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	200011d4 	.word	0x200011d4

08007630 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007636:	e049      	b.n	80076cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007638:	4b2e      	ldr	r3, [pc, #184]	@ (80076f4 <prvSwitchTimerLists+0xc4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007642:	4b2c      	ldr	r3, [pc, #176]	@ (80076f4 <prvSwitchTimerLists+0xc4>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3304      	adds	r3, #4
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe f81d 	bl	8005690 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d02f      	beq.n	80076cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4413      	add	r3, r2
 8007674:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	429a      	cmp	r2, r3
 800767c:	d90e      	bls.n	800769c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800768a:	4b1a      	ldr	r3, [pc, #104]	@ (80076f4 <prvSwitchTimerLists+0xc4>)
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3304      	adds	r3, #4
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f7fd ffc2 	bl	800561e <vListInsert>
 800769a:	e017      	b.n	80076cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800769c:	2300      	movs	r3, #0
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	2300      	movs	r3, #0
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	2100      	movs	r1, #0
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7ff fd58 	bl	800715c <xTimerGenericCommand>
 80076ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10b      	bne.n	80076cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	603b      	str	r3, [r7, #0]
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076cc:	4b09      	ldr	r3, [pc, #36]	@ (80076f4 <prvSwitchTimerLists+0xc4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1b0      	bne.n	8007638 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076d6:	4b07      	ldr	r3, [pc, #28]	@ (80076f4 <prvSwitchTimerLists+0xc4>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076dc:	4b06      	ldr	r3, [pc, #24]	@ (80076f8 <prvSwitchTimerLists+0xc8>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a04      	ldr	r2, [pc, #16]	@ (80076f4 <prvSwitchTimerLists+0xc4>)
 80076e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076e4:	4a04      	ldr	r2, [pc, #16]	@ (80076f8 <prvSwitchTimerLists+0xc8>)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6013      	str	r3, [r2, #0]
}
 80076ea:	bf00      	nop
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	200011cc 	.word	0x200011cc
 80076f8:	200011d0 	.word	0x200011d0

080076fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007702:	f000 f969 	bl	80079d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007706:	4b15      	ldr	r3, [pc, #84]	@ (800775c <prvCheckForValidListAndQueue+0x60>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d120      	bne.n	8007750 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800770e:	4814      	ldr	r0, [pc, #80]	@ (8007760 <prvCheckForValidListAndQueue+0x64>)
 8007710:	f7fd ff34 	bl	800557c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007714:	4813      	ldr	r0, [pc, #76]	@ (8007764 <prvCheckForValidListAndQueue+0x68>)
 8007716:	f7fd ff31 	bl	800557c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800771a:	4b13      	ldr	r3, [pc, #76]	@ (8007768 <prvCheckForValidListAndQueue+0x6c>)
 800771c:	4a10      	ldr	r2, [pc, #64]	@ (8007760 <prvCheckForValidListAndQueue+0x64>)
 800771e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007720:	4b12      	ldr	r3, [pc, #72]	@ (800776c <prvCheckForValidListAndQueue+0x70>)
 8007722:	4a10      	ldr	r2, [pc, #64]	@ (8007764 <prvCheckForValidListAndQueue+0x68>)
 8007724:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007726:	2300      	movs	r3, #0
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	4b11      	ldr	r3, [pc, #68]	@ (8007770 <prvCheckForValidListAndQueue+0x74>)
 800772c:	4a11      	ldr	r2, [pc, #68]	@ (8007774 <prvCheckForValidListAndQueue+0x78>)
 800772e:	2110      	movs	r1, #16
 8007730:	200a      	movs	r0, #10
 8007732:	f7fe f841 	bl	80057b8 <xQueueGenericCreateStatic>
 8007736:	4603      	mov	r3, r0
 8007738:	4a08      	ldr	r2, [pc, #32]	@ (800775c <prvCheckForValidListAndQueue+0x60>)
 800773a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800773c:	4b07      	ldr	r3, [pc, #28]	@ (800775c <prvCheckForValidListAndQueue+0x60>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007744:	4b05      	ldr	r3, [pc, #20]	@ (800775c <prvCheckForValidListAndQueue+0x60>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	490b      	ldr	r1, [pc, #44]	@ (8007778 <prvCheckForValidListAndQueue+0x7c>)
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fc66 	bl	800601c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007750:	f000 f974 	bl	8007a3c <vPortExitCritical>
}
 8007754:	bf00      	nop
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	200011d4 	.word	0x200011d4
 8007760:	200011a4 	.word	0x200011a4
 8007764:	200011b8 	.word	0x200011b8
 8007768:	200011cc 	.word	0x200011cc
 800776c:	200011d0 	.word	0x200011d0
 8007770:	20001280 	.word	0x20001280
 8007774:	200011e0 	.word	0x200011e0
 8007778:	08008f78 	.word	0x08008f78

0800777c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3b04      	subs	r3, #4
 800778c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3b04      	subs	r3, #4
 800779a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f023 0201 	bic.w	r2, r3, #1
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3b04      	subs	r3, #4
 80077aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077ac:	4a0c      	ldr	r2, [pc, #48]	@ (80077e0 <pxPortInitialiseStack+0x64>)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b14      	subs	r3, #20
 80077b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3b04      	subs	r3, #4
 80077c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f06f 0202 	mvn.w	r2, #2
 80077ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3b20      	subs	r3, #32
 80077d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077d2:	68fb      	ldr	r3, [r7, #12]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	080077e5 	.word	0x080077e5

080077e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077ee:	4b13      	ldr	r3, [pc, #76]	@ (800783c <prvTaskExitError+0x58>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d00b      	beq.n	8007810 <prvTaskExitError+0x2c>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	60fb      	str	r3, [r7, #12]
}
 800780a:	bf00      	nop
 800780c:	bf00      	nop
 800780e:	e7fd      	b.n	800780c <prvTaskExitError+0x28>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	60bb      	str	r3, [r7, #8]
}
 8007822:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007824:	bf00      	nop
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0fc      	beq.n	8007826 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	2000000c 	.word	0x2000000c

08007840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007840:	4b07      	ldr	r3, [pc, #28]	@ (8007860 <pxCurrentTCBConst2>)
 8007842:	6819      	ldr	r1, [r3, #0]
 8007844:	6808      	ldr	r0, [r1, #0]
 8007846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784a:	f380 8809 	msr	PSP, r0
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f380 8811 	msr	BASEPRI, r0
 800785a:	4770      	bx	lr
 800785c:	f3af 8000 	nop.w

08007860 <pxCurrentTCBConst2>:
 8007860:	20000ca4 	.word	0x20000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop

08007868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007868:	4808      	ldr	r0, [pc, #32]	@ (800788c <prvPortStartFirstTask+0x24>)
 800786a:	6800      	ldr	r0, [r0, #0]
 800786c:	6800      	ldr	r0, [r0, #0]
 800786e:	f380 8808 	msr	MSP, r0
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8814 	msr	CONTROL, r0
 800787a:	b662      	cpsie	i
 800787c:	b661      	cpsie	f
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	df00      	svc	0
 8007888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800788a:	bf00      	nop
 800788c:	e000ed08 	.word	0xe000ed08

08007890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007896:	4b47      	ldr	r3, [pc, #284]	@ (80079b4 <xPortStartScheduler+0x124>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a47      	ldr	r2, [pc, #284]	@ (80079b8 <xPortStartScheduler+0x128>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10b      	bne.n	80078b8 <xPortStartScheduler+0x28>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60fb      	str	r3, [r7, #12]
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078b8:	4b3e      	ldr	r3, [pc, #248]	@ (80079b4 <xPortStartScheduler+0x124>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a3f      	ldr	r2, [pc, #252]	@ (80079bc <xPortStartScheduler+0x12c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d10b      	bne.n	80078da <xPortStartScheduler+0x4a>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	613b      	str	r3, [r7, #16]
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078da:	4b39      	ldr	r3, [pc, #228]	@ (80079c0 <xPortStartScheduler+0x130>)
 80078dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	22ff      	movs	r2, #255	@ 0xff
 80078ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	4b31      	ldr	r3, [pc, #196]	@ (80079c4 <xPortStartScheduler+0x134>)
 8007900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007902:	4b31      	ldr	r3, [pc, #196]	@ (80079c8 <xPortStartScheduler+0x138>)
 8007904:	2207      	movs	r2, #7
 8007906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007908:	e009      	b.n	800791e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800790a:	4b2f      	ldr	r3, [pc, #188]	@ (80079c8 <xPortStartScheduler+0x138>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3b01      	subs	r3, #1
 8007910:	4a2d      	ldr	r2, [pc, #180]	@ (80079c8 <xPortStartScheduler+0x138>)
 8007912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	b2db      	uxtb	r3, r3
 800791c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007926:	2b80      	cmp	r3, #128	@ 0x80
 8007928:	d0ef      	beq.n	800790a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800792a:	4b27      	ldr	r3, [pc, #156]	@ (80079c8 <xPortStartScheduler+0x138>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f1c3 0307 	rsb	r3, r3, #7
 8007932:	2b04      	cmp	r3, #4
 8007934:	d00b      	beq.n	800794e <xPortStartScheduler+0xbe>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60bb      	str	r3, [r7, #8]
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	e7fd      	b.n	800794a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800794e:	4b1e      	ldr	r3, [pc, #120]	@ (80079c8 <xPortStartScheduler+0x138>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	4a1c      	ldr	r2, [pc, #112]	@ (80079c8 <xPortStartScheduler+0x138>)
 8007956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007958:	4b1b      	ldr	r3, [pc, #108]	@ (80079c8 <xPortStartScheduler+0x138>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007960:	4a19      	ldr	r2, [pc, #100]	@ (80079c8 <xPortStartScheduler+0x138>)
 8007962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	b2da      	uxtb	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800796c:	4b17      	ldr	r3, [pc, #92]	@ (80079cc <xPortStartScheduler+0x13c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a16      	ldr	r2, [pc, #88]	@ (80079cc <xPortStartScheduler+0x13c>)
 8007972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007978:	4b14      	ldr	r3, [pc, #80]	@ (80079cc <xPortStartScheduler+0x13c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a13      	ldr	r2, [pc, #76]	@ (80079cc <xPortStartScheduler+0x13c>)
 800797e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007984:	f000 f8da 	bl	8007b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007988:	4b11      	ldr	r3, [pc, #68]	@ (80079d0 <xPortStartScheduler+0x140>)
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800798e:	f000 f8f9 	bl	8007b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007992:	4b10      	ldr	r3, [pc, #64]	@ (80079d4 <xPortStartScheduler+0x144>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a0f      	ldr	r2, [pc, #60]	@ (80079d4 <xPortStartScheduler+0x144>)
 8007998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800799c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800799e:	f7ff ff63 	bl	8007868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079a2:	f7fe ff53 	bl	800684c <vTaskSwitchContext>
	prvTaskExitError();
 80079a6:	f7ff ff1d 	bl	80077e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	e000ed00 	.word	0xe000ed00
 80079b8:	410fc271 	.word	0x410fc271
 80079bc:	410fc270 	.word	0x410fc270
 80079c0:	e000e400 	.word	0xe000e400
 80079c4:	200012d0 	.word	0x200012d0
 80079c8:	200012d4 	.word	0x200012d4
 80079cc:	e000ed20 	.word	0xe000ed20
 80079d0:	2000000c 	.word	0x2000000c
 80079d4:	e000ef34 	.word	0xe000ef34

080079d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	607b      	str	r3, [r7, #4]
}
 80079f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079f2:	4b10      	ldr	r3, [pc, #64]	@ (8007a34 <vPortEnterCritical+0x5c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3301      	adds	r3, #1
 80079f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007a34 <vPortEnterCritical+0x5c>)
 80079fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a34 <vPortEnterCritical+0x5c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d110      	bne.n	8007a26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a04:	4b0c      	ldr	r3, [pc, #48]	@ (8007a38 <vPortEnterCritical+0x60>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00b      	beq.n	8007a26 <vPortEnterCritical+0x4e>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	603b      	str	r3, [r7, #0]
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	e7fd      	b.n	8007a22 <vPortEnterCritical+0x4a>
	}
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	2000000c 	.word	0x2000000c
 8007a38:	e000ed04 	.word	0xe000ed04

08007a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a42:	4b12      	ldr	r3, [pc, #72]	@ (8007a8c <vPortExitCritical+0x50>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10b      	bne.n	8007a62 <vPortExitCritical+0x26>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	607b      	str	r3, [r7, #4]
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	e7fd      	b.n	8007a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a62:	4b0a      	ldr	r3, [pc, #40]	@ (8007a8c <vPortExitCritical+0x50>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	4a08      	ldr	r2, [pc, #32]	@ (8007a8c <vPortExitCritical+0x50>)
 8007a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a6c:	4b07      	ldr	r3, [pc, #28]	@ (8007a8c <vPortExitCritical+0x50>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d105      	bne.n	8007a80 <vPortExitCritical+0x44>
 8007a74:	2300      	movs	r3, #0
 8007a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	f383 8811 	msr	BASEPRI, r3
}
 8007a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	2000000c 	.word	0x2000000c

08007a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a90:	f3ef 8009 	mrs	r0, PSP
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	4b15      	ldr	r3, [pc, #84]	@ (8007af0 <pxCurrentTCBConst>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f01e 0f10 	tst.w	lr, #16
 8007aa0:	bf08      	it	eq
 8007aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	6010      	str	r0, [r2, #0]
 8007aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007ab4:	f380 8811 	msr	BASEPRI, r0
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f7fe fec4 	bl	800684c <vTaskSwitchContext>
 8007ac4:	f04f 0000 	mov.w	r0, #0
 8007ac8:	f380 8811 	msr	BASEPRI, r0
 8007acc:	bc09      	pop	{r0, r3}
 8007ace:	6819      	ldr	r1, [r3, #0]
 8007ad0:	6808      	ldr	r0, [r1, #0]
 8007ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad6:	f01e 0f10 	tst.w	lr, #16
 8007ada:	bf08      	it	eq
 8007adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ae0:	f380 8809 	msr	PSP, r0
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	f3af 8000 	nop.w

08007af0 <pxCurrentTCBConst>:
 8007af0:	20000ca4 	.word	0x20000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop

08007af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	607b      	str	r3, [r7, #4]
}
 8007b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b12:	f7fe fde1 	bl	80066d8 <xTaskIncrementTick>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b1c:	4b06      	ldr	r3, [pc, #24]	@ (8007b38 <xPortSysTickHandler+0x40>)
 8007b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	2300      	movs	r3, #0
 8007b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f383 8811 	msr	BASEPRI, r3
}
 8007b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b40:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <vPortSetupTimerInterrupt+0x34>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b46:	4b0b      	ldr	r3, [pc, #44]	@ (8007b74 <vPortSetupTimerInterrupt+0x38>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b78 <vPortSetupTimerInterrupt+0x3c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a0a      	ldr	r2, [pc, #40]	@ (8007b7c <vPortSetupTimerInterrupt+0x40>)
 8007b52:	fba2 2303 	umull	r2, r3, r2, r3
 8007b56:	099b      	lsrs	r3, r3, #6
 8007b58:	4a09      	ldr	r2, [pc, #36]	@ (8007b80 <vPortSetupTimerInterrupt+0x44>)
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b5e:	4b04      	ldr	r3, [pc, #16]	@ (8007b70 <vPortSetupTimerInterrupt+0x34>)
 8007b60:	2207      	movs	r2, #7
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	e000e010 	.word	0xe000e010
 8007b74:	e000e018 	.word	0xe000e018
 8007b78:	20000000 	.word	0x20000000
 8007b7c:	10624dd3 	.word	0x10624dd3
 8007b80:	e000e014 	.word	0xe000e014

08007b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b94 <vPortEnableVFP+0x10>
 8007b88:	6801      	ldr	r1, [r0, #0]
 8007b8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007b8e:	6001      	str	r1, [r0, #0]
 8007b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b92:	bf00      	nop
 8007b94:	e000ed88 	.word	0xe000ed88

08007b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b9e:	f3ef 8305 	mrs	r3, IPSR
 8007ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b0f      	cmp	r3, #15
 8007ba8:	d915      	bls.n	8007bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007baa:	4a18      	ldr	r2, [pc, #96]	@ (8007c0c <vPortValidateInterruptPriority+0x74>)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bb4:	4b16      	ldr	r3, [pc, #88]	@ (8007c10 <vPortValidateInterruptPriority+0x78>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	7afa      	ldrb	r2, [r7, #11]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d20b      	bcs.n	8007bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	607b      	str	r3, [r7, #4]
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	e7fd      	b.n	8007bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c14 <vPortValidateInterruptPriority+0x7c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bde:	4b0e      	ldr	r3, [pc, #56]	@ (8007c18 <vPortValidateInterruptPriority+0x80>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d90b      	bls.n	8007bfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	603b      	str	r3, [r7, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <vPortValidateInterruptPriority+0x62>
	}
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	e000e3f0 	.word	0xe000e3f0
 8007c10:	200012d0 	.word	0x200012d0
 8007c14:	e000ed0c 	.word	0xe000ed0c
 8007c18:	200012d4 	.word	0x200012d4

08007c1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	@ 0x28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c28:	f7fe fc9a 	bl	8006560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8007da0 <pvPortMalloc+0x184>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c34:	f000 f924 	bl	8007e80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c38:	4b5a      	ldr	r3, [pc, #360]	@ (8007da4 <pvPortMalloc+0x188>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f040 8095 	bne.w	8007d70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01e      	beq.n	8007c8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4413      	add	r3, r2
 8007c52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d015      	beq.n	8007c8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f023 0307 	bic.w	r3, r3, #7
 8007c64:	3308      	adds	r3, #8
 8007c66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f003 0307 	and.w	r3, r3, #7
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00b      	beq.n	8007c8a <pvPortMalloc+0x6e>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	617b      	str	r3, [r7, #20]
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	e7fd      	b.n	8007c86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d06f      	beq.n	8007d70 <pvPortMalloc+0x154>
 8007c90:	4b45      	ldr	r3, [pc, #276]	@ (8007da8 <pvPortMalloc+0x18c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d86a      	bhi.n	8007d70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c9a:	4b44      	ldr	r3, [pc, #272]	@ (8007dac <pvPortMalloc+0x190>)
 8007c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c9e:	4b43      	ldr	r3, [pc, #268]	@ (8007dac <pvPortMalloc+0x190>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ca4:	e004      	b.n	8007cb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d903      	bls.n	8007cc2 <pvPortMalloc+0xa6>
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1f1      	bne.n	8007ca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cc2:	4b37      	ldr	r3, [pc, #220]	@ (8007da0 <pvPortMalloc+0x184>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d051      	beq.n	8007d70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	4413      	add	r3, r2
 8007cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	1ad2      	subs	r2, r2, r3
 8007ce6:	2308      	movs	r3, #8
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d920      	bls.n	8007d30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <pvPortMalloc+0xfc>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	613b      	str	r3, [r7, #16]
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	1ad2      	subs	r2, r2, r3
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d2a:	69b8      	ldr	r0, [r7, #24]
 8007d2c:	f000 f90a 	bl	8007f44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d30:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <pvPortMalloc+0x18c>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8007da8 <pvPortMalloc+0x18c>)
 8007d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8007da8 <pvPortMalloc+0x18c>)
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	4b1b      	ldr	r3, [pc, #108]	@ (8007db0 <pvPortMalloc+0x194>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d203      	bcs.n	8007d52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d4a:	4b17      	ldr	r3, [pc, #92]	@ (8007da8 <pvPortMalloc+0x18c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a18      	ldr	r2, [pc, #96]	@ (8007db0 <pvPortMalloc+0x194>)
 8007d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	4b13      	ldr	r3, [pc, #76]	@ (8007da4 <pvPortMalloc+0x188>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d66:	4b13      	ldr	r3, [pc, #76]	@ (8007db4 <pvPortMalloc+0x198>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	4a11      	ldr	r2, [pc, #68]	@ (8007db4 <pvPortMalloc+0x198>)
 8007d6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d70:	f7fe fc04 	bl	800657c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <pvPortMalloc+0x17a>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	60fb      	str	r3, [r7, #12]
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	e7fd      	b.n	8007d92 <pvPortMalloc+0x176>
	return pvReturn;
 8007d96:	69fb      	ldr	r3, [r7, #28]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3728      	adds	r7, #40	@ 0x28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20001ee0 	.word	0x20001ee0
 8007da4:	20001ef4 	.word	0x20001ef4
 8007da8:	20001ee4 	.word	0x20001ee4
 8007dac:	20001ed8 	.word	0x20001ed8
 8007db0:	20001ee8 	.word	0x20001ee8
 8007db4:	20001eec 	.word	0x20001eec

08007db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d04f      	beq.n	8007e6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007dca:	2308      	movs	r3, #8
 8007dcc:	425b      	negs	r3, r3
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	4b25      	ldr	r3, [pc, #148]	@ (8007e74 <vPortFree+0xbc>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10b      	bne.n	8007dfe <vPortFree+0x46>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	60fb      	str	r3, [r7, #12]
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	e7fd      	b.n	8007dfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <vPortFree+0x66>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	60bb      	str	r3, [r7, #8]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	4b14      	ldr	r3, [pc, #80]	@ (8007e74 <vPortFree+0xbc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4013      	ands	r3, r2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01e      	beq.n	8007e6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d11a      	bne.n	8007e6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	4b0e      	ldr	r3, [pc, #56]	@ (8007e74 <vPortFree+0xbc>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	401a      	ands	r2, r3
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e44:	f7fe fb8c 	bl	8006560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e78 <vPortFree+0xc0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4413      	add	r3, r2
 8007e52:	4a09      	ldr	r2, [pc, #36]	@ (8007e78 <vPortFree+0xc0>)
 8007e54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e56:	6938      	ldr	r0, [r7, #16]
 8007e58:	f000 f874 	bl	8007f44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e5c:	4b07      	ldr	r3, [pc, #28]	@ (8007e7c <vPortFree+0xc4>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3301      	adds	r3, #1
 8007e62:	4a06      	ldr	r2, [pc, #24]	@ (8007e7c <vPortFree+0xc4>)
 8007e64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e66:	f7fe fb89 	bl	800657c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e6a:	bf00      	nop
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20001ef4 	.word	0x20001ef4
 8007e78:	20001ee4 	.word	0x20001ee4
 8007e7c:	20001ef0 	.word	0x20001ef0

08007e80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007e8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e8c:	4b27      	ldr	r3, [pc, #156]	@ (8007f2c <prvHeapInit+0xac>)
 8007e8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00c      	beq.n	8007eb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3307      	adds	r3, #7
 8007e9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0307 	bic.w	r3, r3, #7
 8007ea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	4a1f      	ldr	r2, [pc, #124]	@ (8007f2c <prvHeapInit+0xac>)
 8007eb0:	4413      	add	r3, r2
 8007eb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f30 <prvHeapInit+0xb0>)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8007f30 <prvHeapInit+0xb0>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	4413      	add	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ecc:	2208      	movs	r2, #8
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0307 	bic.w	r3, r3, #7
 8007eda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4a15      	ldr	r2, [pc, #84]	@ (8007f34 <prvHeapInit+0xb4>)
 8007ee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ee2:	4b14      	ldr	r3, [pc, #80]	@ (8007f34 <prvHeapInit+0xb4>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007eea:	4b12      	ldr	r3, [pc, #72]	@ (8007f34 <prvHeapInit+0xb4>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	1ad2      	subs	r2, r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f00:	4b0c      	ldr	r3, [pc, #48]	@ (8007f34 <prvHeapInit+0xb4>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8007f38 <prvHeapInit+0xb8>)
 8007f0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	4a09      	ldr	r2, [pc, #36]	@ (8007f3c <prvHeapInit+0xbc>)
 8007f16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f18:	4b09      	ldr	r3, [pc, #36]	@ (8007f40 <prvHeapInit+0xc0>)
 8007f1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f1e:	601a      	str	r2, [r3, #0]
}
 8007f20:	bf00      	nop
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	200012d8 	.word	0x200012d8
 8007f30:	20001ed8 	.word	0x20001ed8
 8007f34:	20001ee0 	.word	0x20001ee0
 8007f38:	20001ee8 	.word	0x20001ee8
 8007f3c:	20001ee4 	.word	0x20001ee4
 8007f40:	20001ef4 	.word	0x20001ef4

08007f44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f4c:	4b28      	ldr	r3, [pc, #160]	@ (8007ff0 <prvInsertBlockIntoFreeList+0xac>)
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	e002      	b.n	8007f58 <prvInsertBlockIntoFreeList+0x14>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d8f7      	bhi.n	8007f52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d108      	bne.n	8007f86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	441a      	add	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	441a      	add	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d118      	bne.n	8007fcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	4b15      	ldr	r3, [pc, #84]	@ (8007ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d00d      	beq.n	8007fc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685a      	ldr	r2, [r3, #4]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	441a      	add	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	e008      	b.n	8007fd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	e003      	b.n	8007fd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d002      	beq.n	8007fe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fe2:	bf00      	nop
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	20001ed8 	.word	0x20001ed8
 8007ff4:	20001ee0 	.word	0x20001ee0

08007ff8 <memset>:
 8007ff8:	4402      	add	r2, r0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d100      	bne.n	8008002 <memset+0xa>
 8008000:	4770      	bx	lr
 8008002:	f803 1b01 	strb.w	r1, [r3], #1
 8008006:	e7f9      	b.n	8007ffc <memset+0x4>

08008008 <__errno>:
 8008008:	4b01      	ldr	r3, [pc, #4]	@ (8008010 <__errno+0x8>)
 800800a:	6818      	ldr	r0, [r3, #0]
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	20000010 	.word	0x20000010

08008014 <__libc_init_array>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	4d0d      	ldr	r5, [pc, #52]	@ (800804c <__libc_init_array+0x38>)
 8008018:	4c0d      	ldr	r4, [pc, #52]	@ (8008050 <__libc_init_array+0x3c>)
 800801a:	1b64      	subs	r4, r4, r5
 800801c:	10a4      	asrs	r4, r4, #2
 800801e:	2600      	movs	r6, #0
 8008020:	42a6      	cmp	r6, r4
 8008022:	d109      	bne.n	8008038 <__libc_init_array+0x24>
 8008024:	4d0b      	ldr	r5, [pc, #44]	@ (8008054 <__libc_init_array+0x40>)
 8008026:	4c0c      	ldr	r4, [pc, #48]	@ (8008058 <__libc_init_array+0x44>)
 8008028:	f000 ff84 	bl	8008f34 <_init>
 800802c:	1b64      	subs	r4, r4, r5
 800802e:	10a4      	asrs	r4, r4, #2
 8008030:	2600      	movs	r6, #0
 8008032:	42a6      	cmp	r6, r4
 8008034:	d105      	bne.n	8008042 <__libc_init_array+0x2e>
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	f855 3b04 	ldr.w	r3, [r5], #4
 800803c:	4798      	blx	r3
 800803e:	3601      	adds	r6, #1
 8008040:	e7ee      	b.n	8008020 <__libc_init_array+0xc>
 8008042:	f855 3b04 	ldr.w	r3, [r5], #4
 8008046:	4798      	blx	r3
 8008048:	3601      	adds	r6, #1
 800804a:	e7f2      	b.n	8008032 <__libc_init_array+0x1e>
 800804c:	08009028 	.word	0x08009028
 8008050:	08009028 	.word	0x08009028
 8008054:	08009028 	.word	0x08009028
 8008058:	0800902c 	.word	0x0800902c

0800805c <memcpy>:
 800805c:	440a      	add	r2, r1
 800805e:	4291      	cmp	r1, r2
 8008060:	f100 33ff 	add.w	r3, r0, #4294967295
 8008064:	d100      	bne.n	8008068 <memcpy+0xc>
 8008066:	4770      	bx	lr
 8008068:	b510      	push	{r4, lr}
 800806a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800806e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008072:	4291      	cmp	r1, r2
 8008074:	d1f9      	bne.n	800806a <memcpy+0xe>
 8008076:	bd10      	pop	{r4, pc}

08008078 <pow>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	ed2d 8b02 	vpush	{d8}
 800807e:	eeb0 8a40 	vmov.f32	s16, s0
 8008082:	eef0 8a60 	vmov.f32	s17, s1
 8008086:	ec55 4b11 	vmov	r4, r5, d1
 800808a:	f000 f871 	bl	8008170 <__ieee754_pow>
 800808e:	4622      	mov	r2, r4
 8008090:	462b      	mov	r3, r5
 8008092:	4620      	mov	r0, r4
 8008094:	4629      	mov	r1, r5
 8008096:	ec57 6b10 	vmov	r6, r7, d0
 800809a:	f7f8 fd17 	bl	8000acc <__aeabi_dcmpun>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d13b      	bne.n	800811a <pow+0xa2>
 80080a2:	ec51 0b18 	vmov	r0, r1, d8
 80080a6:	2200      	movs	r2, #0
 80080a8:	2300      	movs	r3, #0
 80080aa:	f7f8 fcdd 	bl	8000a68 <__aeabi_dcmpeq>
 80080ae:	b1b8      	cbz	r0, 80080e0 <pow+0x68>
 80080b0:	2200      	movs	r2, #0
 80080b2:	2300      	movs	r3, #0
 80080b4:	4620      	mov	r0, r4
 80080b6:	4629      	mov	r1, r5
 80080b8:	f7f8 fcd6 	bl	8000a68 <__aeabi_dcmpeq>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d146      	bne.n	800814e <pow+0xd6>
 80080c0:	ec45 4b10 	vmov	d0, r4, r5
 80080c4:	f000 f848 	bl	8008158 <finite>
 80080c8:	b338      	cbz	r0, 800811a <pow+0xa2>
 80080ca:	2200      	movs	r2, #0
 80080cc:	2300      	movs	r3, #0
 80080ce:	4620      	mov	r0, r4
 80080d0:	4629      	mov	r1, r5
 80080d2:	f7f8 fcd3 	bl	8000a7c <__aeabi_dcmplt>
 80080d6:	b300      	cbz	r0, 800811a <pow+0xa2>
 80080d8:	f7ff ff96 	bl	8008008 <__errno>
 80080dc:	2322      	movs	r3, #34	@ 0x22
 80080de:	e01b      	b.n	8008118 <pow+0xa0>
 80080e0:	ec47 6b10 	vmov	d0, r6, r7
 80080e4:	f000 f838 	bl	8008158 <finite>
 80080e8:	b9e0      	cbnz	r0, 8008124 <pow+0xac>
 80080ea:	eeb0 0a48 	vmov.f32	s0, s16
 80080ee:	eef0 0a68 	vmov.f32	s1, s17
 80080f2:	f000 f831 	bl	8008158 <finite>
 80080f6:	b1a8      	cbz	r0, 8008124 <pow+0xac>
 80080f8:	ec45 4b10 	vmov	d0, r4, r5
 80080fc:	f000 f82c 	bl	8008158 <finite>
 8008100:	b180      	cbz	r0, 8008124 <pow+0xac>
 8008102:	4632      	mov	r2, r6
 8008104:	463b      	mov	r3, r7
 8008106:	4630      	mov	r0, r6
 8008108:	4639      	mov	r1, r7
 800810a:	f7f8 fcdf 	bl	8000acc <__aeabi_dcmpun>
 800810e:	2800      	cmp	r0, #0
 8008110:	d0e2      	beq.n	80080d8 <pow+0x60>
 8008112:	f7ff ff79 	bl	8008008 <__errno>
 8008116:	2321      	movs	r3, #33	@ 0x21
 8008118:	6003      	str	r3, [r0, #0]
 800811a:	ecbd 8b02 	vpop	{d8}
 800811e:	ec47 6b10 	vmov	d0, r6, r7
 8008122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008124:	2200      	movs	r2, #0
 8008126:	2300      	movs	r3, #0
 8008128:	4630      	mov	r0, r6
 800812a:	4639      	mov	r1, r7
 800812c:	f7f8 fc9c 	bl	8000a68 <__aeabi_dcmpeq>
 8008130:	2800      	cmp	r0, #0
 8008132:	d0f2      	beq.n	800811a <pow+0xa2>
 8008134:	eeb0 0a48 	vmov.f32	s0, s16
 8008138:	eef0 0a68 	vmov.f32	s1, s17
 800813c:	f000 f80c 	bl	8008158 <finite>
 8008140:	2800      	cmp	r0, #0
 8008142:	d0ea      	beq.n	800811a <pow+0xa2>
 8008144:	ec45 4b10 	vmov	d0, r4, r5
 8008148:	f000 f806 	bl	8008158 <finite>
 800814c:	e7c3      	b.n	80080d6 <pow+0x5e>
 800814e:	4f01      	ldr	r7, [pc, #4]	@ (8008154 <pow+0xdc>)
 8008150:	2600      	movs	r6, #0
 8008152:	e7e2      	b.n	800811a <pow+0xa2>
 8008154:	3ff00000 	.word	0x3ff00000

08008158 <finite>:
 8008158:	b082      	sub	sp, #8
 800815a:	ed8d 0b00 	vstr	d0, [sp]
 800815e:	9801      	ldr	r0, [sp, #4]
 8008160:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008164:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008168:	0fc0      	lsrs	r0, r0, #31
 800816a:	b002      	add	sp, #8
 800816c:	4770      	bx	lr
	...

08008170 <__ieee754_pow>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	b091      	sub	sp, #68	@ 0x44
 8008176:	ed8d 1b00 	vstr	d1, [sp]
 800817a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800817e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008182:	ea5a 0001 	orrs.w	r0, sl, r1
 8008186:	ec57 6b10 	vmov	r6, r7, d0
 800818a:	d113      	bne.n	80081b4 <__ieee754_pow+0x44>
 800818c:	19b3      	adds	r3, r6, r6
 800818e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008192:	4152      	adcs	r2, r2
 8008194:	4298      	cmp	r0, r3
 8008196:	4b9a      	ldr	r3, [pc, #616]	@ (8008400 <__ieee754_pow+0x290>)
 8008198:	4193      	sbcs	r3, r2
 800819a:	f080 84ee 	bcs.w	8008b7a <__ieee754_pow+0xa0a>
 800819e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a2:	4630      	mov	r0, r6
 80081a4:	4639      	mov	r1, r7
 80081a6:	f7f8 f841 	bl	800022c <__adddf3>
 80081aa:	ec41 0b10 	vmov	d0, r0, r1
 80081ae:	b011      	add	sp, #68	@ 0x44
 80081b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b4:	4a93      	ldr	r2, [pc, #588]	@ (8008404 <__ieee754_pow+0x294>)
 80081b6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80081ba:	4295      	cmp	r5, r2
 80081bc:	46b8      	mov	r8, r7
 80081be:	4633      	mov	r3, r6
 80081c0:	d80a      	bhi.n	80081d8 <__ieee754_pow+0x68>
 80081c2:	d104      	bne.n	80081ce <__ieee754_pow+0x5e>
 80081c4:	2e00      	cmp	r6, #0
 80081c6:	d1ea      	bne.n	800819e <__ieee754_pow+0x2e>
 80081c8:	45aa      	cmp	sl, r5
 80081ca:	d8e8      	bhi.n	800819e <__ieee754_pow+0x2e>
 80081cc:	e001      	b.n	80081d2 <__ieee754_pow+0x62>
 80081ce:	4592      	cmp	sl, r2
 80081d0:	d802      	bhi.n	80081d8 <__ieee754_pow+0x68>
 80081d2:	4592      	cmp	sl, r2
 80081d4:	d10f      	bne.n	80081f6 <__ieee754_pow+0x86>
 80081d6:	b171      	cbz	r1, 80081f6 <__ieee754_pow+0x86>
 80081d8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80081dc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80081e0:	ea58 0803 	orrs.w	r8, r8, r3
 80081e4:	d1db      	bne.n	800819e <__ieee754_pow+0x2e>
 80081e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80081ea:	18db      	adds	r3, r3, r3
 80081ec:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80081f0:	4152      	adcs	r2, r2
 80081f2:	4598      	cmp	r8, r3
 80081f4:	e7cf      	b.n	8008196 <__ieee754_pow+0x26>
 80081f6:	f1b8 0f00 	cmp.w	r8, #0
 80081fa:	46ab      	mov	fp, r5
 80081fc:	da43      	bge.n	8008286 <__ieee754_pow+0x116>
 80081fe:	4a82      	ldr	r2, [pc, #520]	@ (8008408 <__ieee754_pow+0x298>)
 8008200:	4592      	cmp	sl, r2
 8008202:	d856      	bhi.n	80082b2 <__ieee754_pow+0x142>
 8008204:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008208:	4592      	cmp	sl, r2
 800820a:	f240 84c5 	bls.w	8008b98 <__ieee754_pow+0xa28>
 800820e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008212:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008216:	2a14      	cmp	r2, #20
 8008218:	dd18      	ble.n	800824c <__ieee754_pow+0xdc>
 800821a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800821e:	fa21 f402 	lsr.w	r4, r1, r2
 8008222:	fa04 f202 	lsl.w	r2, r4, r2
 8008226:	428a      	cmp	r2, r1
 8008228:	f040 84b6 	bne.w	8008b98 <__ieee754_pow+0xa28>
 800822c:	f004 0401 	and.w	r4, r4, #1
 8008230:	f1c4 0402 	rsb	r4, r4, #2
 8008234:	2900      	cmp	r1, #0
 8008236:	d159      	bne.n	80082ec <__ieee754_pow+0x17c>
 8008238:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800823c:	d148      	bne.n	80082d0 <__ieee754_pow+0x160>
 800823e:	4632      	mov	r2, r6
 8008240:	463b      	mov	r3, r7
 8008242:	4630      	mov	r0, r6
 8008244:	4639      	mov	r1, r7
 8008246:	f7f8 f9a7 	bl	8000598 <__aeabi_dmul>
 800824a:	e7ae      	b.n	80081aa <__ieee754_pow+0x3a>
 800824c:	2900      	cmp	r1, #0
 800824e:	d14c      	bne.n	80082ea <__ieee754_pow+0x17a>
 8008250:	f1c2 0214 	rsb	r2, r2, #20
 8008254:	fa4a f402 	asr.w	r4, sl, r2
 8008258:	fa04 f202 	lsl.w	r2, r4, r2
 800825c:	4552      	cmp	r2, sl
 800825e:	f040 8498 	bne.w	8008b92 <__ieee754_pow+0xa22>
 8008262:	f004 0401 	and.w	r4, r4, #1
 8008266:	f1c4 0402 	rsb	r4, r4, #2
 800826a:	4a68      	ldr	r2, [pc, #416]	@ (800840c <__ieee754_pow+0x29c>)
 800826c:	4592      	cmp	sl, r2
 800826e:	d1e3      	bne.n	8008238 <__ieee754_pow+0xc8>
 8008270:	f1b9 0f00 	cmp.w	r9, #0
 8008274:	f280 8489 	bge.w	8008b8a <__ieee754_pow+0xa1a>
 8008278:	4964      	ldr	r1, [pc, #400]	@ (800840c <__ieee754_pow+0x29c>)
 800827a:	4632      	mov	r2, r6
 800827c:	463b      	mov	r3, r7
 800827e:	2000      	movs	r0, #0
 8008280:	f7f8 fab4 	bl	80007ec <__aeabi_ddiv>
 8008284:	e791      	b.n	80081aa <__ieee754_pow+0x3a>
 8008286:	2400      	movs	r4, #0
 8008288:	bb81      	cbnz	r1, 80082ec <__ieee754_pow+0x17c>
 800828a:	4a5e      	ldr	r2, [pc, #376]	@ (8008404 <__ieee754_pow+0x294>)
 800828c:	4592      	cmp	sl, r2
 800828e:	d1ec      	bne.n	800826a <__ieee754_pow+0xfa>
 8008290:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8008294:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008298:	431a      	orrs	r2, r3
 800829a:	f000 846e 	beq.w	8008b7a <__ieee754_pow+0xa0a>
 800829e:	4b5c      	ldr	r3, [pc, #368]	@ (8008410 <__ieee754_pow+0x2a0>)
 80082a0:	429d      	cmp	r5, r3
 80082a2:	d908      	bls.n	80082b6 <__ieee754_pow+0x146>
 80082a4:	f1b9 0f00 	cmp.w	r9, #0
 80082a8:	f280 846b 	bge.w	8008b82 <__ieee754_pow+0xa12>
 80082ac:	2000      	movs	r0, #0
 80082ae:	2100      	movs	r1, #0
 80082b0:	e77b      	b.n	80081aa <__ieee754_pow+0x3a>
 80082b2:	2402      	movs	r4, #2
 80082b4:	e7e8      	b.n	8008288 <__ieee754_pow+0x118>
 80082b6:	f1b9 0f00 	cmp.w	r9, #0
 80082ba:	f04f 0000 	mov.w	r0, #0
 80082be:	f04f 0100 	mov.w	r1, #0
 80082c2:	f6bf af72 	bge.w	80081aa <__ieee754_pow+0x3a>
 80082c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80082ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80082ce:	e76c      	b.n	80081aa <__ieee754_pow+0x3a>
 80082d0:	4a50      	ldr	r2, [pc, #320]	@ (8008414 <__ieee754_pow+0x2a4>)
 80082d2:	4591      	cmp	r9, r2
 80082d4:	d10a      	bne.n	80082ec <__ieee754_pow+0x17c>
 80082d6:	f1b8 0f00 	cmp.w	r8, #0
 80082da:	db07      	blt.n	80082ec <__ieee754_pow+0x17c>
 80082dc:	ec47 6b10 	vmov	d0, r6, r7
 80082e0:	b011      	add	sp, #68	@ 0x44
 80082e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e6:	f000 bd4f 	b.w	8008d88 <__ieee754_sqrt>
 80082ea:	2400      	movs	r4, #0
 80082ec:	ec47 6b10 	vmov	d0, r6, r7
 80082f0:	9302      	str	r3, [sp, #8]
 80082f2:	f000 fc87 	bl	8008c04 <fabs>
 80082f6:	9b02      	ldr	r3, [sp, #8]
 80082f8:	ec51 0b10 	vmov	r0, r1, d0
 80082fc:	bb43      	cbnz	r3, 8008350 <__ieee754_pow+0x1e0>
 80082fe:	4b43      	ldr	r3, [pc, #268]	@ (800840c <__ieee754_pow+0x29c>)
 8008300:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8008304:	429a      	cmp	r2, r3
 8008306:	d000      	beq.n	800830a <__ieee754_pow+0x19a>
 8008308:	bb15      	cbnz	r5, 8008350 <__ieee754_pow+0x1e0>
 800830a:	f1b9 0f00 	cmp.w	r9, #0
 800830e:	da05      	bge.n	800831c <__ieee754_pow+0x1ac>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	2000      	movs	r0, #0
 8008316:	493d      	ldr	r1, [pc, #244]	@ (800840c <__ieee754_pow+0x29c>)
 8008318:	f7f8 fa68 	bl	80007ec <__aeabi_ddiv>
 800831c:	f1b8 0f00 	cmp.w	r8, #0
 8008320:	f6bf af43 	bge.w	80081aa <__ieee754_pow+0x3a>
 8008324:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008328:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800832c:	4325      	orrs	r5, r4
 800832e:	d108      	bne.n	8008342 <__ieee754_pow+0x1d2>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4610      	mov	r0, r2
 8008336:	4619      	mov	r1, r3
 8008338:	f7f7 ff76 	bl	8000228 <__aeabi_dsub>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	e79e      	b.n	8008280 <__ieee754_pow+0x110>
 8008342:	2c01      	cmp	r4, #1
 8008344:	f47f af31 	bne.w	80081aa <__ieee754_pow+0x3a>
 8008348:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800834c:	4619      	mov	r1, r3
 800834e:	e72c      	b.n	80081aa <__ieee754_pow+0x3a>
 8008350:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8008354:	3b01      	subs	r3, #1
 8008356:	ea53 0204 	orrs.w	r2, r3, r4
 800835a:	d102      	bne.n	8008362 <__ieee754_pow+0x1f2>
 800835c:	4632      	mov	r2, r6
 800835e:	463b      	mov	r3, r7
 8008360:	e7e8      	b.n	8008334 <__ieee754_pow+0x1c4>
 8008362:	3c01      	subs	r4, #1
 8008364:	431c      	orrs	r4, r3
 8008366:	d016      	beq.n	8008396 <__ieee754_pow+0x226>
 8008368:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80083f0 <__ieee754_pow+0x280>
 800836c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008370:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008374:	f240 8110 	bls.w	8008598 <__ieee754_pow+0x428>
 8008378:	4b27      	ldr	r3, [pc, #156]	@ (8008418 <__ieee754_pow+0x2a8>)
 800837a:	459a      	cmp	sl, r3
 800837c:	4b24      	ldr	r3, [pc, #144]	@ (8008410 <__ieee754_pow+0x2a0>)
 800837e:	d916      	bls.n	80083ae <__ieee754_pow+0x23e>
 8008380:	429d      	cmp	r5, r3
 8008382:	d80b      	bhi.n	800839c <__ieee754_pow+0x22c>
 8008384:	f1b9 0f00 	cmp.w	r9, #0
 8008388:	da0b      	bge.n	80083a2 <__ieee754_pow+0x232>
 800838a:	2000      	movs	r0, #0
 800838c:	b011      	add	sp, #68	@ 0x44
 800838e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008392:	f000 bcf1 	b.w	8008d78 <__math_oflow>
 8008396:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80083f8 <__ieee754_pow+0x288>
 800839a:	e7e7      	b.n	800836c <__ieee754_pow+0x1fc>
 800839c:	f1b9 0f00 	cmp.w	r9, #0
 80083a0:	dcf3      	bgt.n	800838a <__ieee754_pow+0x21a>
 80083a2:	2000      	movs	r0, #0
 80083a4:	b011      	add	sp, #68	@ 0x44
 80083a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083aa:	f000 bcdd 	b.w	8008d68 <__math_uflow>
 80083ae:	429d      	cmp	r5, r3
 80083b0:	d20c      	bcs.n	80083cc <__ieee754_pow+0x25c>
 80083b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083b6:	2200      	movs	r2, #0
 80083b8:	2300      	movs	r3, #0
 80083ba:	f7f8 fb5f 	bl	8000a7c <__aeabi_dcmplt>
 80083be:	3800      	subs	r0, #0
 80083c0:	bf18      	it	ne
 80083c2:	2001      	movne	r0, #1
 80083c4:	f1b9 0f00 	cmp.w	r9, #0
 80083c8:	daec      	bge.n	80083a4 <__ieee754_pow+0x234>
 80083ca:	e7df      	b.n	800838c <__ieee754_pow+0x21c>
 80083cc:	4b0f      	ldr	r3, [pc, #60]	@ (800840c <__ieee754_pow+0x29c>)
 80083ce:	429d      	cmp	r5, r3
 80083d0:	f04f 0200 	mov.w	r2, #0
 80083d4:	d922      	bls.n	800841c <__ieee754_pow+0x2ac>
 80083d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083da:	2300      	movs	r3, #0
 80083dc:	f7f8 fb4e 	bl	8000a7c <__aeabi_dcmplt>
 80083e0:	3800      	subs	r0, #0
 80083e2:	bf18      	it	ne
 80083e4:	2001      	movne	r0, #1
 80083e6:	f1b9 0f00 	cmp.w	r9, #0
 80083ea:	dccf      	bgt.n	800838c <__ieee754_pow+0x21c>
 80083ec:	e7da      	b.n	80083a4 <__ieee754_pow+0x234>
 80083ee:	bf00      	nop
 80083f0:	00000000 	.word	0x00000000
 80083f4:	3ff00000 	.word	0x3ff00000
 80083f8:	00000000 	.word	0x00000000
 80083fc:	bff00000 	.word	0xbff00000
 8008400:	fff00000 	.word	0xfff00000
 8008404:	7ff00000 	.word	0x7ff00000
 8008408:	433fffff 	.word	0x433fffff
 800840c:	3ff00000 	.word	0x3ff00000
 8008410:	3fefffff 	.word	0x3fefffff
 8008414:	3fe00000 	.word	0x3fe00000
 8008418:	43f00000 	.word	0x43f00000
 800841c:	4b5a      	ldr	r3, [pc, #360]	@ (8008588 <__ieee754_pow+0x418>)
 800841e:	f7f7 ff03 	bl	8000228 <__aeabi_dsub>
 8008422:	a351      	add	r3, pc, #324	@ (adr r3, 8008568 <__ieee754_pow+0x3f8>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	4604      	mov	r4, r0
 800842a:	460d      	mov	r5, r1
 800842c:	f7f8 f8b4 	bl	8000598 <__aeabi_dmul>
 8008430:	a34f      	add	r3, pc, #316	@ (adr r3, 8008570 <__ieee754_pow+0x400>)
 8008432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008436:	4606      	mov	r6, r0
 8008438:	460f      	mov	r7, r1
 800843a:	4620      	mov	r0, r4
 800843c:	4629      	mov	r1, r5
 800843e:	f7f8 f8ab 	bl	8000598 <__aeabi_dmul>
 8008442:	4b52      	ldr	r3, [pc, #328]	@ (800858c <__ieee754_pow+0x41c>)
 8008444:	4682      	mov	sl, r0
 8008446:	468b      	mov	fp, r1
 8008448:	2200      	movs	r2, #0
 800844a:	4620      	mov	r0, r4
 800844c:	4629      	mov	r1, r5
 800844e:	f7f8 f8a3 	bl	8000598 <__aeabi_dmul>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	a148      	add	r1, pc, #288	@ (adr r1, 8008578 <__ieee754_pow+0x408>)
 8008458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800845c:	f7f7 fee4 	bl	8000228 <__aeabi_dsub>
 8008460:	4622      	mov	r2, r4
 8008462:	462b      	mov	r3, r5
 8008464:	f7f8 f898 	bl	8000598 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	2000      	movs	r0, #0
 800846e:	4948      	ldr	r1, [pc, #288]	@ (8008590 <__ieee754_pow+0x420>)
 8008470:	f7f7 feda 	bl	8000228 <__aeabi_dsub>
 8008474:	4622      	mov	r2, r4
 8008476:	4680      	mov	r8, r0
 8008478:	4689      	mov	r9, r1
 800847a:	462b      	mov	r3, r5
 800847c:	4620      	mov	r0, r4
 800847e:	4629      	mov	r1, r5
 8008480:	f7f8 f88a 	bl	8000598 <__aeabi_dmul>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4640      	mov	r0, r8
 800848a:	4649      	mov	r1, r9
 800848c:	f7f8 f884 	bl	8000598 <__aeabi_dmul>
 8008490:	a33b      	add	r3, pc, #236	@ (adr r3, 8008580 <__ieee754_pow+0x410>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f8 f87f 	bl	8000598 <__aeabi_dmul>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4650      	mov	r0, sl
 80084a0:	4659      	mov	r1, fp
 80084a2:	f7f7 fec1 	bl	8000228 <__aeabi_dsub>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4680      	mov	r8, r0
 80084ac:	4689      	mov	r9, r1
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f7 febb 	bl	800022c <__adddf3>
 80084b6:	2400      	movs	r4, #0
 80084b8:	4632      	mov	r2, r6
 80084ba:	463b      	mov	r3, r7
 80084bc:	4620      	mov	r0, r4
 80084be:	460d      	mov	r5, r1
 80084c0:	f7f7 feb2 	bl	8000228 <__aeabi_dsub>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4640      	mov	r0, r8
 80084ca:	4649      	mov	r1, r9
 80084cc:	f7f7 feac 	bl	8000228 <__aeabi_dsub>
 80084d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084d8:	2300      	movs	r3, #0
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80084e0:	4606      	mov	r6, r0
 80084e2:	460f      	mov	r7, r1
 80084e4:	465b      	mov	r3, fp
 80084e6:	4652      	mov	r2, sl
 80084e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ec:	f7f7 fe9c 	bl	8000228 <__aeabi_dsub>
 80084f0:	4622      	mov	r2, r4
 80084f2:	462b      	mov	r3, r5
 80084f4:	f7f8 f850 	bl	8000598 <__aeabi_dmul>
 80084f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084fc:	4680      	mov	r8, r0
 80084fe:	4689      	mov	r9, r1
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f8 f848 	bl	8000598 <__aeabi_dmul>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4640      	mov	r0, r8
 800850e:	4649      	mov	r1, r9
 8008510:	f7f7 fe8c 	bl	800022c <__adddf3>
 8008514:	465b      	mov	r3, fp
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	4652      	mov	r2, sl
 800851c:	4620      	mov	r0, r4
 800851e:	4629      	mov	r1, r5
 8008520:	f7f8 f83a 	bl	8000598 <__aeabi_dmul>
 8008524:	460b      	mov	r3, r1
 8008526:	4602      	mov	r2, r0
 8008528:	4680      	mov	r8, r0
 800852a:	4689      	mov	r9, r1
 800852c:	4630      	mov	r0, r6
 800852e:	4639      	mov	r1, r7
 8008530:	f7f7 fe7c 	bl	800022c <__adddf3>
 8008534:	4b17      	ldr	r3, [pc, #92]	@ (8008594 <__ieee754_pow+0x424>)
 8008536:	4299      	cmp	r1, r3
 8008538:	4604      	mov	r4, r0
 800853a:	460d      	mov	r5, r1
 800853c:	468b      	mov	fp, r1
 800853e:	f340 820b 	ble.w	8008958 <__ieee754_pow+0x7e8>
 8008542:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008546:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800854a:	4303      	orrs	r3, r0
 800854c:	f000 81ea 	beq.w	8008924 <__ieee754_pow+0x7b4>
 8008550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008554:	2200      	movs	r2, #0
 8008556:	2300      	movs	r3, #0
 8008558:	f7f8 fa90 	bl	8000a7c <__aeabi_dcmplt>
 800855c:	3800      	subs	r0, #0
 800855e:	bf18      	it	ne
 8008560:	2001      	movne	r0, #1
 8008562:	e713      	b.n	800838c <__ieee754_pow+0x21c>
 8008564:	f3af 8000 	nop.w
 8008568:	60000000 	.word	0x60000000
 800856c:	3ff71547 	.word	0x3ff71547
 8008570:	f85ddf44 	.word	0xf85ddf44
 8008574:	3e54ae0b 	.word	0x3e54ae0b
 8008578:	55555555 	.word	0x55555555
 800857c:	3fd55555 	.word	0x3fd55555
 8008580:	652b82fe 	.word	0x652b82fe
 8008584:	3ff71547 	.word	0x3ff71547
 8008588:	3ff00000 	.word	0x3ff00000
 800858c:	3fd00000 	.word	0x3fd00000
 8008590:	3fe00000 	.word	0x3fe00000
 8008594:	408fffff 	.word	0x408fffff
 8008598:	4bd5      	ldr	r3, [pc, #852]	@ (80088f0 <__ieee754_pow+0x780>)
 800859a:	ea08 0303 	and.w	r3, r8, r3
 800859e:	2200      	movs	r2, #0
 80085a0:	b92b      	cbnz	r3, 80085ae <__ieee754_pow+0x43e>
 80085a2:	4bd4      	ldr	r3, [pc, #848]	@ (80088f4 <__ieee754_pow+0x784>)
 80085a4:	f7f7 fff8 	bl	8000598 <__aeabi_dmul>
 80085a8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80085ac:	468b      	mov	fp, r1
 80085ae:	ea4f 532b 	mov.w	r3, fp, asr #20
 80085b2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80085b6:	4413      	add	r3, r2
 80085b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80085ba:	4bcf      	ldr	r3, [pc, #828]	@ (80088f8 <__ieee754_pow+0x788>)
 80085bc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80085c0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80085c4:	459b      	cmp	fp, r3
 80085c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80085ca:	dd08      	ble.n	80085de <__ieee754_pow+0x46e>
 80085cc:	4bcb      	ldr	r3, [pc, #812]	@ (80088fc <__ieee754_pow+0x78c>)
 80085ce:	459b      	cmp	fp, r3
 80085d0:	f340 81a5 	ble.w	800891e <__ieee754_pow+0x7ae>
 80085d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085d6:	3301      	adds	r3, #1
 80085d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80085da:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80085de:	f04f 0a00 	mov.w	sl, #0
 80085e2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80085e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085e8:	4bc5      	ldr	r3, [pc, #788]	@ (8008900 <__ieee754_pow+0x790>)
 80085ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80085ee:	ed93 7b00 	vldr	d7, [r3]
 80085f2:	4629      	mov	r1, r5
 80085f4:	ec53 2b17 	vmov	r2, r3, d7
 80085f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008600:	f7f7 fe12 	bl	8000228 <__aeabi_dsub>
 8008604:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008608:	4606      	mov	r6, r0
 800860a:	460f      	mov	r7, r1
 800860c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008610:	f7f7 fe0c 	bl	800022c <__adddf3>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	2000      	movs	r0, #0
 800861a:	49ba      	ldr	r1, [pc, #744]	@ (8008904 <__ieee754_pow+0x794>)
 800861c:	f7f8 f8e6 	bl	80007ec <__aeabi_ddiv>
 8008620:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4630      	mov	r0, r6
 800862a:	4639      	mov	r1, r7
 800862c:	f7f7 ffb4 	bl	8000598 <__aeabi_dmul>
 8008630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008634:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008638:	106d      	asrs	r5, r5, #1
 800863a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800863e:	f04f 0b00 	mov.w	fp, #0
 8008642:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008646:	4661      	mov	r1, ip
 8008648:	2200      	movs	r2, #0
 800864a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800864e:	4658      	mov	r0, fp
 8008650:	46e1      	mov	r9, ip
 8008652:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008656:	4614      	mov	r4, r2
 8008658:	461d      	mov	r5, r3
 800865a:	f7f7 ff9d 	bl	8000598 <__aeabi_dmul>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	4630      	mov	r0, r6
 8008664:	4639      	mov	r1, r7
 8008666:	f7f7 fddf 	bl	8000228 <__aeabi_dsub>
 800866a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800866e:	4606      	mov	r6, r0
 8008670:	460f      	mov	r7, r1
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f7f7 fdd7 	bl	8000228 <__aeabi_dsub>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008682:	f7f7 fdd1 	bl	8000228 <__aeabi_dsub>
 8008686:	465a      	mov	r2, fp
 8008688:	464b      	mov	r3, r9
 800868a:	f7f7 ff85 	bl	8000598 <__aeabi_dmul>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4630      	mov	r0, r6
 8008694:	4639      	mov	r1, r7
 8008696:	f7f7 fdc7 	bl	8000228 <__aeabi_dsub>
 800869a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800869e:	f7f7 ff7b 	bl	8000598 <__aeabi_dmul>
 80086a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086aa:	4610      	mov	r0, r2
 80086ac:	4619      	mov	r1, r3
 80086ae:	f7f7 ff73 	bl	8000598 <__aeabi_dmul>
 80086b2:	a37d      	add	r3, pc, #500	@ (adr r3, 80088a8 <__ieee754_pow+0x738>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	4604      	mov	r4, r0
 80086ba:	460d      	mov	r5, r1
 80086bc:	f7f7 ff6c 	bl	8000598 <__aeabi_dmul>
 80086c0:	a37b      	add	r3, pc, #492	@ (adr r3, 80088b0 <__ieee754_pow+0x740>)
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	f7f7 fdb1 	bl	800022c <__adddf3>
 80086ca:	4622      	mov	r2, r4
 80086cc:	462b      	mov	r3, r5
 80086ce:	f7f7 ff63 	bl	8000598 <__aeabi_dmul>
 80086d2:	a379      	add	r3, pc, #484	@ (adr r3, 80088b8 <__ieee754_pow+0x748>)
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f7f7 fda8 	bl	800022c <__adddf3>
 80086dc:	4622      	mov	r2, r4
 80086de:	462b      	mov	r3, r5
 80086e0:	f7f7 ff5a 	bl	8000598 <__aeabi_dmul>
 80086e4:	a376      	add	r3, pc, #472	@ (adr r3, 80088c0 <__ieee754_pow+0x750>)
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	f7f7 fd9f 	bl	800022c <__adddf3>
 80086ee:	4622      	mov	r2, r4
 80086f0:	462b      	mov	r3, r5
 80086f2:	f7f7 ff51 	bl	8000598 <__aeabi_dmul>
 80086f6:	a374      	add	r3, pc, #464	@ (adr r3, 80088c8 <__ieee754_pow+0x758>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	f7f7 fd96 	bl	800022c <__adddf3>
 8008700:	4622      	mov	r2, r4
 8008702:	462b      	mov	r3, r5
 8008704:	f7f7 ff48 	bl	8000598 <__aeabi_dmul>
 8008708:	a371      	add	r3, pc, #452	@ (adr r3, 80088d0 <__ieee754_pow+0x760>)
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f7f7 fd8d 	bl	800022c <__adddf3>
 8008712:	4622      	mov	r2, r4
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	462b      	mov	r3, r5
 800871a:	4620      	mov	r0, r4
 800871c:	4629      	mov	r1, r5
 800871e:	f7f7 ff3b 	bl	8000598 <__aeabi_dmul>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4630      	mov	r0, r6
 8008728:	4639      	mov	r1, r7
 800872a:	f7f7 ff35 	bl	8000598 <__aeabi_dmul>
 800872e:	465a      	mov	r2, fp
 8008730:	4604      	mov	r4, r0
 8008732:	460d      	mov	r5, r1
 8008734:	464b      	mov	r3, r9
 8008736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800873a:	f7f7 fd77 	bl	800022c <__adddf3>
 800873e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008742:	f7f7 ff29 	bl	8000598 <__aeabi_dmul>
 8008746:	4622      	mov	r2, r4
 8008748:	462b      	mov	r3, r5
 800874a:	f7f7 fd6f 	bl	800022c <__adddf3>
 800874e:	465a      	mov	r2, fp
 8008750:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008754:	464b      	mov	r3, r9
 8008756:	4658      	mov	r0, fp
 8008758:	4649      	mov	r1, r9
 800875a:	f7f7 ff1d 	bl	8000598 <__aeabi_dmul>
 800875e:	4b6a      	ldr	r3, [pc, #424]	@ (8008908 <__ieee754_pow+0x798>)
 8008760:	2200      	movs	r2, #0
 8008762:	4606      	mov	r6, r0
 8008764:	460f      	mov	r7, r1
 8008766:	f7f7 fd61 	bl	800022c <__adddf3>
 800876a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800876e:	f7f7 fd5d 	bl	800022c <__adddf3>
 8008772:	46d8      	mov	r8, fp
 8008774:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008778:	460d      	mov	r5, r1
 800877a:	465a      	mov	r2, fp
 800877c:	460b      	mov	r3, r1
 800877e:	4640      	mov	r0, r8
 8008780:	4649      	mov	r1, r9
 8008782:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008786:	f7f7 ff07 	bl	8000598 <__aeabi_dmul>
 800878a:	465c      	mov	r4, fp
 800878c:	4680      	mov	r8, r0
 800878e:	4689      	mov	r9, r1
 8008790:	4b5d      	ldr	r3, [pc, #372]	@ (8008908 <__ieee754_pow+0x798>)
 8008792:	2200      	movs	r2, #0
 8008794:	4620      	mov	r0, r4
 8008796:	4629      	mov	r1, r5
 8008798:	f7f7 fd46 	bl	8000228 <__aeabi_dsub>
 800879c:	4632      	mov	r2, r6
 800879e:	463b      	mov	r3, r7
 80087a0:	f7f7 fd42 	bl	8000228 <__aeabi_dsub>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087ac:	f7f7 fd3c 	bl	8000228 <__aeabi_dsub>
 80087b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087b4:	f7f7 fef0 	bl	8000598 <__aeabi_dmul>
 80087b8:	4622      	mov	r2, r4
 80087ba:	4606      	mov	r6, r0
 80087bc:	460f      	mov	r7, r1
 80087be:	462b      	mov	r3, r5
 80087c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087c4:	f7f7 fee8 	bl	8000598 <__aeabi_dmul>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4630      	mov	r0, r6
 80087ce:	4639      	mov	r1, r7
 80087d0:	f7f7 fd2c 	bl	800022c <__adddf3>
 80087d4:	4606      	mov	r6, r0
 80087d6:	460f      	mov	r7, r1
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4640      	mov	r0, r8
 80087de:	4649      	mov	r1, r9
 80087e0:	f7f7 fd24 	bl	800022c <__adddf3>
 80087e4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80087e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80088d8 <__ieee754_pow+0x768>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	4658      	mov	r0, fp
 80087f0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80087f4:	460d      	mov	r5, r1
 80087f6:	f7f7 fecf 	bl	8000598 <__aeabi_dmul>
 80087fa:	465c      	mov	r4, fp
 80087fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008800:	4642      	mov	r2, r8
 8008802:	464b      	mov	r3, r9
 8008804:	4620      	mov	r0, r4
 8008806:	4629      	mov	r1, r5
 8008808:	f7f7 fd0e 	bl	8000228 <__aeabi_dsub>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4630      	mov	r0, r6
 8008812:	4639      	mov	r1, r7
 8008814:	f7f7 fd08 	bl	8000228 <__aeabi_dsub>
 8008818:	a331      	add	r3, pc, #196	@ (adr r3, 80088e0 <__ieee754_pow+0x770>)
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f7f7 febb 	bl	8000598 <__aeabi_dmul>
 8008822:	a331      	add	r3, pc, #196	@ (adr r3, 80088e8 <__ieee754_pow+0x778>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	4606      	mov	r6, r0
 800882a:	460f      	mov	r7, r1
 800882c:	4620      	mov	r0, r4
 800882e:	4629      	mov	r1, r5
 8008830:	f7f7 feb2 	bl	8000598 <__aeabi_dmul>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f7 fcf6 	bl	800022c <__adddf3>
 8008840:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008842:	4b32      	ldr	r3, [pc, #200]	@ (800890c <__ieee754_pow+0x79c>)
 8008844:	4413      	add	r3, r2
 8008846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884a:	f7f7 fcef 	bl	800022c <__adddf3>
 800884e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008852:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008854:	f7f7 fe36 	bl	80004c4 <__aeabi_i2d>
 8008858:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800885a:	4b2d      	ldr	r3, [pc, #180]	@ (8008910 <__ieee754_pow+0x7a0>)
 800885c:	4413      	add	r3, r2
 800885e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008862:	4606      	mov	r6, r0
 8008864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008868:	460f      	mov	r7, r1
 800886a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800886e:	f7f7 fcdd 	bl	800022c <__adddf3>
 8008872:	4642      	mov	r2, r8
 8008874:	464b      	mov	r3, r9
 8008876:	f7f7 fcd9 	bl	800022c <__adddf3>
 800887a:	4632      	mov	r2, r6
 800887c:	463b      	mov	r3, r7
 800887e:	f7f7 fcd5 	bl	800022c <__adddf3>
 8008882:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008886:	4632      	mov	r2, r6
 8008888:	463b      	mov	r3, r7
 800888a:	4658      	mov	r0, fp
 800888c:	460d      	mov	r5, r1
 800888e:	f7f7 fccb 	bl	8000228 <__aeabi_dsub>
 8008892:	4642      	mov	r2, r8
 8008894:	464b      	mov	r3, r9
 8008896:	f7f7 fcc7 	bl	8000228 <__aeabi_dsub>
 800889a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800889e:	f7f7 fcc3 	bl	8000228 <__aeabi_dsub>
 80088a2:	465c      	mov	r4, fp
 80088a4:	e036      	b.n	8008914 <__ieee754_pow+0x7a4>
 80088a6:	bf00      	nop
 80088a8:	4a454eef 	.word	0x4a454eef
 80088ac:	3fca7e28 	.word	0x3fca7e28
 80088b0:	93c9db65 	.word	0x93c9db65
 80088b4:	3fcd864a 	.word	0x3fcd864a
 80088b8:	a91d4101 	.word	0xa91d4101
 80088bc:	3fd17460 	.word	0x3fd17460
 80088c0:	518f264d 	.word	0x518f264d
 80088c4:	3fd55555 	.word	0x3fd55555
 80088c8:	db6fabff 	.word	0xdb6fabff
 80088cc:	3fdb6db6 	.word	0x3fdb6db6
 80088d0:	33333303 	.word	0x33333303
 80088d4:	3fe33333 	.word	0x3fe33333
 80088d8:	e0000000 	.word	0xe0000000
 80088dc:	3feec709 	.word	0x3feec709
 80088e0:	dc3a03fd 	.word	0xdc3a03fd
 80088e4:	3feec709 	.word	0x3feec709
 80088e8:	145b01f5 	.word	0x145b01f5
 80088ec:	be3e2fe0 	.word	0xbe3e2fe0
 80088f0:	7ff00000 	.word	0x7ff00000
 80088f4:	43400000 	.word	0x43400000
 80088f8:	0003988e 	.word	0x0003988e
 80088fc:	000bb679 	.word	0x000bb679
 8008900:	08009008 	.word	0x08009008
 8008904:	3ff00000 	.word	0x3ff00000
 8008908:	40080000 	.word	0x40080000
 800890c:	08008fe8 	.word	0x08008fe8
 8008910:	08008ff8 	.word	0x08008ff8
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800891c:	e5d6      	b.n	80084cc <__ieee754_pow+0x35c>
 800891e:	f04f 0a01 	mov.w	sl, #1
 8008922:	e65e      	b.n	80085e2 <__ieee754_pow+0x472>
 8008924:	a3b5      	add	r3, pc, #724	@ (adr r3, 8008bfc <__ieee754_pow+0xa8c>)
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	4630      	mov	r0, r6
 800892c:	4639      	mov	r1, r7
 800892e:	f7f7 fc7d 	bl	800022c <__adddf3>
 8008932:	4642      	mov	r2, r8
 8008934:	e9cd 0100 	strd	r0, r1, [sp]
 8008938:	464b      	mov	r3, r9
 800893a:	4620      	mov	r0, r4
 800893c:	4629      	mov	r1, r5
 800893e:	f7f7 fc73 	bl	8000228 <__aeabi_dsub>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	e9dd 0100 	ldrd	r0, r1, [sp]
 800894a:	f7f8 f8b5 	bl	8000ab8 <__aeabi_dcmpgt>
 800894e:	2800      	cmp	r0, #0
 8008950:	f47f adfe 	bne.w	8008550 <__ieee754_pow+0x3e0>
 8008954:	4ba2      	ldr	r3, [pc, #648]	@ (8008be0 <__ieee754_pow+0xa70>)
 8008956:	e022      	b.n	800899e <__ieee754_pow+0x82e>
 8008958:	4ca2      	ldr	r4, [pc, #648]	@ (8008be4 <__ieee754_pow+0xa74>)
 800895a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800895e:	42a3      	cmp	r3, r4
 8008960:	d919      	bls.n	8008996 <__ieee754_pow+0x826>
 8008962:	4ba1      	ldr	r3, [pc, #644]	@ (8008be8 <__ieee754_pow+0xa78>)
 8008964:	440b      	add	r3, r1
 8008966:	4303      	orrs	r3, r0
 8008968:	d009      	beq.n	800897e <__ieee754_pow+0x80e>
 800896a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800896e:	2200      	movs	r2, #0
 8008970:	2300      	movs	r3, #0
 8008972:	f7f8 f883 	bl	8000a7c <__aeabi_dcmplt>
 8008976:	3800      	subs	r0, #0
 8008978:	bf18      	it	ne
 800897a:	2001      	movne	r0, #1
 800897c:	e512      	b.n	80083a4 <__ieee754_pow+0x234>
 800897e:	4642      	mov	r2, r8
 8008980:	464b      	mov	r3, r9
 8008982:	f7f7 fc51 	bl	8000228 <__aeabi_dsub>
 8008986:	4632      	mov	r2, r6
 8008988:	463b      	mov	r3, r7
 800898a:	f7f8 f88b 	bl	8000aa4 <__aeabi_dcmpge>
 800898e:	2800      	cmp	r0, #0
 8008990:	d1eb      	bne.n	800896a <__ieee754_pow+0x7fa>
 8008992:	4b96      	ldr	r3, [pc, #600]	@ (8008bec <__ieee754_pow+0xa7c>)
 8008994:	e003      	b.n	800899e <__ieee754_pow+0x82e>
 8008996:	4a96      	ldr	r2, [pc, #600]	@ (8008bf0 <__ieee754_pow+0xa80>)
 8008998:	4293      	cmp	r3, r2
 800899a:	f240 80e7 	bls.w	8008b6c <__ieee754_pow+0x9fc>
 800899e:	151b      	asrs	r3, r3, #20
 80089a0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80089a4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80089a8:	fa4a fa03 	asr.w	sl, sl, r3
 80089ac:	44da      	add	sl, fp
 80089ae:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80089b2:	4890      	ldr	r0, [pc, #576]	@ (8008bf4 <__ieee754_pow+0xa84>)
 80089b4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80089b8:	4108      	asrs	r0, r1
 80089ba:	ea00 030a 	and.w	r3, r0, sl
 80089be:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80089c2:	f1c1 0114 	rsb	r1, r1, #20
 80089c6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80089ca:	fa4a fa01 	asr.w	sl, sl, r1
 80089ce:	f1bb 0f00 	cmp.w	fp, #0
 80089d2:	4640      	mov	r0, r8
 80089d4:	4649      	mov	r1, r9
 80089d6:	f04f 0200 	mov.w	r2, #0
 80089da:	bfb8      	it	lt
 80089dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80089e0:	f7f7 fc22 	bl	8000228 <__aeabi_dsub>
 80089e4:	4680      	mov	r8, r0
 80089e6:	4689      	mov	r9, r1
 80089e8:	4632      	mov	r2, r6
 80089ea:	463b      	mov	r3, r7
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	f7f7 fc1c 	bl	800022c <__adddf3>
 80089f4:	2400      	movs	r4, #0
 80089f6:	a36a      	add	r3, pc, #424	@ (adr r3, 8008ba0 <__ieee754_pow+0xa30>)
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	4620      	mov	r0, r4
 80089fe:	460d      	mov	r5, r1
 8008a00:	f7f7 fdca 	bl	8000598 <__aeabi_dmul>
 8008a04:	4642      	mov	r2, r8
 8008a06:	e9cd 0100 	strd	r0, r1, [sp]
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f7f7 fc0a 	bl	8000228 <__aeabi_dsub>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4630      	mov	r0, r6
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	f7f7 fc04 	bl	8000228 <__aeabi_dsub>
 8008a20:	a361      	add	r3, pc, #388	@ (adr r3, 8008ba8 <__ieee754_pow+0xa38>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fdb7 	bl	8000598 <__aeabi_dmul>
 8008a2a:	a361      	add	r3, pc, #388	@ (adr r3, 8008bb0 <__ieee754_pow+0xa40>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	4680      	mov	r8, r0
 8008a32:	4689      	mov	r9, r1
 8008a34:	4620      	mov	r0, r4
 8008a36:	4629      	mov	r1, r5
 8008a38:	f7f7 fdae 	bl	8000598 <__aeabi_dmul>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4640      	mov	r0, r8
 8008a42:	4649      	mov	r1, r9
 8008a44:	f7f7 fbf2 	bl	800022c <__adddf3>
 8008a48:	4604      	mov	r4, r0
 8008a4a:	460d      	mov	r5, r1
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a54:	f7f7 fbea 	bl	800022c <__adddf3>
 8008a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a5c:	4680      	mov	r8, r0
 8008a5e:	4689      	mov	r9, r1
 8008a60:	f7f7 fbe2 	bl	8000228 <__aeabi_dsub>
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	4620      	mov	r0, r4
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	f7f7 fbdc 	bl	8000228 <__aeabi_dsub>
 8008a70:	4642      	mov	r2, r8
 8008a72:	4606      	mov	r6, r0
 8008a74:	460f      	mov	r7, r1
 8008a76:	464b      	mov	r3, r9
 8008a78:	4640      	mov	r0, r8
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	f7f7 fd8c 	bl	8000598 <__aeabi_dmul>
 8008a80:	a34d      	add	r3, pc, #308	@ (adr r3, 8008bb8 <__ieee754_pow+0xa48>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	4604      	mov	r4, r0
 8008a88:	460d      	mov	r5, r1
 8008a8a:	f7f7 fd85 	bl	8000598 <__aeabi_dmul>
 8008a8e:	a34c      	add	r3, pc, #304	@ (adr r3, 8008bc0 <__ieee754_pow+0xa50>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fbc8 	bl	8000228 <__aeabi_dsub>
 8008a98:	4622      	mov	r2, r4
 8008a9a:	462b      	mov	r3, r5
 8008a9c:	f7f7 fd7c 	bl	8000598 <__aeabi_dmul>
 8008aa0:	a349      	add	r3, pc, #292	@ (adr r3, 8008bc8 <__ieee754_pow+0xa58>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	f7f7 fbc1 	bl	800022c <__adddf3>
 8008aaa:	4622      	mov	r2, r4
 8008aac:	462b      	mov	r3, r5
 8008aae:	f7f7 fd73 	bl	8000598 <__aeabi_dmul>
 8008ab2:	a347      	add	r3, pc, #284	@ (adr r3, 8008bd0 <__ieee754_pow+0xa60>)
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	f7f7 fbb6 	bl	8000228 <__aeabi_dsub>
 8008abc:	4622      	mov	r2, r4
 8008abe:	462b      	mov	r3, r5
 8008ac0:	f7f7 fd6a 	bl	8000598 <__aeabi_dmul>
 8008ac4:	a344      	add	r3, pc, #272	@ (adr r3, 8008bd8 <__ieee754_pow+0xa68>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f7 fbaf 	bl	800022c <__adddf3>
 8008ace:	4622      	mov	r2, r4
 8008ad0:	462b      	mov	r3, r5
 8008ad2:	f7f7 fd61 	bl	8000598 <__aeabi_dmul>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4640      	mov	r0, r8
 8008adc:	4649      	mov	r1, r9
 8008ade:	f7f7 fba3 	bl	8000228 <__aeabi_dsub>
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4640      	mov	r0, r8
 8008aec:	4649      	mov	r1, r9
 8008aee:	f7f7 fd53 	bl	8000598 <__aeabi_dmul>
 8008af2:	2200      	movs	r2, #0
 8008af4:	e9cd 0100 	strd	r0, r1, [sp]
 8008af8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008afc:	4620      	mov	r0, r4
 8008afe:	4629      	mov	r1, r5
 8008b00:	f7f7 fb92 	bl	8000228 <__aeabi_dsub>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b0c:	f7f7 fe6e 	bl	80007ec <__aeabi_ddiv>
 8008b10:	4632      	mov	r2, r6
 8008b12:	4604      	mov	r4, r0
 8008b14:	460d      	mov	r5, r1
 8008b16:	463b      	mov	r3, r7
 8008b18:	4640      	mov	r0, r8
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	f7f7 fd3c 	bl	8000598 <__aeabi_dmul>
 8008b20:	4632      	mov	r2, r6
 8008b22:	463b      	mov	r3, r7
 8008b24:	f7f7 fb82 	bl	800022c <__adddf3>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	4629      	mov	r1, r5
 8008b30:	f7f7 fb7a 	bl	8000228 <__aeabi_dsub>
 8008b34:	4642      	mov	r2, r8
 8008b36:	464b      	mov	r3, r9
 8008b38:	f7f7 fb76 	bl	8000228 <__aeabi_dsub>
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4602      	mov	r2, r0
 8008b40:	492d      	ldr	r1, [pc, #180]	@ (8008bf8 <__ieee754_pow+0xa88>)
 8008b42:	2000      	movs	r0, #0
 8008b44:	f7f7 fb70 	bl	8000228 <__aeabi_dsub>
 8008b48:	ec41 0b10 	vmov	d0, r0, r1
 8008b4c:	ee10 3a90 	vmov	r3, s1
 8008b50:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b58:	da0b      	bge.n	8008b72 <__ieee754_pow+0xa02>
 8008b5a:	4650      	mov	r0, sl
 8008b5c:	f000 f85c 	bl	8008c18 <scalbn>
 8008b60:	ec51 0b10 	vmov	r0, r1, d0
 8008b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b68:	f7ff bb6d 	b.w	8008246 <__ieee754_pow+0xd6>
 8008b6c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008b70:	e73a      	b.n	80089e8 <__ieee754_pow+0x878>
 8008b72:	ec51 0b10 	vmov	r0, r1, d0
 8008b76:	4619      	mov	r1, r3
 8008b78:	e7f4      	b.n	8008b64 <__ieee754_pow+0x9f4>
 8008b7a:	491f      	ldr	r1, [pc, #124]	@ (8008bf8 <__ieee754_pow+0xa88>)
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	f7ff bb14 	b.w	80081aa <__ieee754_pow+0x3a>
 8008b82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b86:	f7ff bb10 	b.w	80081aa <__ieee754_pow+0x3a>
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	f7ff bb0c 	b.w	80081aa <__ieee754_pow+0x3a>
 8008b92:	460c      	mov	r4, r1
 8008b94:	f7ff bb69 	b.w	800826a <__ieee754_pow+0xfa>
 8008b98:	2400      	movs	r4, #0
 8008b9a:	f7ff bb4b 	b.w	8008234 <__ieee754_pow+0xc4>
 8008b9e:	bf00      	nop
 8008ba0:	00000000 	.word	0x00000000
 8008ba4:	3fe62e43 	.word	0x3fe62e43
 8008ba8:	fefa39ef 	.word	0xfefa39ef
 8008bac:	3fe62e42 	.word	0x3fe62e42
 8008bb0:	0ca86c39 	.word	0x0ca86c39
 8008bb4:	be205c61 	.word	0xbe205c61
 8008bb8:	72bea4d0 	.word	0x72bea4d0
 8008bbc:	3e663769 	.word	0x3e663769
 8008bc0:	c5d26bf1 	.word	0xc5d26bf1
 8008bc4:	3ebbbd41 	.word	0x3ebbbd41
 8008bc8:	af25de2c 	.word	0xaf25de2c
 8008bcc:	3f11566a 	.word	0x3f11566a
 8008bd0:	16bebd93 	.word	0x16bebd93
 8008bd4:	3f66c16c 	.word	0x3f66c16c
 8008bd8:	5555553e 	.word	0x5555553e
 8008bdc:	3fc55555 	.word	0x3fc55555
 8008be0:	40900000 	.word	0x40900000
 8008be4:	4090cbff 	.word	0x4090cbff
 8008be8:	3f6f3400 	.word	0x3f6f3400
 8008bec:	4090cc00 	.word	0x4090cc00
 8008bf0:	3fe00000 	.word	0x3fe00000
 8008bf4:	fff00000 	.word	0xfff00000
 8008bf8:	3ff00000 	.word	0x3ff00000
 8008bfc:	652b82fe 	.word	0x652b82fe
 8008c00:	3c971547 	.word	0x3c971547

08008c04 <fabs>:
 8008c04:	ec51 0b10 	vmov	r0, r1, d0
 8008c08:	4602      	mov	r2, r0
 8008c0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c0e:	ec43 2b10 	vmov	d0, r2, r3
 8008c12:	4770      	bx	lr
 8008c14:	0000      	movs	r0, r0
	...

08008c18 <scalbn>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	ec55 4b10 	vmov	r4, r5, d0
 8008c1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008c22:	4606      	mov	r6, r0
 8008c24:	462b      	mov	r3, r5
 8008c26:	b991      	cbnz	r1, 8008c4e <scalbn+0x36>
 8008c28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008c2c:	4323      	orrs	r3, r4
 8008c2e:	d03b      	beq.n	8008ca8 <scalbn+0x90>
 8008c30:	4b33      	ldr	r3, [pc, #204]	@ (8008d00 <scalbn+0xe8>)
 8008c32:	4620      	mov	r0, r4
 8008c34:	4629      	mov	r1, r5
 8008c36:	2200      	movs	r2, #0
 8008c38:	f7f7 fcae 	bl	8000598 <__aeabi_dmul>
 8008c3c:	4b31      	ldr	r3, [pc, #196]	@ (8008d04 <scalbn+0xec>)
 8008c3e:	429e      	cmp	r6, r3
 8008c40:	4604      	mov	r4, r0
 8008c42:	460d      	mov	r5, r1
 8008c44:	da0f      	bge.n	8008c66 <scalbn+0x4e>
 8008c46:	a326      	add	r3, pc, #152	@ (adr r3, 8008ce0 <scalbn+0xc8>)
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	e01e      	b.n	8008c8c <scalbn+0x74>
 8008c4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008c52:	4291      	cmp	r1, r2
 8008c54:	d10b      	bne.n	8008c6e <scalbn+0x56>
 8008c56:	4622      	mov	r2, r4
 8008c58:	4620      	mov	r0, r4
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	f7f7 fae6 	bl	800022c <__adddf3>
 8008c60:	4604      	mov	r4, r0
 8008c62:	460d      	mov	r5, r1
 8008c64:	e020      	b.n	8008ca8 <scalbn+0x90>
 8008c66:	460b      	mov	r3, r1
 8008c68:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008c6c:	3936      	subs	r1, #54	@ 0x36
 8008c6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008c72:	4296      	cmp	r6, r2
 8008c74:	dd0d      	ble.n	8008c92 <scalbn+0x7a>
 8008c76:	2d00      	cmp	r5, #0
 8008c78:	a11b      	add	r1, pc, #108	@ (adr r1, 8008ce8 <scalbn+0xd0>)
 8008c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c7e:	da02      	bge.n	8008c86 <scalbn+0x6e>
 8008c80:	a11b      	add	r1, pc, #108	@ (adr r1, 8008cf0 <scalbn+0xd8>)
 8008c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c86:	a318      	add	r3, pc, #96	@ (adr r3, 8008ce8 <scalbn+0xd0>)
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	f7f7 fc84 	bl	8000598 <__aeabi_dmul>
 8008c90:	e7e6      	b.n	8008c60 <scalbn+0x48>
 8008c92:	1872      	adds	r2, r6, r1
 8008c94:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008c98:	428a      	cmp	r2, r1
 8008c9a:	dcec      	bgt.n	8008c76 <scalbn+0x5e>
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	dd06      	ble.n	8008cae <scalbn+0x96>
 8008ca0:	f36f 531e 	bfc	r3, #20, #11
 8008ca4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ca8:	ec45 4b10 	vmov	d0, r4, r5
 8008cac:	bd70      	pop	{r4, r5, r6, pc}
 8008cae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008cb2:	da08      	bge.n	8008cc6 <scalbn+0xae>
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	a10a      	add	r1, pc, #40	@ (adr r1, 8008ce0 <scalbn+0xc8>)
 8008cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cbc:	dac3      	bge.n	8008c46 <scalbn+0x2e>
 8008cbe:	a10e      	add	r1, pc, #56	@ (adr r1, 8008cf8 <scalbn+0xe0>)
 8008cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cc4:	e7bf      	b.n	8008c46 <scalbn+0x2e>
 8008cc6:	3236      	adds	r2, #54	@ 0x36
 8008cc8:	f36f 531e 	bfc	r3, #20, #11
 8008ccc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d08 <scalbn+0xf0>)
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	e7d8      	b.n	8008c8c <scalbn+0x74>
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w
 8008ce0:	c2f8f359 	.word	0xc2f8f359
 8008ce4:	01a56e1f 	.word	0x01a56e1f
 8008ce8:	8800759c 	.word	0x8800759c
 8008cec:	7e37e43c 	.word	0x7e37e43c
 8008cf0:	8800759c 	.word	0x8800759c
 8008cf4:	fe37e43c 	.word	0xfe37e43c
 8008cf8:	c2f8f359 	.word	0xc2f8f359
 8008cfc:	81a56e1f 	.word	0x81a56e1f
 8008d00:	43500000 	.word	0x43500000
 8008d04:	ffff3cb0 	.word	0xffff3cb0
 8008d08:	3c900000 	.word	0x3c900000

08008d0c <with_errno>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	ed2d 8b02 	vpush	{d8}
 8008d12:	eeb0 8a40 	vmov.f32	s16, s0
 8008d16:	eef0 8a60 	vmov.f32	s17, s1
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	f7ff f974 	bl	8008008 <__errno>
 8008d20:	eeb0 0a48 	vmov.f32	s0, s16
 8008d24:	eef0 0a68 	vmov.f32	s1, s17
 8008d28:	ecbd 8b02 	vpop	{d8}
 8008d2c:	6004      	str	r4, [r0, #0]
 8008d2e:	bd10      	pop	{r4, pc}

08008d30 <xflow>:
 8008d30:	4603      	mov	r3, r0
 8008d32:	b507      	push	{r0, r1, r2, lr}
 8008d34:	ec51 0b10 	vmov	r0, r1, d0
 8008d38:	b183      	cbz	r3, 8008d5c <xflow+0x2c>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d40:	e9cd 2300 	strd	r2, r3, [sp]
 8008d44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d48:	f7f7 fc26 	bl	8000598 <__aeabi_dmul>
 8008d4c:	ec41 0b10 	vmov	d0, r0, r1
 8008d50:	2022      	movs	r0, #34	@ 0x22
 8008d52:	b003      	add	sp, #12
 8008d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d58:	f7ff bfd8 	b.w	8008d0c <with_errno>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	e7ee      	b.n	8008d40 <xflow+0x10>
 8008d62:	0000      	movs	r0, r0
 8008d64:	0000      	movs	r0, r0
	...

08008d68 <__math_uflow>:
 8008d68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d70 <__math_uflow+0x8>
 8008d6c:	f7ff bfe0 	b.w	8008d30 <xflow>
 8008d70:	00000000 	.word	0x00000000
 8008d74:	10000000 	.word	0x10000000

08008d78 <__math_oflow>:
 8008d78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d80 <__math_oflow+0x8>
 8008d7c:	f7ff bfd8 	b.w	8008d30 <xflow>
 8008d80:	00000000 	.word	0x00000000
 8008d84:	70000000 	.word	0x70000000

08008d88 <__ieee754_sqrt>:
 8008d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	4a66      	ldr	r2, [pc, #408]	@ (8008f28 <__ieee754_sqrt+0x1a0>)
 8008d8e:	ec55 4b10 	vmov	r4, r5, d0
 8008d92:	43aa      	bics	r2, r5
 8008d94:	462b      	mov	r3, r5
 8008d96:	4621      	mov	r1, r4
 8008d98:	d110      	bne.n	8008dbc <__ieee754_sqrt+0x34>
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	f7f7 fbfa 	bl	8000598 <__aeabi_dmul>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4620      	mov	r0, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	f7f7 fa3e 	bl	800022c <__adddf3>
 8008db0:	4604      	mov	r4, r0
 8008db2:	460d      	mov	r5, r1
 8008db4:	ec45 4b10 	vmov	d0, r4, r5
 8008db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbc:	2d00      	cmp	r5, #0
 8008dbe:	dc0e      	bgt.n	8008dde <__ieee754_sqrt+0x56>
 8008dc0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008dc4:	4322      	orrs	r2, r4
 8008dc6:	d0f5      	beq.n	8008db4 <__ieee754_sqrt+0x2c>
 8008dc8:	b19d      	cbz	r5, 8008df2 <__ieee754_sqrt+0x6a>
 8008dca:	4622      	mov	r2, r4
 8008dcc:	4620      	mov	r0, r4
 8008dce:	4629      	mov	r1, r5
 8008dd0:	f7f7 fa2a 	bl	8000228 <__aeabi_dsub>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	f7f7 fd08 	bl	80007ec <__aeabi_ddiv>
 8008ddc:	e7e8      	b.n	8008db0 <__ieee754_sqrt+0x28>
 8008dde:	152a      	asrs	r2, r5, #20
 8008de0:	d115      	bne.n	8008e0e <__ieee754_sqrt+0x86>
 8008de2:	2000      	movs	r0, #0
 8008de4:	e009      	b.n	8008dfa <__ieee754_sqrt+0x72>
 8008de6:	0acb      	lsrs	r3, r1, #11
 8008de8:	3a15      	subs	r2, #21
 8008dea:	0549      	lsls	r1, r1, #21
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d0fa      	beq.n	8008de6 <__ieee754_sqrt+0x5e>
 8008df0:	e7f7      	b.n	8008de2 <__ieee754_sqrt+0x5a>
 8008df2:	462a      	mov	r2, r5
 8008df4:	e7fa      	b.n	8008dec <__ieee754_sqrt+0x64>
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	3001      	adds	r0, #1
 8008dfa:	02dc      	lsls	r4, r3, #11
 8008dfc:	d5fb      	bpl.n	8008df6 <__ieee754_sqrt+0x6e>
 8008dfe:	1e44      	subs	r4, r0, #1
 8008e00:	1b12      	subs	r2, r2, r4
 8008e02:	f1c0 0420 	rsb	r4, r0, #32
 8008e06:	fa21 f404 	lsr.w	r4, r1, r4
 8008e0a:	4323      	orrs	r3, r4
 8008e0c:	4081      	lsls	r1, r0
 8008e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e12:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e1a:	07d2      	lsls	r2, r2, #31
 8008e1c:	bf5c      	itt	pl
 8008e1e:	005b      	lslpl	r3, r3, #1
 8008e20:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008e24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e28:	bf58      	it	pl
 8008e2a:	0049      	lslpl	r1, r1, #1
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008e32:	107f      	asrs	r7, r7, #1
 8008e34:	0049      	lsls	r1, r1, #1
 8008e36:	2016      	movs	r0, #22
 8008e38:	4632      	mov	r2, r6
 8008e3a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008e3e:	1915      	adds	r5, r2, r4
 8008e40:	429d      	cmp	r5, r3
 8008e42:	bfde      	ittt	le
 8008e44:	192a      	addle	r2, r5, r4
 8008e46:	1b5b      	suble	r3, r3, r5
 8008e48:	1936      	addle	r6, r6, r4
 8008e4a:	0fcd      	lsrs	r5, r1, #31
 8008e4c:	3801      	subs	r0, #1
 8008e4e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008e52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008e56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008e5a:	d1f0      	bne.n	8008e3e <__ieee754_sqrt+0xb6>
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	2420      	movs	r4, #32
 8008e60:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008e64:	4293      	cmp	r3, r2
 8008e66:	eb0c 0e00 	add.w	lr, ip, r0
 8008e6a:	dc02      	bgt.n	8008e72 <__ieee754_sqrt+0xea>
 8008e6c:	d113      	bne.n	8008e96 <__ieee754_sqrt+0x10e>
 8008e6e:	458e      	cmp	lr, r1
 8008e70:	d811      	bhi.n	8008e96 <__ieee754_sqrt+0x10e>
 8008e72:	f1be 0f00 	cmp.w	lr, #0
 8008e76:	eb0e 000c 	add.w	r0, lr, ip
 8008e7a:	da3f      	bge.n	8008efc <__ieee754_sqrt+0x174>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	db3d      	blt.n	8008efc <__ieee754_sqrt+0x174>
 8008e80:	f102 0801 	add.w	r8, r2, #1
 8008e84:	1a9b      	subs	r3, r3, r2
 8008e86:	458e      	cmp	lr, r1
 8008e88:	bf88      	it	hi
 8008e8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008e8e:	eba1 010e 	sub.w	r1, r1, lr
 8008e92:	4465      	add	r5, ip
 8008e94:	4642      	mov	r2, r8
 8008e96:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008e9a:	3c01      	subs	r4, #1
 8008e9c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008ea0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008ea4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008ea8:	d1dc      	bne.n	8008e64 <__ieee754_sqrt+0xdc>
 8008eaa:	4319      	orrs	r1, r3
 8008eac:	d01b      	beq.n	8008ee6 <__ieee754_sqrt+0x15e>
 8008eae:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8008f2c <__ieee754_sqrt+0x1a4>
 8008eb2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008f30 <__ieee754_sqrt+0x1a8>
 8008eb6:	e9da 0100 	ldrd	r0, r1, [sl]
 8008eba:	e9db 2300 	ldrd	r2, r3, [fp]
 8008ebe:	f7f7 f9b3 	bl	8000228 <__aeabi_dsub>
 8008ec2:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4640      	mov	r0, r8
 8008ecc:	4649      	mov	r1, r9
 8008ece:	f7f7 fddf 	bl	8000a90 <__aeabi_dcmple>
 8008ed2:	b140      	cbz	r0, 8008ee6 <__ieee754_sqrt+0x15e>
 8008ed4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008ed8:	e9da 0100 	ldrd	r0, r1, [sl]
 8008edc:	e9db 2300 	ldrd	r2, r3, [fp]
 8008ee0:	d10e      	bne.n	8008f00 <__ieee754_sqrt+0x178>
 8008ee2:	3601      	adds	r6, #1
 8008ee4:	4625      	mov	r5, r4
 8008ee6:	1073      	asrs	r3, r6, #1
 8008ee8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008eec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008ef0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8008ef4:	086b      	lsrs	r3, r5, #1
 8008ef6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8008efa:	e759      	b.n	8008db0 <__ieee754_sqrt+0x28>
 8008efc:	4690      	mov	r8, r2
 8008efe:	e7c1      	b.n	8008e84 <__ieee754_sqrt+0xfc>
 8008f00:	f7f7 f994 	bl	800022c <__adddf3>
 8008f04:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	4649      	mov	r1, r9
 8008f10:	f7f7 fdb4 	bl	8000a7c <__aeabi_dcmplt>
 8008f14:	b120      	cbz	r0, 8008f20 <__ieee754_sqrt+0x198>
 8008f16:	1cab      	adds	r3, r5, #2
 8008f18:	bf08      	it	eq
 8008f1a:	3601      	addeq	r6, #1
 8008f1c:	3502      	adds	r5, #2
 8008f1e:	e7e2      	b.n	8008ee6 <__ieee754_sqrt+0x15e>
 8008f20:	1c6b      	adds	r3, r5, #1
 8008f22:	f023 0501 	bic.w	r5, r3, #1
 8008f26:	e7de      	b.n	8008ee6 <__ieee754_sqrt+0x15e>
 8008f28:	7ff00000 	.word	0x7ff00000
 8008f2c:	08009020 	.word	0x08009020
 8008f30:	08009018 	.word	0x08009018

08008f34 <_init>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	bf00      	nop
 8008f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3a:	bc08      	pop	{r3}
 8008f3c:	469e      	mov	lr, r3
 8008f3e:	4770      	bx	lr

08008f40 <_fini>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	bf00      	nop
 8008f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f46:	bc08      	pop	{r3}
 8008f48:	469e      	mov	lr, r3
 8008f4a:	4770      	bx	lr
