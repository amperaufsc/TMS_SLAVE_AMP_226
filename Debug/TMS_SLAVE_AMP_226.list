
TMS_SLAVE_AMP_226.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007214  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080073f4  080073f4  000083f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800748c  0800748c  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800748c  0800748c  00009010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800748c  0800748c  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800748c  0800748c  0000848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007490  08007490  00008490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007494  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e18  20000010  080074a4  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e28  080074a4  00009e28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016354  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000356c  00000000  00000000  0001f394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00022900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f3a  00000000  00000000  00023d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022199  00000000  00000000  00024c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015920  00000000  00000000  00046df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd013  00000000  00000000  0005c713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053dc  00000000  00000000  0013976c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0013eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080073dc 	.word	0x080073dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080073dc 	.word	0x080073dc

08000220 <initializeHistory>:

float convertVoltageToTemperature(float voltage){
	return C0 + C1 * voltage + C2 * pow(voltage, 2) + C3 * pow(voltage, 3) + C4 *pow(voltage, 4);
}

void initializeHistory(){
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
	for (int i = 0; i < numberOfThermistors; i++){
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e024      	b.n	8000276 <initializeHistory+0x56>
		for(int j = 0; j < windowSize; j++){
 800022c:	2300      	movs	r3, #0
 800022e:	603b      	str	r3, [r7, #0]
 8000230:	e00f      	b.n	8000252 <initializeHistory+0x32>
			readingsHistory[i][j] = 0;
 8000232:	4916      	ldr	r1, [pc, #88]	@ (800028c <initializeHistory+0x6c>)
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4613      	mov	r3, r2
 8000238:	009b      	lsls	r3, r3, #2
 800023a:	4413      	add	r3, r2
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	683a      	ldr	r2, [r7, #0]
 8000240:	4413      	add	r3, r2
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	440b      	add	r3, r1
 8000246:	f04f 0200 	mov.w	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < windowSize; j++){
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	3301      	adds	r3, #1
 8000250:	603b      	str	r3, [r7, #0]
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	2b09      	cmp	r3, #9
 8000256:	ddec      	ble.n	8000232 <initializeHistory+0x12>
		}
		filteredReadings[i] = 0;
 8000258:	4a0d      	ldr	r2, [pc, #52]	@ (8000290 <initializeHistory+0x70>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	4413      	add	r3, r2
 8000260:	f04f 0200 	mov.w	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
		validReadingsCount[i] = 0;
 8000266:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <initializeHistory+0x74>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2100      	movs	r1, #0
 800026c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < numberOfThermistors; i++){
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3301      	adds	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b0f      	cmp	r3, #15
 800027a:	ddd7      	ble.n	800022c <initializeHistory+0xc>
	}
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	2000002c 	.word	0x2000002c
 8000290:	200002ac 	.word	0x200002ac
 8000294:	200002ec 	.word	0x200002ec

08000298 <sendTemperatureToMaster0>:

extern FDCAN_HandleTypeDef hfdcan1;
uint8_t FDCAN1TxData[8];
FDCAN_TxHeaderTypeDef FDCAN1TxHeader;

void sendTemperatureToMaster0(float buffer[]){
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 80002a0:	4b14      	ldr	r3, [pc, #80]	@ (80002f4 <sendTemperatureToMaster0+0x5c>)
 80002a2:	2208      	movs	r2, #8
 80002a4:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst0;
 80002a6:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <sendTemperatureToMaster0+0x5c>)
 80002a8:	2210      	movs	r2, #16
 80002aa:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <sendTemperatureToMaster0+0x60>)
 80002b4:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	3304      	adds	r3, #4
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	461a      	mov	r2, r3
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <sendTemperatureToMaster0+0x60>)
 80002c0:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80002c2:	e009      	b.n	80002d8 <sendTemperatureToMaster0+0x40>
		int count = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
		count++;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	2b13      	cmp	r3, #19
 80002d2:	dd01      	ble.n	80002d8 <sendTemperatureToMaster0+0x40>
			Error_Handler();
 80002d4:	f000 fcbc 	bl	8000c50 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80002d8:	4a07      	ldr	r2, [pc, #28]	@ (80002f8 <sendTemperatureToMaster0+0x60>)
 80002da:	4906      	ldr	r1, [pc, #24]	@ (80002f4 <sendTemperatureToMaster0+0x5c>)
 80002dc:	4807      	ldr	r0, [pc, #28]	@ (80002fc <sendTemperatureToMaster0+0x64>)
 80002de:	f002 fdff 	bl	8002ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d1ed      	bne.n	80002c4 <sendTemperatureToMaster0+0x2c>
		}
	}
}
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000334 	.word	0x20000334
 80002f8:	2000032c 	.word	0x2000032c
 80002fc:	20000424 	.word	0x20000424

08000300 <sendTemperatureToMaster1>:

void sendTemperatureToMaster1(float buffer[]){
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000308:	4b14      	ldr	r3, [pc, #80]	@ (800035c <sendTemperatureToMaster1+0x5c>)
 800030a:	2208      	movs	r2, #8
 800030c:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst1;
 800030e:	4b13      	ldr	r3, [pc, #76]	@ (800035c <sendTemperatureToMaster1+0x5c>)
 8000310:	2211      	movs	r2, #17
 8000312:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	461a      	mov	r2, r3
 800031a:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <sendTemperatureToMaster1+0x60>)
 800031c:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3304      	adds	r3, #4
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <sendTemperatureToMaster1+0x60>)
 8000328:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 800032a:	e009      	b.n	8000340 <sendTemperatureToMaster1+0x40>
		int count = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
		count++;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	3301      	adds	r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	2b13      	cmp	r3, #19
 800033a:	dd01      	ble.n	8000340 <sendTemperatureToMaster1+0x40>
			Error_Handler();
 800033c:	f000 fc88 	bl	8000c50 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000340:	4a07      	ldr	r2, [pc, #28]	@ (8000360 <sendTemperatureToMaster1+0x60>)
 8000342:	4906      	ldr	r1, [pc, #24]	@ (800035c <sendTemperatureToMaster1+0x5c>)
 8000344:	4807      	ldr	r0, [pc, #28]	@ (8000364 <sendTemperatureToMaster1+0x64>)
 8000346:	f002 fdcb 	bl	8002ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1ed      	bne.n	800032c <sendTemperatureToMaster1+0x2c>
		}
	}
}
 8000350:	bf00      	nop
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000334 	.word	0x20000334
 8000360:	2000032c 	.word	0x2000032c
 8000364:	20000424 	.word	0x20000424

08000368 <sendTemperatureToMaster2>:

void sendTemperatureToMaster2(float buffer[]){
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000370:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <sendTemperatureToMaster2+0x5c>)
 8000372:	2208      	movs	r2, #8
 8000374:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst2;
 8000376:	4b13      	ldr	r3, [pc, #76]	@ (80003c4 <sendTemperatureToMaster2+0x5c>)
 8000378:	2212      	movs	r2, #18
 800037a:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	461a      	mov	r2, r3
 8000382:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <sendTemperatureToMaster2+0x60>)
 8000384:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	3304      	adds	r3, #4
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	461a      	mov	r2, r3
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <sendTemperatureToMaster2+0x60>)
 8000390:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000392:	e009      	b.n	80003a8 <sendTemperatureToMaster2+0x40>
		int count = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
		count++;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	3301      	adds	r3, #1
 800039c:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	2b13      	cmp	r3, #19
 80003a2:	dd01      	ble.n	80003a8 <sendTemperatureToMaster2+0x40>
			Error_Handler();
 80003a4:	f000 fc54 	bl	8000c50 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80003a8:	4a07      	ldr	r2, [pc, #28]	@ (80003c8 <sendTemperatureToMaster2+0x60>)
 80003aa:	4906      	ldr	r1, [pc, #24]	@ (80003c4 <sendTemperatureToMaster2+0x5c>)
 80003ac:	4807      	ldr	r0, [pc, #28]	@ (80003cc <sendTemperatureToMaster2+0x64>)
 80003ae:	f002 fd97 	bl	8002ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d1ed      	bne.n	8000394 <sendTemperatureToMaster2+0x2c>
		}
	}
}
 80003b8:	bf00      	nop
 80003ba:	bf00      	nop
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000334 	.word	0x20000334
 80003c8:	2000032c 	.word	0x2000032c
 80003cc:	20000424 	.word	0x20000424

080003d0 <sendTemperatureToMaster3>:

void sendTemperatureToMaster3(float buffer[]){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 80003d8:	4b14      	ldr	r3, [pc, #80]	@ (800042c <sendTemperatureToMaster3+0x5c>)
 80003da:	2208      	movs	r2, #8
 80003dc:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst3;
 80003de:	4b13      	ldr	r3, [pc, #76]	@ (800042c <sendTemperatureToMaster3+0x5c>)
 80003e0:	2213      	movs	r2, #19
 80003e2:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <sendTemperatureToMaster3+0x60>)
 80003ec:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3304      	adds	r3, #4
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <sendTemperatureToMaster3+0x60>)
 80003f8:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80003fa:	e009      	b.n	8000410 <sendTemperatureToMaster3+0x40>
		int count = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
		count++;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	3301      	adds	r3, #1
 8000404:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	2b13      	cmp	r3, #19
 800040a:	dd01      	ble.n	8000410 <sendTemperatureToMaster3+0x40>
			Error_Handler();
 800040c:	f000 fc20 	bl	8000c50 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000410:	4a07      	ldr	r2, [pc, #28]	@ (8000430 <sendTemperatureToMaster3+0x60>)
 8000412:	4906      	ldr	r1, [pc, #24]	@ (800042c <sendTemperatureToMaster3+0x5c>)
 8000414:	4807      	ldr	r0, [pc, #28]	@ (8000434 <sendTemperatureToMaster3+0x64>)
 8000416:	f002 fd63 	bl	8002ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d1ed      	bne.n	80003fc <sendTemperatureToMaster3+0x2c>
		}
	}
}
 8000420:	bf00      	nop
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000334 	.word	0x20000334
 8000430:	2000032c 	.word	0x2000032c
 8000434:	20000424 	.word	0x20000424

08000438 <sendTemperatureToMaster4>:

void sendTemperatureToMaster4(float buffer[]){
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000440:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <sendTemperatureToMaster4+0x5c>)
 8000442:	2208      	movs	r2, #8
 8000444:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst4;
 8000446:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <sendTemperatureToMaster4+0x5c>)
 8000448:	2214      	movs	r2, #20
 800044a:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	461a      	mov	r2, r3
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <sendTemperatureToMaster4+0x60>)
 8000454:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	3304      	adds	r3, #4
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	461a      	mov	r2, r3
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <sendTemperatureToMaster4+0x60>)
 8000460:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000462:	e009      	b.n	8000478 <sendTemperatureToMaster4+0x40>
		int count = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
		count++;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	3301      	adds	r3, #1
 800046c:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b13      	cmp	r3, #19
 8000472:	dd01      	ble.n	8000478 <sendTemperatureToMaster4+0x40>
			Error_Handler();
 8000474:	f000 fbec 	bl	8000c50 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000478:	4a07      	ldr	r2, [pc, #28]	@ (8000498 <sendTemperatureToMaster4+0x60>)
 800047a:	4906      	ldr	r1, [pc, #24]	@ (8000494 <sendTemperatureToMaster4+0x5c>)
 800047c:	4807      	ldr	r0, [pc, #28]	@ (800049c <sendTemperatureToMaster4+0x64>)
 800047e:	f002 fd2f 	bl	8002ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1ed      	bne.n	8000464 <sendTemperatureToMaster4+0x2c>
		}
	}
}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000334 	.word	0x20000334
 8000498:	2000032c 	.word	0x2000032c
 800049c:	20000424 	.word	0x20000424

080004a0 <sendTemperatureToMaster5>:

void sendTemperatureToMaster5(float buffer[]){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 80004a8:	4b14      	ldr	r3, [pc, #80]	@ (80004fc <sendTemperatureToMaster5+0x5c>)
 80004aa:	2208      	movs	r2, #8
 80004ac:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst5;
 80004ae:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <sendTemperatureToMaster5+0x5c>)
 80004b0:	2215      	movs	r2, #21
 80004b2:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <sendTemperatureToMaster5+0x60>)
 80004bc:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3304      	adds	r3, #4
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <sendTemperatureToMaster5+0x60>)
 80004c8:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80004ca:	e009      	b.n	80004e0 <sendTemperatureToMaster5+0x40>
		int count = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
		count++;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2b13      	cmp	r3, #19
 80004da:	dd01      	ble.n	80004e0 <sendTemperatureToMaster5+0x40>
			Error_Handler();
 80004dc:	f000 fbb8 	bl	8000c50 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80004e0:	4a07      	ldr	r2, [pc, #28]	@ (8000500 <sendTemperatureToMaster5+0x60>)
 80004e2:	4906      	ldr	r1, [pc, #24]	@ (80004fc <sendTemperatureToMaster5+0x5c>)
 80004e4:	4807      	ldr	r0, [pc, #28]	@ (8000504 <sendTemperatureToMaster5+0x64>)
 80004e6:	f002 fcfb 	bl	8002ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1ed      	bne.n	80004cc <sendTemperatureToMaster5+0x2c>
		}
	}
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000334 	.word	0x20000334
 8000500:	2000032c 	.word	0x2000032c
 8000504:	20000424 	.word	0x20000424

08000508 <sendTemperatureToMaster6>:

void sendTemperatureToMaster6(float buffer[]){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000510:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <sendTemperatureToMaster6+0x5c>)
 8000512:	2208      	movs	r2, #8
 8000514:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst6;
 8000516:	4b13      	ldr	r3, [pc, #76]	@ (8000564 <sendTemperatureToMaster6+0x5c>)
 8000518:	2216      	movs	r2, #22
 800051a:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <sendTemperatureToMaster6+0x60>)
 8000524:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3304      	adds	r3, #4
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <sendTemperatureToMaster6+0x60>)
 8000530:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000532:	e009      	b.n	8000548 <sendTemperatureToMaster6+0x40>
		int count = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
		count++;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2b13      	cmp	r3, #19
 8000542:	dd01      	ble.n	8000548 <sendTemperatureToMaster6+0x40>
			Error_Handler();
 8000544:	f000 fb84 	bl	8000c50 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <sendTemperatureToMaster6+0x60>)
 800054a:	4906      	ldr	r1, [pc, #24]	@ (8000564 <sendTemperatureToMaster6+0x5c>)
 800054c:	4807      	ldr	r0, [pc, #28]	@ (800056c <sendTemperatureToMaster6+0x64>)
 800054e:	f002 fcc7 	bl	8002ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1ed      	bne.n	8000534 <sendTemperatureToMaster6+0x2c>
		}
	}
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000334 	.word	0x20000334
 8000568:	2000032c 	.word	0x2000032c
 800056c:	20000424 	.word	0x20000424

08000570 <sendTemperatureToMaster7>:

void sendTemperatureToMaster7(float buffer[]){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000578:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <sendTemperatureToMaster7+0x5c>)
 800057a:	2208      	movs	r2, #8
 800057c:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst7;
 800057e:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <sendTemperatureToMaster7+0x5c>)
 8000580:	2217      	movs	r2, #23
 8000582:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <sendTemperatureToMaster7+0x60>)
 800058c:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3304      	adds	r3, #4
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <sendTemperatureToMaster7+0x60>)
 8000598:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 800059a:	e009      	b.n	80005b0 <sendTemperatureToMaster7+0x40>
		int count = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
		count++;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
		if (count >= 20){
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b13      	cmp	r3, #19
 80005aa:	dd01      	ble.n	80005b0 <sendTemperatureToMaster7+0x40>
			Error_Handler();
 80005ac:	f000 fb50 	bl	8000c50 <Error_Handler>
	while(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData)){
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <sendTemperatureToMaster7+0x60>)
 80005b2:	4906      	ldr	r1, [pc, #24]	@ (80005cc <sendTemperatureToMaster7+0x5c>)
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <sendTemperatureToMaster7+0x64>)
 80005b6:	f002 fc93 	bl	8002ee0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1ed      	bne.n	800059c <sendTemperatureToMaster7+0x2c>
		}
	}
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000334 	.word	0x20000334
 80005d0:	2000032c 	.word	0x2000032c
 80005d4:	20000424 	.word	0x20000424

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fd0b 	bl	8000ff6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f82c 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fa56 	bl	8000a94 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f000 fa2a 	bl	8000a40 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80005ec:	f000 f9da 	bl	80009a4 <MX_FDCAN1_Init>
  MX_ADC2_Init();
 80005f0:	f000 f870 	bl	80006d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  initializeHistory();
 80005f4:	f7ff fe14 	bl	8000220 <initializeHistory>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f004 f848 	bl	800468c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xReadTemp */
  xReadTempHandle = osThreadNew(xReadTempFunction, NULL, &xReadTemp_attributes);
 80005fc:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <main+0x4c>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4809      	ldr	r0, [pc, #36]	@ (8000628 <main+0x50>)
 8000602:	f004 f88d 	bl	8004720 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a08      	ldr	r2, [pc, #32]	@ (800062c <main+0x54>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of xSendCAN */
  xSendCANHandle = osThreadNew(xSendCANFunction, NULL, &xSendCAN_attributes);
 800060c:	4a08      	ldr	r2, [pc, #32]	@ (8000630 <main+0x58>)
 800060e:	2100      	movs	r1, #0
 8000610:	4808      	ldr	r0, [pc, #32]	@ (8000634 <main+0x5c>)
 8000612:	f004 f885 	bl	8004720 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <main+0x60>)
 800061a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061c:	f004 f85a 	bl	80046d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0x48>
 8000624:	08007424 	.word	0x08007424
 8000628:	08000b89 	.word	0x08000b89
 800062c:	20000488 	.word	0x20000488
 8000630:	08007448 	.word	0x08007448
 8000634:	08000bb5 	.word	0x08000bb5
 8000638:	2000048c 	.word	0x2000048c

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	2238      	movs	r2, #56	@ 0x38
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f006 fe8c 	bl	8007368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800065e:	2000      	movs	r0, #0
 8000660:	f002 fffa 	bl	8003658 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2340      	movs	r3, #64	@ 0x40
 8000670:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800067a:	2304      	movs	r3, #4
 800067c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800067e:	2355      	movs	r3, #85	@ 0x55
 8000680:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	4618      	mov	r0, r3
 8000694:	f003 f894 	bl	80037c0 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800069e:	f000 fad7 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2303      	movs	r3, #3
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fb92 	bl	8003de4 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006c6:	f000 fac3 	bl	8000c50 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	@ 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2220      	movs	r2, #32
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f006 fe41 	bl	8007368 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e6:	4b9c      	ldr	r3, [pc, #624]	@ (8000958 <MX_ADC2_Init+0x284>)
 80006e8:	4a9c      	ldr	r2, [pc, #624]	@ (800095c <MX_ADC2_Init+0x288>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ec:	4b9a      	ldr	r3, [pc, #616]	@ (8000958 <MX_ADC2_Init+0x284>)
 80006ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f4:	4b98      	ldr	r3, [pc, #608]	@ (8000958 <MX_ADC2_Init+0x284>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b97      	ldr	r3, [pc, #604]	@ (8000958 <MX_ADC2_Init+0x284>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000700:	4b95      	ldr	r3, [pc, #596]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000706:	4b94      	ldr	r3, [pc, #592]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000708:	2201      	movs	r2, #1
 800070a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070c:	4b92      	ldr	r3, [pc, #584]	@ (8000958 <MX_ADC2_Init+0x284>)
 800070e:	2204      	movs	r2, #4
 8000710:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000712:	4b91      	ldr	r3, [pc, #580]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000714:	2200      	movs	r2, #0
 8000716:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000718:	4b8f      	ldr	r3, [pc, #572]	@ (8000958 <MX_ADC2_Init+0x284>)
 800071a:	2201      	movs	r2, #1
 800071c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 16;
 800071e:	4b8e      	ldr	r3, [pc, #568]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000720:	2210      	movs	r2, #16
 8000722:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b8c      	ldr	r3, [pc, #560]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b8a      	ldr	r3, [pc, #552]	@ (8000958 <MX_ADC2_Init+0x284>)
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000732:	4b89      	ldr	r3, [pc, #548]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000734:	2200      	movs	r2, #0
 8000736:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b87      	ldr	r3, [pc, #540]	@ (8000958 <MX_ADC2_Init+0x284>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000740:	4b85      	ldr	r3, [pc, #532]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000742:	2200      	movs	r2, #0
 8000744:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000746:	4b84      	ldr	r3, [pc, #528]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074e:	4882      	ldr	r0, [pc, #520]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000750:	f000 fee0 	bl	8001514 <HAL_ADC_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800075a:	f000 fa79 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075e:	4b80      	ldr	r3, [pc, #512]	@ (8000960 <MX_ADC2_Init+0x28c>)
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000762:	2306      	movs	r3, #6
 8000764:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000766:	2307      	movs	r3, #7
 8000768:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076a:	237f      	movs	r3, #127	@ 0x7f
 800076c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4877      	ldr	r0, [pc, #476]	@ (8000958 <MX_ADC2_Init+0x284>)
 800077c:	f001 f956 	bl	8001a2c <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000786:	f000 fa63 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800078a:	4b76      	ldr	r3, [pc, #472]	@ (8000964 <MX_ADC2_Init+0x290>)
 800078c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800078e:	230c      	movs	r3, #12
 8000790:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4870      	ldr	r0, [pc, #448]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000798:	f001 f948 	bl	8001a2c <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80007a2:	f000 fa55 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007a6:	4b70      	ldr	r3, [pc, #448]	@ (8000968 <MX_ADC2_Init+0x294>)
 80007a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007aa:	2312      	movs	r3, #18
 80007ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4869      	ldr	r0, [pc, #420]	@ (8000958 <MX_ADC2_Init+0x284>)
 80007b4:	f001 f93a 	bl	8001a2c <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80007be:	f000 fa47 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007c2:	4b6a      	ldr	r3, [pc, #424]	@ (800096c <MX_ADC2_Init+0x298>)
 80007c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007c6:	2318      	movs	r3, #24
 80007c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	4862      	ldr	r0, [pc, #392]	@ (8000958 <MX_ADC2_Init+0x284>)
 80007d0:	f001 f92c 	bl	8001a2c <HAL_ADC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80007da:	f000 fa39 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007de:	4b64      	ldr	r3, [pc, #400]	@ (8000970 <MX_ADC2_Init+0x29c>)
 80007e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80007e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	485a      	ldr	r0, [pc, #360]	@ (8000958 <MX_ADC2_Init+0x284>)
 80007ee:	f001 f91d 	bl	8001a2c <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80007f8:	f000 fa2a 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007fc:	4b5d      	ldr	r3, [pc, #372]	@ (8000974 <MX_ADC2_Init+0x2a0>)
 80007fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000800:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000804:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4853      	ldr	r0, [pc, #332]	@ (8000958 <MX_ADC2_Init+0x284>)
 800080c:	f001 f90e 	bl	8001a2c <HAL_ADC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 8000816:	f000 fa1b 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800081a:	4b57      	ldr	r3, [pc, #348]	@ (8000978 <MX_ADC2_Init+0x2a4>)
 800081c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800081e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000822:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	484b      	ldr	r0, [pc, #300]	@ (8000958 <MX_ADC2_Init+0x284>)
 800082a:	f001 f8ff 	bl	8001a2c <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 8000834:	f000 fa0c 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000838:	4b50      	ldr	r3, [pc, #320]	@ (800097c <MX_ADC2_Init+0x2a8>)
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800083c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000840:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	4619      	mov	r1, r3
 8000846:	4844      	ldr	r0, [pc, #272]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000848:	f001 f8f0 	bl	8001a2c <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 8000852:	f000 f9fd 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000856:	4b4a      	ldr	r3, [pc, #296]	@ (8000980 <MX_ADC2_Init+0x2ac>)
 8000858:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800085a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	483c      	ldr	r0, [pc, #240]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000866:	f001 f8e1 	bl	8001a2c <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC2_Init+0x1a0>
  {
    Error_Handler();
 8000870:	f000 f9ee 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000874:	4b43      	ldr	r3, [pc, #268]	@ (8000984 <MX_ADC2_Init+0x2b0>)
 8000876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800087c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	4835      	ldr	r0, [pc, #212]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000884:	f001 f8d2 	bl	8001a2c <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC2_Init+0x1be>
  {
    Error_Handler();
 800088e:	f000 f9df 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000892:	4b3d      	ldr	r3, [pc, #244]	@ (8000988 <MX_ADC2_Init+0x2b4>)
 8000894:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000896:	f240 2306 	movw	r3, #518	@ 0x206
 800089a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	482d      	ldr	r0, [pc, #180]	@ (8000958 <MX_ADC2_Init+0x284>)
 80008a2:	f001 f8c3 	bl	8001a2c <HAL_ADC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC2_Init+0x1dc>
  {
    Error_Handler();
 80008ac:	f000 f9d0 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80008b0:	4b36      	ldr	r3, [pc, #216]	@ (800098c <MX_ADC2_Init+0x2b8>)
 80008b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80008b4:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80008b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	4826      	ldr	r0, [pc, #152]	@ (8000958 <MX_ADC2_Init+0x284>)
 80008c0:	f001 f8b4 	bl	8001a2c <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC2_Init+0x1fa>
  {
    Error_Handler();
 80008ca:	f000 f9c1 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008ce:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <MX_ADC2_Init+0x2bc>)
 80008d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80008d2:	f240 2312 	movw	r3, #530	@ 0x212
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	481e      	ldr	r0, [pc, #120]	@ (8000958 <MX_ADC2_Init+0x284>)
 80008de:	f001 f8a5 	bl	8001a2c <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC2_Init+0x218>
  {
    Error_Handler();
 80008e8:	f000 f9b2 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80008ec:	4b29      	ldr	r3, [pc, #164]	@ (8000994 <MX_ADC2_Init+0x2c0>)
 80008ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80008f0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80008f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4817      	ldr	r0, [pc, #92]	@ (8000958 <MX_ADC2_Init+0x284>)
 80008fc:	f001 f896 	bl	8001a2c <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC2_Init+0x236>
  {
    Error_Handler();
 8000906:	f000 f9a3 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800090a:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <MX_ADC2_Init+0x2c4>)
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800090e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000912:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4619      	mov	r1, r3
 8000918:	480f      	ldr	r0, [pc, #60]	@ (8000958 <MX_ADC2_Init+0x284>)
 800091a:	f001 f887 	bl	8001a2c <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC2_Init+0x254>
  {
    Error_Handler();
 8000924:	f000 f994 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000928:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_ADC2_Init+0x2c8>)
 800092a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 800092c:	f240 3306 	movw	r3, #774	@ 0x306
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4808      	ldr	r0, [pc, #32]	@ (8000958 <MX_ADC2_Init+0x284>)
 8000938:	f001 f878 	bl	8001a2c <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC2_Init+0x272>
  {
    Error_Handler();
 8000942:	f000 f985 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) rawAdcBuffer, numberOfThermistors);
 8000946:	2210      	movs	r2, #16
 8000948:	4915      	ldr	r1, [pc, #84]	@ (80009a0 <MX_ADC2_Init+0x2cc>)
 800094a:	4803      	ldr	r0, [pc, #12]	@ (8000958 <MX_ADC2_Init+0x284>)
 800094c:	f000 ff90 	bl	8001870 <HAL_ADC_Start_DMA>
  /* USER CODE END ADC2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000358 	.word	0x20000358
 800095c:	50000100 	.word	0x50000100
 8000960:	04300002 	.word	0x04300002
 8000964:	08600004 	.word	0x08600004
 8000968:	0c900008 	.word	0x0c900008
 800096c:	10c00010 	.word	0x10c00010
 8000970:	14f00020 	.word	0x14f00020
 8000974:	19200040 	.word	0x19200040
 8000978:	1d500080 	.word	0x1d500080
 800097c:	21800100 	.word	0x21800100
 8000980:	25b00200 	.word	0x25b00200
 8000984:	2a000400 	.word	0x2a000400
 8000988:	2e300800 	.word	0x2e300800
 800098c:	32601000 	.word	0x32601000
 8000990:	36902000 	.word	0x36902000
 8000994:	3ac04000 	.word	0x3ac04000
 8000998:	3ef08000 	.word	0x3ef08000
 800099c:	47520000 	.word	0x47520000
 80009a0:	20000490 	.word	0x20000490

080009a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009a8:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009aa:	4a24      	ldr	r2, [pc, #144]	@ (8000a3c <MX_FDCAN1_Init+0x98>)
 80009ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009b4:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 80009d2:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009d4:	220a      	movs	r2, #10
 80009d6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009d8:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009da:	2201      	movs	r2, #1
 80009dc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009e0:	2216      	movs	r2, #22
 80009e2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009e6:	220b      	movs	r2, #11
 80009e8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a14:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 8000a16:	f002 f8e1 	bl	8002bdc <HAL_FDCAN_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000a20:	f000 f916 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2101      	movs	r1, #1
 8000a28:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 8000a2a:	f002 fa9d 	bl	8002f68 <HAL_FDCAN_ActivateNotification>
  HAL_FDCAN_Start(&hfdcan1);
 8000a2e:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <MX_FDCAN1_Init+0x94>)
 8000a30:	f002 fa2e 	bl	8002e90 <HAL_FDCAN_Start>
  /* USER CODE END FDCAN1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000424 	.word	0x20000424
 8000a3c:	40006400 	.word	0x40006400

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_DMA_Init+0x50>)
 8000a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a4a:	4a11      	ldr	r2, [pc, #68]	@ (8000a90 <MX_DMA_Init+0x50>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <MX_DMA_Init+0x50>)
 8000a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_DMA_Init+0x50>)
 8000a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a62:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <MX_DMA_Init+0x50>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_DMA_Init+0x50>)
 8000a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2105      	movs	r1, #5
 8000a7a:	200b      	movs	r0, #11
 8000a7c:	f001 fe07 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a80:	200b      	movs	r0, #11
 8000a82:	f001 fe1e 	bl	80026c2 <HAL_NVIC_EnableIRQ>

}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aaa:	4b24      	ldr	r3, [pc, #144]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	4a23      	ldr	r2, [pc, #140]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab6:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ace:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a17      	ldr	r2, [pc, #92]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a11      	ldr	r2, [pc, #68]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_GPIO_Init+0xa8>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(userLED_GPIO_Port, userLED_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b10:	480b      	ldr	r0, [pc, #44]	@ (8000b40 <MX_GPIO_Init+0xac>)
 8000b12:	f002 fd6f 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userLED_Pin */
  GPIO_InitStruct.Pin = userLED_Pin;
 8000b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(userLED_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <MX_GPIO_Init+0xac>)
 8000b30:	f002 fbde 	bl	80032f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	@ 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000800 	.word	0x48000800

08000b44 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(xReadTempHandle, &xHigherPriorityTaskWoken);
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f107 020c 	add.w	r2, r7, #12
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f005 fb80 	bl	8006260 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d007      	beq.n	8000b76 <HAL_ADC_ConvCpltCallback+0x32>
 8000b66:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <HAL_ADC_ConvCpltCallback+0x40>)
 8000b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	f3bf 8f4f 	dsb	sy
 8000b72:	f3bf 8f6f 	isb	sy
}
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000488 	.word	0x20000488
 8000b84:	e000ed04 	.word	0xe000ed04

08000b88 <xReadTempFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_xReadTempFunction */
void xReadTempFunction(void *argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	xReadTempHandle = xTaskGetCurrentTaskHandle();
 8000b90:	f005 fa80 	bl	8006094 <xTaskGetCurrentTaskHandle>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a06      	ldr	r2, [pc, #24]	@ (8000bb0 <xReadTempFunction+0x28>)
 8000b98:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f005 fb16 	bl	80061d0 <ulTaskNotifyTake>

	osDelay(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f003 fe4d 	bl	8004844 <osDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000baa:	bf00      	nop
 8000bac:	e7f5      	b.n	8000b9a <xReadTempFunction+0x12>
 8000bae:	bf00      	nop
 8000bb0:	20000488 	.word	0x20000488

08000bb4 <xSendCANFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_xSendCANFunction */
void xSendCANFunction(void *argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  static int burst = 0;

	  if(burst % 3 == 0){
 8000bbc:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <xSendCANFunction+0x8c>)
 8000bbe:	6819      	ldr	r1, [r3, #0]
 8000bc0:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <xSendCANFunction+0x90>)
 8000bc2:	fb83 3201 	smull	r3, r2, r3, r1
 8000bc6:	17cb      	asrs	r3, r1, #31
 8000bc8:	1ad2      	subs	r2, r2, r3
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	1aca      	subs	r2, r1, r3
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	d109      	bne.n	8000bea <xSendCANFunction+0x36>
		  sendTemperatureToMaster0(filteredReadings);
 8000bd6:	481c      	ldr	r0, [pc, #112]	@ (8000c48 <xSendCANFunction+0x94>)
 8000bd8:	f7ff fb5e 	bl	8000298 <sendTemperatureToMaster0>
		  sendTemperatureToMaster1(filteredReadings);
 8000bdc:	481a      	ldr	r0, [pc, #104]	@ (8000c48 <xSendCANFunction+0x94>)
 8000bde:	f7ff fb8f 	bl	8000300 <sendTemperatureToMaster1>
		  sendTemperatureToMaster2(filteredReadings);
 8000be2:	4819      	ldr	r0, [pc, #100]	@ (8000c48 <xSendCANFunction+0x94>)
 8000be4:	f7ff fbc0 	bl	8000368 <sendTemperatureToMaster2>
 8000be8:	e01c      	b.n	8000c24 <xSendCANFunction+0x70>
	  }
	  else if(burst % 3 == 1){
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <xSendCANFunction+0x8c>)
 8000bec:	6819      	ldr	r1, [r3, #0]
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <xSendCANFunction+0x90>)
 8000bf0:	fb83 3201 	smull	r3, r2, r3, r1
 8000bf4:	17cb      	asrs	r3, r1, #31
 8000bf6:	1ad2      	subs	r2, r2, r3
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	1aca      	subs	r2, r1, r3
 8000c00:	2a01      	cmp	r2, #1
 8000c02:	d109      	bne.n	8000c18 <xSendCANFunction+0x64>
		  sendTemperatureToMaster3(filteredReadings);
 8000c04:	4810      	ldr	r0, [pc, #64]	@ (8000c48 <xSendCANFunction+0x94>)
 8000c06:	f7ff fbe3 	bl	80003d0 <sendTemperatureToMaster3>
		  sendTemperatureToMaster4(filteredReadings);
 8000c0a:	480f      	ldr	r0, [pc, #60]	@ (8000c48 <xSendCANFunction+0x94>)
 8000c0c:	f7ff fc14 	bl	8000438 <sendTemperatureToMaster4>
		  sendTemperatureToMaster5(filteredReadings);
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <xSendCANFunction+0x94>)
 8000c12:	f7ff fc45 	bl	80004a0 <sendTemperatureToMaster5>
 8000c16:	e005      	b.n	8000c24 <xSendCANFunction+0x70>
	  }
	  else{
		  sendTemperatureToMaster6(filteredReadings);
 8000c18:	480b      	ldr	r0, [pc, #44]	@ (8000c48 <xSendCANFunction+0x94>)
 8000c1a:	f7ff fc75 	bl	8000508 <sendTemperatureToMaster6>
		  sendTemperatureToMaster7(filteredReadings);
 8000c1e:	480a      	ldr	r0, [pc, #40]	@ (8000c48 <xSendCANFunction+0x94>)
 8000c20:	f7ff fca6 	bl	8000570 <sendTemperatureToMaster7>
	  }

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000c24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c28:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <xSendCANFunction+0x98>)
 8000c2a:	f002 fcfb 	bl	8003624 <HAL_GPIO_TogglePin>
	  burst++;
 8000c2e:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <xSendCANFunction+0x8c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a02      	ldr	r2, [pc, #8]	@ (8000c40 <xSendCANFunction+0x8c>)
 8000c36:	6013      	str	r3, [r2, #0]

    osDelay(100);
 8000c38:	2064      	movs	r0, #100	@ 0x64
 8000c3a:	f003 fe03 	bl	8004844 <osDelay>
  {
 8000c3e:	e7bd      	b.n	8000bbc <xSendCANFunction+0x8>
 8000c40:	200004d0 	.word	0x200004d0
 8000c44:	55555556 	.word	0x55555556
 8000c48:	200002ac 	.word	0x200002ac
 8000c4c:	48000800 	.word	0x48000800

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c5a:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <Error_Handler+0x18>)
 8000c5c:	f002 fcca 	bl	80035f4 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x14>
 8000c68:	48000800 	.word	0x48000800

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_MspInit+0x50>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c76:	4a11      	ldr	r2, [pc, #68]	@ (8000cbc <HAL_MspInit+0x50>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <HAL_MspInit+0x50>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <HAL_MspInit+0x50>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000cbc <HAL_MspInit+0x50>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_MspInit+0x50>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	f06f 0001 	mvn.w	r0, #1
 8000caa:	f001 fcf0 	bl	800268e <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cae:	f002 fd77 	bl	80037a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0a0      	sub	sp, #128	@ 0x80
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2250      	movs	r2, #80	@ 0x50
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f006 fb41 	bl	8007368 <memset>
  if(hadc->Instance==ADC2)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a58      	ldr	r2, [pc, #352]	@ (8000e4c <HAL_ADC_MspInit+0x18c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	f040 80a9 	bne.w	8000e44 <HAL_ADC_MspInit+0x184>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cf6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cf8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 fa52 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000d0e:	f7ff ff9f 	bl	8000c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d12:	4b4f      	ldr	r3, [pc, #316]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	4a4e      	ldr	r2, [pc, #312]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2a:	4b49      	ldr	r3, [pc, #292]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	4a48      	ldr	r2, [pc, #288]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d30:	f043 0320 	orr.w	r3, r3, #32
 8000d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d36:	4b46      	ldr	r3, [pc, #280]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b43      	ldr	r3, [pc, #268]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	4a42      	ldr	r2, [pc, #264]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4e:	4b40      	ldr	r3, [pc, #256]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	4a3c      	ldr	r2, [pc, #240]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d66:	4b3a      	ldr	r3, [pc, #232]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b37      	ldr	r3, [pc, #220]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	4a36      	ldr	r2, [pc, #216]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7e:	4b34      	ldr	r3, [pc, #208]	@ (8000e50 <HAL_ADC_MspInit+0x190>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ADC2_IN11
    PB2     ------> ADC2_IN12
    PB11     ------> ADC2_IN14
    PB15     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d96:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482d      	ldr	r0, [pc, #180]	@ (8000e54 <HAL_ADC_MspInit+0x194>)
 8000d9e:	f002 faa7 	bl	80032f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000da2:	233f      	movs	r3, #63	@ 0x3f
 8000da4:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da6:	2303      	movs	r3, #3
 8000da8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4828      	ldr	r0, [pc, #160]	@ (8000e58 <HAL_ADC_MspInit+0x198>)
 8000db6:	f002 fa9b 	bl	80032f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000dba:	23f3      	movs	r3, #243	@ 0xf3
 8000dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd0:	f002 fa8e 	bl	80032f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_15;
 8000dd4:	f648 0304 	movw	r3, #34820	@ 0x8804
 8000dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000de6:	4619      	mov	r1, r3
 8000de8:	481c      	ldr	r0, [pc, #112]	@ (8000e5c <HAL_ADC_MspInit+0x19c>)
 8000dea:	f002 fa81 	bl	80032f0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000df0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e64 <HAL_ADC_MspInit+0x1a4>)
 8000df2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000df6:	2224      	movs	r2, #36	@ 0x24
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000e08:	2280      	movs	r2, #128	@ 0x80
 8000e0a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000e0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e12:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e1a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000e1e:	2220      	movs	r2, #32
 8000e20:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e28:	480d      	ldr	r0, [pc, #52]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000e2a:	f001 fc65 	bl	80026f8 <HAL_DMA_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000e34:	f7ff ff0c 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000e3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_ADC_MspInit+0x1a0>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8000e44:	bf00      	nop
 8000e46:	3780      	adds	r7, #128	@ 0x80
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	50000100 	.word	0x50000100
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48001400 	.word	0x48001400
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	200003c4 	.word	0x200003c4
 8000e64:	40020008 	.word	0x40020008

08000e68 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09e      	sub	sp, #120	@ 0x78
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2250      	movs	r2, #80	@ 0x50
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 fa6d 	bl	8007368 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a20      	ldr	r2, [pc, #128]	@ (8000f14 <HAL_FDCAN_MspInit+0xac>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d139      	bne.n	8000f0c <HAL_FDCAN_MspInit+0xa4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000e9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 f97f 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000eb4:	f7ff fecc 	bl	8000c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <HAL_FDCAN_MspInit+0xb0>)
 8000eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebc:	4a16      	ldr	r2, [pc, #88]	@ (8000f18 <HAL_FDCAN_MspInit+0xb0>)
 8000ebe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <HAL_FDCAN_MspInit+0xb0>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <HAL_FDCAN_MspInit+0xb0>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed4:	4a10      	ldr	r2, [pc, #64]	@ (8000f18 <HAL_FDCAN_MspInit+0xb0>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_FDCAN_MspInit+0xb0>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ee8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000eec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000efa:	2309      	movs	r3, #9
 8000efc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f08:	f002 f9f2 	bl	80032f0 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3778      	adds	r7, #120	@ 0x78
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40006400 	.word	0x40006400
 8000f18:	40021000 	.word	0x40021000

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <NMI_Handler+0x4>

08000f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <MemManage_Handler+0x4>

08000f34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f56:	f000 f8a1 	bl	800109c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f5a:	f005 f8ab 	bl	80060b4 <xTaskGetSchedulerState>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d001      	beq.n	8000f68 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f64:	f005 ff80 	bl	8006e68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <DMA1_Channel1_IRQHandler+0x10>)
 8000f72:	f001 fce4 	bl	800293e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200003c4 	.word	0x200003c4

08000f80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa4:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fa8:	f7ff ffea 	bl	8000f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopForever+0xe>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopForever+0x16>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f006 f9d1 	bl	8007378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fd6:	f7ff faff 	bl	80005d8 <main>

08000fda <LoopForever>:

LoopForever:
    b LoopForever
 8000fda:	e7fe      	b.n	8000fda <LoopForever>
  ldr   r0, =_estack
 8000fdc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fe8:	08007494 	.word	0x08007494
  ldr r2, =_sbss
 8000fec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ff0:	20001e28 	.word	0x20001e28

08000ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC1_2_IRQHandler>

08000ff6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f001 fb39 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001006:	200f      	movs	r0, #15
 8001008:	f000 f80e 	bl	8001028 <HAL_InitTick>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	e001      	b.n	800101c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001018:	f7ff fe28 	bl	8000c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101c:	79fb      	ldrb	r3, [r7, #7]

}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <HAL_InitTick+0x68>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d022      	beq.n	8001082 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <HAL_InitTick+0x6c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_InitTick+0x68>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001048:	fbb1 f3f3 	udiv	r3, r1, r3
 800104c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fb44 	bl	80026de <HAL_SYSTICK_Config>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10f      	bne.n	800107c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	d809      	bhi.n	8001076 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001062:	2200      	movs	r2, #0
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	f04f 30ff 	mov.w	r0, #4294967295
 800106a:	f001 fb10 	bl	800268e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <HAL_InitTick+0x70>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	e007      	b.n	8001086 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	e004      	b.n	8001086 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e001      	b.n	8001086 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000008 	.word	0x20000008
 8001094:	20000000 	.word	0x20000000
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_IncTick+0x1c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_IncTick+0x20>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a03      	ldr	r2, [pc, #12]	@ (80010b8 <HAL_IncTick+0x1c>)
 80010ac:	6013      	str	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	200004d4 	.word	0x200004d4
 80010bc:	20000008 	.word	0x20000008

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200004d4 	.word	0x200004d4

080010d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	609a      	str	r2, [r3, #8]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	609a      	str	r2, [r3, #8]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3360      	adds	r3, #96	@ 0x60
 8001152:	461a      	mov	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <LL_ADC_SetOffset+0x44>)
 8001162:	4013      	ands	r3, r2
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	4313      	orrs	r3, r2
 8001170:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001178:	bf00      	nop
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	03fff000 	.word	0x03fff000

08001188 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3360      	adds	r3, #96	@ 0x60
 8001196:	461a      	mov	r2, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3360      	adds	r3, #96	@ 0x60
 80011c4:	461a      	mov	r2, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	431a      	orrs	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011de:	bf00      	nop
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b087      	sub	sp, #28
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3360      	adds	r3, #96	@ 0x60
 80011fa:	461a      	mov	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	431a      	orrs	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3360      	adds	r3, #96	@ 0x60
 8001230:	461a      	mov	r2, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800124a:	bf00      	nop
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	615a      	str	r2, [r3, #20]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b087      	sub	sp, #28
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3330      	adds	r3, #48	@ 0x30
 80012b2:	461a      	mov	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	4413      	add	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	211f      	movs	r1, #31
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	401a      	ands	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0e9b      	lsrs	r3, r3, #26
 80012da:	f003 011f 	and.w	r1, r3, #31
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	431a      	orrs	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b087      	sub	sp, #28
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3314      	adds	r3, #20
 800130a:	461a      	mov	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	0e5b      	lsrs	r3, r3, #25
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	4413      	add	r3, r2
 8001318:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	0d1b      	lsrs	r3, r3, #20
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	2107      	movs	r1, #7
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	0d1b      	lsrs	r3, r3, #20
 8001334:	f003 031f 	and.w	r3, r3, #31
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	431a      	orrs	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001344:	bf00      	nop
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001368:	43db      	mvns	r3, r3
 800136a:	401a      	ands	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0318 	and.w	r3, r3, #24
 8001372:	4908      	ldr	r1, [pc, #32]	@ (8001394 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001374:	40d9      	lsrs	r1, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	400b      	ands	r3, r1
 800137a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800137e:	431a      	orrs	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	0007ffff 	.word	0x0007ffff

08001398 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 031f 	and.w	r3, r3, #31
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80013c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6093      	str	r3, [r2, #8]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013ec:	d101      	bne.n	80013f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001410:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001414:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001438:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800143c:	d101      	bne.n	8001442 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <LL_ADC_IsEnabled+0x18>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <LL_ADC_IsEnabled+0x1a>
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014b2:	f043 0204 	orr.w	r2, r3, #4
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d101      	bne.n	80014de <LL_ADC_REG_IsConversionOngoing+0x18>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d101      	bne.n	8001504 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e19b      	b.n	8001866 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fbbf 	bl	8000cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff3f 	bl	80013d8 <LL_ADC_IsDeepPowerDownEnabled>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff25 	bl	80013b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff5a 	bl	8001428 <LL_ADC_IsInternalRegulatorEnabled>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d115      	bne.n	80015a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff3e 	bl	8001400 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001584:	4b97      	ldr	r3, [pc, #604]	@ (80017e4 <HAL_ADC_Init+0x2d0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	4a97      	ldr	r2, [pc, #604]	@ (80017e8 <HAL_ADC_Init+0x2d4>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	3301      	adds	r3, #1
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001598:	e002      	b.n	80015a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3b01      	subs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff3c 	bl	8001428 <LL_ADC_IsInternalRegulatorEnabled>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10d      	bne.n	80015d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ba:	f043 0210 	orr.w	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff75 	bl	80014c6 <LL_ADC_REG_IsConversionOngoing>
 80015dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 8134 	bne.w	8001854 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 8130 	bne.w	8001854 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015fc:	f043 0202 	orr.w	r2, r3, #2
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff35 	bl	8001478 <LL_ADC_IsEnabled>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d137      	bne.n	8001684 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800161c:	d004      	beq.n	8001628 <HAL_ADC_Init+0x114>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a72      	ldr	r2, [pc, #456]	@ (80017ec <HAL_ADC_Init+0x2d8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d10f      	bne.n	8001648 <HAL_ADC_Init+0x134>
 8001628:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800162c:	f7ff ff24 	bl	8001478 <LL_ADC_IsEnabled>
 8001630:	4604      	mov	r4, r0
 8001632:	486e      	ldr	r0, [pc, #440]	@ (80017ec <HAL_ADC_Init+0x2d8>)
 8001634:	f7ff ff20 	bl	8001478 <LL_ADC_IsEnabled>
 8001638:	4603      	mov	r3, r0
 800163a:	4323      	orrs	r3, r4
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	e008      	b.n	800165a <HAL_ADC_Init+0x146>
 8001648:	4869      	ldr	r0, [pc, #420]	@ (80017f0 <HAL_ADC_Init+0x2dc>)
 800164a:	f7ff ff15 	bl	8001478 <LL_ADC_IsEnabled>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d012      	beq.n	8001684 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001666:	d004      	beq.n	8001672 <HAL_ADC_Init+0x15e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a5f      	ldr	r2, [pc, #380]	@ (80017ec <HAL_ADC_Init+0x2d8>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Init+0x162>
 8001672:	4a60      	ldr	r2, [pc, #384]	@ (80017f4 <HAL_ADC_Init+0x2e0>)
 8001674:	e000      	b.n	8001678 <HAL_ADC_Init+0x164>
 8001676:	4a60      	ldr	r2, [pc, #384]	@ (80017f8 <HAL_ADC_Init+0x2e4>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4619      	mov	r1, r3
 800167e:	4610      	mov	r0, r2
 8001680:	f7ff fd2a 	bl	80010d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7f5b      	ldrb	r3, [r3, #29]
 8001688:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800168e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001694:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800169a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d106      	bne.n	80016c0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b6:	3b01      	subs	r3, #1
 80016b8:	045b      	lsls	r3, r3, #17
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d009      	beq.n	80016dc <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	4b46      	ldr	r3, [pc, #280]	@ (80017fc <HAL_ADC_Init+0x2e8>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	69b9      	ldr	r1, [r7, #24]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff feee 	bl	80014ec <LL_ADC_INJ_IsConversionOngoing>
 8001710:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d17b      	bne.n	8001810 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d178      	bne.n	8001810 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001722:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800172a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800173a:	f023 0302 	bic.w	r3, r3, #2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	69b9      	ldr	r1, [r7, #24]
 8001744:	430b      	orrs	r3, r1
 8001746:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d017      	beq.n	8001780 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800175e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001768:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800176c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6911      	ldr	r1, [r2, #16]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800177e:	e013      	b.n	80017a8 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800178e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80017a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017a4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d126      	bne.n	8001800 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017c8:	4311      	orrs	r1, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80017ce:	4311      	orrs	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017d4:	430a      	orrs	r2, r1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	611a      	str	r2, [r3, #16]
 80017e2:	e015      	b.n	8001810 <HAL_ADC_Init+0x2fc>
 80017e4:	20000000 	.word	0x20000000
 80017e8:	053e2d63 	.word	0x053e2d63
 80017ec:	50000100 	.word	0x50000100
 80017f0:	50000400 	.word	0x50000400
 80017f4:	50000300 	.word	0x50000300
 80017f8:	50000700 	.word	0x50000700
 80017fc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d10c      	bne.n	8001832 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f023 010f 	bic.w	r1, r3, #15
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	1e5a      	subs	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001830:	e007      	b.n	8001842 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 020f 	bic.w	r2, r2, #15
 8001840:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001846:	f023 0303 	bic.w	r3, r3, #3
 800184a:	f043 0201 	orr.w	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001852:	e007      	b.n	8001864 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001858:	f043 0210 	orr.w	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001864:	7ffb      	ldrb	r3, [r7, #31]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	@ 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	bf00      	nop

08001870 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001884:	d004      	beq.n	8001890 <HAL_ADC_Start_DMA+0x20>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a57      	ldr	r2, [pc, #348]	@ (80019e8 <HAL_ADC_Start_DMA+0x178>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_ADC_Start_DMA+0x24>
 8001890:	4b56      	ldr	r3, [pc, #344]	@ (80019ec <HAL_ADC_Start_DMA+0x17c>)
 8001892:	e000      	b.n	8001896 <HAL_ADC_Start_DMA+0x26>
 8001894:	4b56      	ldr	r3, [pc, #344]	@ (80019f0 <HAL_ADC_Start_DMA+0x180>)
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fd7e 	bl	8001398 <LL_ADC_GetMultimode>
 800189c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fe0f 	bl	80014c6 <LL_ADC_REG_IsConversionOngoing>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 8094 	bne.w	80019d8 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Start_DMA+0x4e>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e08f      	b.n	80019de <HAL_ADC_Start_DMA+0x16e>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a4a      	ldr	r2, [pc, #296]	@ (80019f4 <HAL_ADC_Start_DMA+0x184>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d008      	beq.n	80018e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b05      	cmp	r3, #5
 80018da:	d002      	beq.n	80018e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b09      	cmp	r3, #9
 80018e0:	d173      	bne.n	80019ca <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 fcce 	bl	8002284 <ADC_Enable>
 80018e8:	4603      	mov	r3, r0
 80018ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d166      	bne.n	80019c0 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a37      	ldr	r2, [pc, #220]	@ (80019e8 <HAL_ADC_Start_DMA+0x178>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d002      	beq.n	8001916 <HAL_ADC_Start_DMA+0xa6>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	e001      	b.n	800191a <HAL_ADC_Start_DMA+0xaa>
 8001916:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	4293      	cmp	r3, r2
 8001920:	d002      	beq.n	8001928 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001944:	f023 0206 	bic.w	r2, r3, #6
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	661a      	str	r2, [r3, #96]	@ 0x60
 800194c:	e002      	b.n	8001954 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001958:	4a27      	ldr	r2, [pc, #156]	@ (80019f8 <HAL_ADC_Start_DMA+0x188>)
 800195a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001960:	4a26      	ldr	r2, [pc, #152]	@ (80019fc <HAL_ADC_Start_DMA+0x18c>)
 8001962:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001968:	4a25      	ldr	r2, [pc, #148]	@ (8001a00 <HAL_ADC_Start_DMA+0x190>)
 800196a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	221c      	movs	r2, #28
 8001972:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0210 	orr.w	r2, r2, #16
 800198a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3340      	adds	r3, #64	@ 0x40
 80019a6:	4619      	mov	r1, r3
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f000 ff4c 	bl	8002848 <HAL_DMA_Start_IT>
 80019b0:	4603      	mov	r3, r0
 80019b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fd70 	bl	800149e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80019be:	e00d      	b.n	80019dc <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80019c8:	e008      	b.n	80019dc <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80019d6:	e001      	b.n	80019dc <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
 80019da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	50000100 	.word	0x50000100
 80019ec:	50000300 	.word	0x50000300
 80019f0:	50000700 	.word	0x50000700
 80019f4:	50000400 	.word	0x50000400
 80019f8:	080023b1 	.word	0x080023b1
 80019fc:	08002489 	.word	0x08002489
 8001a00:	080024a5 	.word	0x080024a5

08001a04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0b6      	sub	sp, #216	@ 0xd8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d102      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x24>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f000 bc04 	b.w	8002258 <HAL_ADC_ConfigChannel+0x82c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fd32 	bl	80014c6 <LL_ADC_REG_IsConversionOngoing>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 83e8 	bne.w	800223a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f7ff fc13 	bl	80012a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fd20 	bl	80014c6 <LL_ADC_REG_IsConversionOngoing>
 8001a86:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fd2c 	bl	80014ec <LL_ADC_INJ_IsConversionOngoing>
 8001a94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f040 81d9 	bne.w	8001e54 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 81d4 	bne.w	8001e54 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff fc1a 	bl	80012fa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fbc1 	bl	8001256 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ad4:	e00e      	b.n	8001af4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6819      	ldr	r1, [r3, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f7ff fc09 	bl	80012fa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fbb1 	bl	8001256 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	08db      	lsrs	r3, r3, #3
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d022      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b26:	f7ff fb0b 	bl	8001140 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6919      	ldr	r1, [r3, #16]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	461a      	mov	r2, r3
 8001b38:	f7ff fb57 	bl	80011ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d102      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x126>
 8001b4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b50:	e000      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x128>
 8001b52:	2300      	movs	r3, #0
 8001b54:	461a      	mov	r2, r3
 8001b56:	f7ff fb63 	bl	8001220 <LL_ADC_SetOffsetSaturation>
 8001b5a:	e17b      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fb10 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10a      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x15c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fb05 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	f003 021f 	and.w	r2, r3, #31
 8001b86:	e01e      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x19a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fafa 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ba6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001baa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	e004      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x1b2>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	0e9b      	lsrs	r3, r3, #26
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	e018      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x1e4>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c02:	2320      	movs	r3, #32
 8001c04:	e004      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d106      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fac9 	bl	80011b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2101      	movs	r1, #1
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff faad 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x222>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff faa2 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	0e9b      	lsrs	r3, r3, #26
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	e01e      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x260>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2101      	movs	r1, #1
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fa97 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	e004      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x278>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0e9b      	lsrs	r3, r3, #26
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	e018      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x2aa>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	e004      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d106      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fa66 	bl	80011b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2102      	movs	r1, #2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fa4a 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10a      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x2e8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2102      	movs	r1, #2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fa3f 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	0e9b      	lsrs	r3, r3, #26
 8001d0e:	f003 021f 	and.w	r2, r3, #31
 8001d12:	e01e      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x326>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fa34 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001d42:	2320      	movs	r3, #32
 8001d44:	e004      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d105      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x33e>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0e9b      	lsrs	r3, r3, #26
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	e016      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x36c>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001d7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	e004      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d106      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2200      	movs	r2, #0
 8001da2:	2102      	movs	r1, #2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fa05 	bl	80011b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2103      	movs	r1, #3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f9e9 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10a      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x3aa>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f9de 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	0e9b      	lsrs	r3, r3, #26
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	e017      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x3da>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2103      	movs	r1, #3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f9d3 	bl	8001188 <LL_ADC_GetOffsetChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001dee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001df0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001df2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e003      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x3f2>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0e9b      	lsrs	r3, r3, #26
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	e011      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x416>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e003      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d106      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f9b0 	bl	80011b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fb0d 	bl	8001478 <LL_ADC_IsEnabled>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f040 813d 	bne.w	80020e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	461a      	mov	r2, r3
 8001e74:	f7ff fa6c 	bl	8001350 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4aa2      	ldr	r2, [pc, #648]	@ (8002108 <HAL_ADC_ConfigChannel+0x6dc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	f040 812e 	bne.w	80020e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x480>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	bf94      	ite	ls
 8001ea4:	2301      	movls	r3, #1
 8001ea6:	2300      	movhi	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e019      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x4b4>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001eba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ebc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e003      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2b09      	cmp	r3, #9
 8001ed8:	bf94      	ite	ls
 8001eda:	2301      	movls	r3, #1
 8001edc:	2300      	movhi	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d079      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x4d4>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	069b      	lsls	r3, r3, #26
 8001efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001efe:	e015      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x500>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f10:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	e003      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	069b      	lsls	r3, r3, #26
 8001f28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x520>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0e9b      	lsrs	r3, r3, #26
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	e017      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x550>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	ea42 0103 	orr.w	r1, r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10a      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x576>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	3301      	adds	r3, #1
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	051b      	lsls	r3, r3, #20
 8001fa0:	e018      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x5a8>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001fba:	2320      	movs	r3, #32
 8001fbc:	e003      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	e07e      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x5c8>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0e9b      	lsrs	r3, r3, #26
 8001fea:	3301      	adds	r3, #1
 8001fec:	069b      	lsls	r3, r3, #26
 8001fee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ff2:	e015      	b.n	8002020 <HAL_ADC_ConfigChannel+0x5f4>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002004:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800200c:	2320      	movs	r3, #32
 800200e:	e003      	b.n	8002018 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3301      	adds	r3, #1
 800201a:	069b      	lsls	r3, r3, #26
 800201c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x614>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0e9b      	lsrs	r3, r3, #26
 8002032:	3301      	adds	r3, #1
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	e017      	b.n	8002070 <HAL_ADC_ConfigChannel+0x644>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	61fb      	str	r3, [r7, #28]
  return result;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002058:	2320      	movs	r3, #32
 800205a:	e003      	b.n	8002064 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3301      	adds	r3, #1
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	ea42 0103 	orr.w	r1, r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10d      	bne.n	800209c <HAL_ADC_ConfigChannel+0x670>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	3301      	adds	r3, #1
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	3b1e      	subs	r3, #30
 8002094:	051b      	lsls	r3, r3, #20
 8002096:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800209a:	e01b      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x6a8>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	613b      	str	r3, [r7, #16]
  return result;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80020b4:	2320      	movs	r3, #32
 80020b6:	e003      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f003 021f 	and.w	r2, r3, #31
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	3b1e      	subs	r3, #30
 80020ce:	051b      	lsls	r3, r3, #20
 80020d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020da:	4619      	mov	r1, r3
 80020dc:	f7ff f90d 	bl	80012fa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <HAL_ADC_ConfigChannel+0x6e0>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80af 	beq.w	800224c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020f6:	d004      	beq.n	8002102 <HAL_ADC_ConfigChannel+0x6d6>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <HAL_ADC_ConfigChannel+0x6e4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10a      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x6ec>
 8002102:	4b04      	ldr	r3, [pc, #16]	@ (8002114 <HAL_ADC_ConfigChannel+0x6e8>)
 8002104:	e009      	b.n	800211a <HAL_ADC_ConfigChannel+0x6ee>
 8002106:	bf00      	nop
 8002108:	407f0000 	.word	0x407f0000
 800210c:	80080000 	.word	0x80080000
 8002110:	50000100 	.word	0x50000100
 8002114:	50000300 	.word	0x50000300
 8002118:	4b51      	ldr	r3, [pc, #324]	@ (8002260 <HAL_ADC_ConfigChannel+0x834>)
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f802 	bl	8001124 <LL_ADC_GetCommonPathInternalCh>
 8002120:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a4e      	ldr	r2, [pc, #312]	@ (8002264 <HAL_ADC_ConfigChannel+0x838>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d004      	beq.n	8002138 <HAL_ADC_ConfigChannel+0x70c>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a4d      	ldr	r2, [pc, #308]	@ (8002268 <HAL_ADC_ConfigChannel+0x83c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d134      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800213c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d12e      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800214c:	d17e      	bne.n	800224c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002156:	d004      	beq.n	8002162 <HAL_ADC_ConfigChannel+0x736>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a43      	ldr	r2, [pc, #268]	@ (800226c <HAL_ADC_ConfigChannel+0x840>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x73a>
 8002162:	4a43      	ldr	r2, [pc, #268]	@ (8002270 <HAL_ADC_ConfigChannel+0x844>)
 8002164:	e000      	b.n	8002168 <HAL_ADC_ConfigChannel+0x73c>
 8002166:	4a3e      	ldr	r2, [pc, #248]	@ (8002260 <HAL_ADC_ConfigChannel+0x834>)
 8002168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800216c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f7fe ffc3 	bl	80010fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002178:	4b3e      	ldr	r3, [pc, #248]	@ (8002274 <HAL_ADC_ConfigChannel+0x848>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	4a3e      	ldr	r2, [pc, #248]	@ (8002278 <HAL_ADC_ConfigChannel+0x84c>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002192:	e002      	b.n	800219a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3b01      	subs	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f9      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021a0:	e054      	b.n	800224c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a35      	ldr	r2, [pc, #212]	@ (800227c <HAL_ADC_ConfigChannel+0x850>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d120      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d11a      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021c0:	d144      	bne.n	800224c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021ca:	d004      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x7aa>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a26      	ldr	r2, [pc, #152]	@ (800226c <HAL_ADC_ConfigChannel+0x840>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x7ae>
 80021d6:	4a26      	ldr	r2, [pc, #152]	@ (8002270 <HAL_ADC_ConfigChannel+0x844>)
 80021d8:	e000      	b.n	80021dc <HAL_ADC_ConfigChannel+0x7b0>
 80021da:	4a21      	ldr	r2, [pc, #132]	@ (8002260 <HAL_ADC_ConfigChannel+0x834>)
 80021dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7fe ff89 	bl	80010fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021ec:	e02e      	b.n	800224c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a23      	ldr	r2, [pc, #140]	@ (8002280 <HAL_ADC_ConfigChannel+0x854>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d129      	bne.n	800224c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d123      	bne.n	800224c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a18      	ldr	r2, [pc, #96]	@ (800226c <HAL_ADC_ConfigChannel+0x840>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01e      	beq.n	800224c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002216:	d004      	beq.n	8002222 <HAL_ADC_ConfigChannel+0x7f6>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a13      	ldr	r2, [pc, #76]	@ (800226c <HAL_ADC_ConfigChannel+0x840>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x7fa>
 8002222:	4a13      	ldr	r2, [pc, #76]	@ (8002270 <HAL_ADC_ConfigChannel+0x844>)
 8002224:	e000      	b.n	8002228 <HAL_ADC_ConfigChannel+0x7fc>
 8002226:	4a0e      	ldr	r2, [pc, #56]	@ (8002260 <HAL_ADC_ConfigChannel+0x834>)
 8002228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800222c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f7fe ff63 	bl	80010fe <LL_ADC_SetCommonPathInternalCh>
 8002238:	e008      	b.n	800224c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223e:	f043 0220 	orr.w	r2, r3, #32
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002254:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002258:	4618      	mov	r0, r3
 800225a:	37d8      	adds	r7, #216	@ 0xd8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	50000700 	.word	0x50000700
 8002264:	c3210000 	.word	0xc3210000
 8002268:	90c00010 	.word	0x90c00010
 800226c:	50000100 	.word	0x50000100
 8002270:	50000300 	.word	0x50000300
 8002274:	20000000 	.word	0x20000000
 8002278:	053e2d63 	.word	0x053e2d63
 800227c:	c7520000 	.word	0xc7520000
 8002280:	cb840000 	.word	0xcb840000

08002284 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff f8ef 	bl	8001478 <LL_ADC_IsEnabled>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d176      	bne.n	800238e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002398 <ADC_Enable+0x114>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00d      	beq.n	80022ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e062      	b.n	8002390 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f8be 	bl	8001450 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022dc:	d004      	beq.n	80022e8 <ADC_Enable+0x64>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2e      	ldr	r2, [pc, #184]	@ (800239c <ADC_Enable+0x118>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <ADC_Enable+0x68>
 80022e8:	4b2d      	ldr	r3, [pc, #180]	@ (80023a0 <ADC_Enable+0x11c>)
 80022ea:	e000      	b.n	80022ee <ADC_Enable+0x6a>
 80022ec:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <ADC_Enable+0x120>)
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe ff18 	bl	8001124 <LL_ADC_GetCommonPathInternalCh>
 80022f4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80022f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d013      	beq.n	8002326 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022fe:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <ADC_Enable+0x124>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	4a29      	ldr	r2, [pc, #164]	@ (80023ac <ADC_Enable+0x128>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002318:	e002      	b.n	8002320 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3b01      	subs	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f9      	bne.n	800231a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002326:	f7fe fecb 	bl	80010c0 <HAL_GetTick>
 800232a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800232c:	e028      	b.n	8002380 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff f8a0 	bl	8001478 <LL_ADC_IsEnabled>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f884 	bl	8001450 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002348:	f7fe feba 	bl	80010c0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d914      	bls.n	8002380 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d00d      	beq.n	8002380 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002368:	f043 0210 	orr.w	r2, r3, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e007      	b.n	8002390 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d1cf      	bne.n	800232e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	8000003f 	.word	0x8000003f
 800239c:	50000100 	.word	0x50000100
 80023a0:	50000300 	.word	0x50000300
 80023a4:	50000700 	.word	0x50000700
 80023a8:	20000000 	.word	0x20000000
 80023ac:	053e2d63 	.word	0x053e2d63

080023b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d14b      	bne.n	8002462 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d021      	beq.n	8002428 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ff47 	bl	800127c <LL_ADC_REG_IsTriggerSourceSWStart>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d032      	beq.n	800245a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d12b      	bne.n	800245a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002406:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11f      	bne.n	800245a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002426:	e018      	b.n	800245a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d111      	bne.n	800245a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7fe fb72 	bl	8000b44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002460:	e00e      	b.n	8002480 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f7ff fad2 	bl	8001a18 <HAL_ADC_ErrorCallback>
}
 8002474:	e004      	b.n	8002480 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff fab4 	bl	8001a04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c2:	f043 0204 	orr.w	r2, r3, #4
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f7ff faa4 	bl	8001a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <__NVIC_SetPriorityGrouping+0x44>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002500:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250a:	4a04      	ldr	r2, [pc, #16]	@ (800251c <__NVIC_SetPriorityGrouping+0x44>)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4907      	ldr	r1, [pc, #28]	@ (8002574 <__NVIC_EnableIRQ+0x38>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	@ (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	@ (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	@ 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
         );
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	@ 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002644:	d301      	bcc.n	800264a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264a:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <SysTick_Config+0x40>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002652:	210f      	movs	r1, #15
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f7ff ff8e 	bl	8002578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <SysTick_Config+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002662:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <SysTick_Config+0x40>)
 8002664:	2207      	movs	r2, #7
 8002666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff29 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff40 	bl	8002520 <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff90 	bl	80025cc <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5f 	bl	8002578 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff33 	bl	800253c <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa4 	bl	8002634 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e08d      	b.n	8002826 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	4b47      	ldr	r3, [pc, #284]	@ (8002830 <HAL_DMA_Init+0x138>)
 8002712:	429a      	cmp	r2, r3
 8002714:	d80f      	bhi.n	8002736 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4b45      	ldr	r3, [pc, #276]	@ (8002834 <HAL_DMA_Init+0x13c>)
 800271e:	4413      	add	r3, r2
 8002720:	4a45      	ldr	r2, [pc, #276]	@ (8002838 <HAL_DMA_Init+0x140>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	009a      	lsls	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a42      	ldr	r2, [pc, #264]	@ (800283c <HAL_DMA_Init+0x144>)
 8002732:	641a      	str	r2, [r3, #64]	@ 0x40
 8002734:	e00e      	b.n	8002754 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	4b40      	ldr	r3, [pc, #256]	@ (8002840 <HAL_DMA_Init+0x148>)
 800273e:	4413      	add	r3, r2
 8002740:	4a3d      	ldr	r2, [pc, #244]	@ (8002838 <HAL_DMA_Init+0x140>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	009a      	lsls	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a3c      	ldr	r2, [pc, #240]	@ (8002844 <HAL_DMA_Init+0x14c>)
 8002752:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800276a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800276e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f9b6 	bl	8002b18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027b4:	d102      	bne.n	80027bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027d0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d010      	beq.n	80027fc <HAL_DMA_Init+0x104>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d80c      	bhi.n	80027fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f9d6 	bl	8002b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e008      	b.n	800280e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40020407 	.word	0x40020407
 8002834:	bffdfff8 	.word	0xbffdfff8
 8002838:	cccccccd 	.word	0xcccccccd
 800283c:	40020000 	.word	0x40020000
 8002840:	bffdfbf8 	.word	0xbffdfbf8
 8002844:	40020400 	.word	0x40020400

08002848 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_DMA_Start_IT+0x20>
 8002864:	2302      	movs	r3, #2
 8002866:	e066      	b.n	8002936 <HAL_DMA_Start_IT+0xee>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d155      	bne.n	8002928 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f8fb 	bl	8002a9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 020e 	orr.w	r2, r2, #14
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e00f      	b.n	80028e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0204 	bic.w	r2, r2, #4
 80028ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 020a 	orr.w	r2, r2, #10
 80028de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002914:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e005      	b.n	8002934 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002930:	2302      	movs	r3, #2
 8002932:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002934:	7dfb      	ldrb	r3, [r7, #23]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2204      	movs	r2, #4
 8002960:	409a      	lsls	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d026      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x7a>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d021      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d107      	bne.n	8002992 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0204 	bic.w	r2, r2, #4
 8002990:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	f003 021f 	and.w	r2, r3, #31
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	2104      	movs	r1, #4
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d071      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029b6:	e06c      	b.n	8002a92 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2202      	movs	r2, #2
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02e      	beq.n	8002a2a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d029      	beq.n	8002a2a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 020a 	bic.w	r2, r2, #10
 80029f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	2102      	movs	r1, #2
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d038      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a28:	e033      	b.n	8002a92 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2208      	movs	r2, #8
 8002a34:	409a      	lsls	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d02a      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d025      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 020e 	bic.w	r2, r2, #14
 8002a56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5c:	f003 021f 	and.w	r2, r3, #31
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
}
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ab2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ac4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f003 021f 	and.w	r2, r3, #31
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d108      	bne.n	8002afc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002afa:	e007      	b.n	8002b0c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d802      	bhi.n	8002b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e001      	b.n	8002b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b34:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	3b08      	subs	r3, #8
 8002b42:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	009a      	lsls	r2, r3, #2
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a0b      	ldr	r2, [pc, #44]	@ (8002b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002b62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40020407 	.word	0x40020407
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020820 	.word	0x40020820
 8002b8c:	cccccccd 	.word	0xcccccccd
 8002b90:	40020880 	.word	0x40020880

08002b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	461a      	mov	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a08      	ldr	r2, [pc, #32]	@ (8002bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002bb6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	1000823f 	.word	0x1000823f
 8002bd8:	40020940 	.word	0x40020940

08002bdc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e147      	b.n	8002e7e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fe f930 	bl	8000e68 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0210 	bic.w	r2, r2, #16
 8002c16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c18:	f7fe fa52 	bl	80010c0 <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c1e:	e012      	b.n	8002c46 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c20:	f7fe fa4e 	bl	80010c0 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b0a      	cmp	r3, #10
 8002c2c:	d90b      	bls.n	8002c46 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e11b      	b.n	8002e7e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d0e5      	beq.n	8002c20 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c64:	f7fe fa2c 	bl	80010c0 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002c6a:	e012      	b.n	8002c92 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c6c:	f7fe fa28 	bl	80010c0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b0a      	cmp	r3, #10
 8002c78:	d90b      	bls.n	8002c92 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2203      	movs	r2, #3
 8002c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0f5      	b.n	8002e7e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0e5      	beq.n	8002c6c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0202 	orr.w	r2, r2, #2
 8002cae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a74      	ldr	r2, [pc, #464]	@ (8002e88 <HAL_FDCAN_Init+0x2ac>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d103      	bne.n	8002cc2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002cba:	4a74      	ldr	r2, [pc, #464]	@ (8002e8c <HAL_FDCAN_Init+0x2b0>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7c1b      	ldrb	r3, [r3, #16]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d108      	bne.n	8002cdc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cd8:	619a      	str	r2, [r3, #24]
 8002cda:	e007      	b.n	8002cec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7c5b      	ldrb	r3, [r3, #17]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d108      	bne.n	8002d06 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d02:	619a      	str	r2, [r3, #24]
 8002d04:	e007      	b.n	8002d16 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d14:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	7c9b      	ldrb	r3, [r3, #18]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d108      	bne.n	8002d30 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d2c:	619a      	str	r2, [r3, #24]
 8002d2e:	e007      	b.n	8002d40 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d3e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002d64:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0210 	bic.w	r2, r2, #16
 8002d74:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d108      	bne.n	8002d90 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0204 	orr.w	r2, r2, #4
 8002d8c:	619a      	str	r2, [r3, #24]
 8002d8e:	e02c      	b.n	8002dea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d028      	beq.n	8002dea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d01c      	beq.n	8002dda <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002dae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0210 	orr.w	r2, r2, #16
 8002dbe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d110      	bne.n	8002dea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0220 	orr.w	r2, r2, #32
 8002dd6:	619a      	str	r2, [r3, #24]
 8002dd8:	e007      	b.n	8002dea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0220 	orr.w	r2, r2, #32
 8002de8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002dfa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e02:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e12:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e14:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e1e:	d115      	bne.n	8002e4c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e24:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002e2e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	3b01      	subs	r3, #1
 8002e36:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002e38:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	3b01      	subs	r3, #1
 8002e42:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002e48:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002e4a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f966 	bl	8003134 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40006400 	.word	0x40006400
 8002e8c:	40006500 	.word	0x40006500

08002e90 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d110      	bne.n	8002ec6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e006      	b.n	8002ed4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eca:	f043 0204 	orr.w	r2, r3, #4
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d12c      	bne.n	8002f52 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e023      	b.n	8002f60 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f962 	bl	80031f8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002f44:	2201      	movs	r2, #1
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e006      	b.n	8002f60 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f56:	f043 0208 	orr.w	r2, r3, #8
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f7a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d003      	beq.n	8002f8a <HAL_FDCAN_ActivateNotification+0x22>
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	f040 80c8 	bne.w	800311a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d03b      	beq.n	800301e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d031      	beq.n	800301e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d027      	beq.n	800301e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01d      	beq.n	800301e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d013      	beq.n	800301e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00c      	beq.n	800302e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d107      	bne.n	800302e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	2b00      	cmp	r3, #0
 8003036:	d004      	beq.n	8003042 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d13b      	bne.n	80030ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d131      	bne.n	80030ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d127      	bne.n	80030ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d11d      	bne.n	80030ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	d113      	bne.n	80030ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003098:	2b00      	cmp	r3, #0
 800309a:	d004      	beq.n	80030a6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00c      	beq.n	80030ca <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0202 	orr.w	r2, r2, #2
 80030c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	430a      	orrs	r2, r1
 8003102:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	430a      	orrs	r2, r1
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e006      	b.n	8003128 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311e:	f043 0202 	orr.w	r2, r3, #2
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800313c:	4b2c      	ldr	r3, [pc, #176]	@ (80031f0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800313e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2b      	ldr	r2, [pc, #172]	@ (80031f4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d103      	bne.n	8003152 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003150:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003160:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003168:	041a      	lsls	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003186:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	061a      	lsls	r2, r3, #24
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e005      	b.n	80031d4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3304      	adds	r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d3f3      	bcc.n	80031c8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	4000a400 	.word	0x4000a400
 80031f4:	40006800 	.word	0x40006800

080031f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	@ 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003216:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800321e:	4313      	orrs	r3, r2
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	e00a      	b.n	800323a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800322c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003232:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003234:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003238:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003244:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800324a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003250:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	3304      	adds	r3, #4
 8003278:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	3304      	adds	r3, #4
 8003284:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e020      	b.n	80032ce <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	3303      	adds	r3, #3
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	3302      	adds	r3, #2
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	440b      	add	r3, r1
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80032a4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3301      	adds	r3, #1
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	440b      	add	r3, r1
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80032b2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	440a      	add	r2, r1
 80032ba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80032bc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	3304      	adds	r3, #4
 80032c6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3304      	adds	r3, #4
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4a06      	ldr	r2, [pc, #24]	@ (80032ec <FDCAN_CopyMessageToRAM+0xf4>)
 80032d4:	5cd3      	ldrb	r3, [r2, r3]
 80032d6:	461a      	mov	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4293      	cmp	r3, r2
 80032dc:	d3d6      	bcc.n	800328c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	3724      	adds	r7, #36	@ 0x24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	0800747c 	.word	0x0800747c

080032f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032fe:	e15a      	b.n	80035b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2101      	movs	r1, #1
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	4013      	ands	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 814c 	beq.w	80035b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d005      	beq.n	8003330 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800332c:	2b02      	cmp	r3, #2
 800332e:	d130      	bne.n	8003392 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003366:	2201      	movs	r2, #1
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 0201 	and.w	r2, r3, #1
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b03      	cmp	r3, #3
 800339c:	d017      	beq.n	80033ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d123      	bne.n	8003422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	08da      	lsrs	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3208      	adds	r2, #8
 80033e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	220f      	movs	r2, #15
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	08da      	lsrs	r2, r3, #3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3208      	adds	r2, #8
 800341c:	6939      	ldr	r1, [r7, #16]
 800341e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2203      	movs	r2, #3
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0203 	and.w	r2, r3, #3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80a6 	beq.w	80035b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003464:	4b5b      	ldr	r3, [pc, #364]	@ (80035d4 <HAL_GPIO_Init+0x2e4>)
 8003466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003468:	4a5a      	ldr	r2, [pc, #360]	@ (80035d4 <HAL_GPIO_Init+0x2e4>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003470:	4b58      	ldr	r3, [pc, #352]	@ (80035d4 <HAL_GPIO_Init+0x2e4>)
 8003472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800347c:	4a56      	ldr	r2, [pc, #344]	@ (80035d8 <HAL_GPIO_Init+0x2e8>)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	3302      	adds	r3, #2
 8003484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	220f      	movs	r2, #15
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034a6:	d01f      	beq.n	80034e8 <HAL_GPIO_Init+0x1f8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a4c      	ldr	r2, [pc, #304]	@ (80035dc <HAL_GPIO_Init+0x2ec>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d019      	beq.n	80034e4 <HAL_GPIO_Init+0x1f4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a4b      	ldr	r2, [pc, #300]	@ (80035e0 <HAL_GPIO_Init+0x2f0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <HAL_GPIO_Init+0x1f0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a4a      	ldr	r2, [pc, #296]	@ (80035e4 <HAL_GPIO_Init+0x2f4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00d      	beq.n	80034dc <HAL_GPIO_Init+0x1ec>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a49      	ldr	r2, [pc, #292]	@ (80035e8 <HAL_GPIO_Init+0x2f8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <HAL_GPIO_Init+0x1e8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a48      	ldr	r2, [pc, #288]	@ (80035ec <HAL_GPIO_Init+0x2fc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_GPIO_Init+0x1e4>
 80034d0:	2305      	movs	r3, #5
 80034d2:	e00a      	b.n	80034ea <HAL_GPIO_Init+0x1fa>
 80034d4:	2306      	movs	r3, #6
 80034d6:	e008      	b.n	80034ea <HAL_GPIO_Init+0x1fa>
 80034d8:	2304      	movs	r3, #4
 80034da:	e006      	b.n	80034ea <HAL_GPIO_Init+0x1fa>
 80034dc:	2303      	movs	r3, #3
 80034de:	e004      	b.n	80034ea <HAL_GPIO_Init+0x1fa>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e002      	b.n	80034ea <HAL_GPIO_Init+0x1fa>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_GPIO_Init+0x1fa>
 80034e8:	2300      	movs	r3, #0
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	f002 0203 	and.w	r2, r2, #3
 80034f0:	0092      	lsls	r2, r2, #2
 80034f2:	4093      	lsls	r3, r2
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034fa:	4937      	ldr	r1, [pc, #220]	@ (80035d8 <HAL_GPIO_Init+0x2e8>)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003508:	4b39      	ldr	r3, [pc, #228]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	43db      	mvns	r3, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800352c:	4a30      	ldr	r2, [pc, #192]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003532:	4b2f      	ldr	r3, [pc, #188]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003556:	4a26      	ldr	r2, [pc, #152]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800355c:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	43db      	mvns	r3, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003580:	4a1b      	ldr	r2, [pc, #108]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003586:	4b1a      	ldr	r3, [pc, #104]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035aa:	4a11      	ldr	r2, [pc, #68]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3301      	adds	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f47f ae9d 	bne.w	8003300 <HAL_GPIO_Init+0x10>
  }
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40010000 	.word	0x40010000
 80035dc:	48000400 	.word	0x48000400
 80035e0:	48000800 	.word	0x48000800
 80035e4:	48000c00 	.word	0x48000c00
 80035e8:	48001000 	.word	0x48001000
 80035ec:	48001400 	.word	0x48001400
 80035f0:	40010400 	.word	0x40010400

080035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
 8003600:	4613      	mov	r3, r2
 8003602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003610:	e002      	b.n	8003618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	041a      	lsls	r2, r3, #16
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	43d9      	mvns	r1, r3
 8003642:	887b      	ldrh	r3, [r7, #2]
 8003644:	400b      	ands	r3, r1
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	619a      	str	r2, [r3, #24]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d141      	bne.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003666:	4b4b      	ldr	r3, [pc, #300]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003672:	d131      	bne.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003674:	4b47      	ldr	r3, [pc, #284]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800367a:	4a46      	ldr	r2, [pc, #280]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003680:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003684:	4b43      	ldr	r3, [pc, #268]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800368c:	4a41      	ldr	r2, [pc, #260]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003694:	4b40      	ldr	r3, [pc, #256]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2232      	movs	r2, #50	@ 0x32
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	4a3f      	ldr	r2, [pc, #252]	@ (800379c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	0c9b      	lsrs	r3, r3, #18
 80036a6:	3301      	adds	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036aa:	e002      	b.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b2:	4b38      	ldr	r3, [pc, #224]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036be:	d102      	bne.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f2      	bne.n	80036ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036c6:	4b33      	ldr	r3, [pc, #204]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d2:	d158      	bne.n	8003786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e057      	b.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036de:	4a2d      	ldr	r2, [pc, #180]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036e8:	e04d      	b.n	8003786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f0:	d141      	bne.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036f2:	4b28      	ldr	r3, [pc, #160]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fe:	d131      	bne.n	8003764 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003700:	4b24      	ldr	r3, [pc, #144]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003706:	4a23      	ldr	r2, [pc, #140]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003710:	4b20      	ldr	r3, [pc, #128]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003718:	4a1e      	ldr	r2, [pc, #120]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800371e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003720:	4b1d      	ldr	r3, [pc, #116]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2232      	movs	r2, #50	@ 0x32
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	4a1c      	ldr	r2, [pc, #112]	@ (800379c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800372c:	fba2 2303 	umull	r2, r3, r2, r3
 8003730:	0c9b      	lsrs	r3, r3, #18
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003736:	e002      	b.n	800373e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3b01      	subs	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800373e:	4b15      	ldr	r3, [pc, #84]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374a:	d102      	bne.n	8003752 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f2      	bne.n	8003738 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003752:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375e:	d112      	bne.n	8003786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e011      	b.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003764:	4b0b      	ldr	r3, [pc, #44]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800376a:	4a0a      	ldr	r2, [pc, #40]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003770:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003774:	e007      	b.n	8003786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003776:	4b07      	ldr	r3, [pc, #28]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800377e:	4a05      	ldr	r2, [pc, #20]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003780:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003784:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40007000 	.word	0x40007000
 8003798:	20000000 	.word	0x20000000
 800379c:	431bde83 	.word	0x431bde83

080037a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037ae:	6093      	str	r3, [r2, #8]
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40007000 	.word	0x40007000

080037c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e2fe      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d075      	beq.n	80038ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037de:	4b97      	ldr	r3, [pc, #604]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e8:	4b94      	ldr	r3, [pc, #592]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d102      	bne.n	80037fe <HAL_RCC_OscConfig+0x3e>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d002      	beq.n	8003804 <HAL_RCC_OscConfig+0x44>
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d10b      	bne.n	800381c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	4b8d      	ldr	r3, [pc, #564]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d05b      	beq.n	80038c8 <HAL_RCC_OscConfig+0x108>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d157      	bne.n	80038c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e2d9      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003824:	d106      	bne.n	8003834 <HAL_RCC_OscConfig+0x74>
 8003826:	4b85      	ldr	r3, [pc, #532]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a84      	ldr	r2, [pc, #528]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e01d      	b.n	8003870 <HAL_RCC_OscConfig+0xb0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0x98>
 800383e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a7e      	ldr	r2, [pc, #504]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7b      	ldr	r2, [pc, #492]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e00b      	b.n	8003870 <HAL_RCC_OscConfig+0xb0>
 8003858:	4b78      	ldr	r3, [pc, #480]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a77      	ldr	r2, [pc, #476]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 800385e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b75      	ldr	r3, [pc, #468]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a74      	ldr	r2, [pc, #464]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 800386a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800386e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd fc22 	bl	80010c0 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003880:	f7fd fc1e 	bl	80010c0 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	@ 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e29e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003892:	4b6a      	ldr	r3, [pc, #424]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0xc0>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd fc0e 	bl	80010c0 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fd fc0a 	bl	80010c0 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	@ 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e28a      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ba:	4b60      	ldr	r3, [pc, #384]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0xe8>
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d075      	beq.n	80039c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d6:	4b59      	ldr	r3, [pc, #356]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e0:	4b56      	ldr	r3, [pc, #344]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	d102      	bne.n	80038f6 <HAL_RCC_OscConfig+0x136>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d002      	beq.n	80038fc <HAL_RCC_OscConfig+0x13c>
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d11f      	bne.n	800393c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038fc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_OscConfig+0x154>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e25d      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003914:	4b49      	ldr	r3, [pc, #292]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	4946      	ldr	r1, [pc, #280]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003928:	4b45      	ldr	r3, [pc, #276]	@ (8003a40 <HAL_RCC_OscConfig+0x280>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd fb7b 	bl	8001028 <HAL_InitTick>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d043      	beq.n	80039c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e249      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d023      	beq.n	800398c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003944:	4b3d      	ldr	r3, [pc, #244]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a3c      	ldr	r2, [pc, #240]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 800394a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800394e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fd fbb6 	bl	80010c0 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003958:	f7fd fbb2 	bl	80010c0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e232      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396a:	4b34      	ldr	r3, [pc, #208]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003976:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	061b      	lsls	r3, r3, #24
 8003984:	492d      	ldr	r1, [pc, #180]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
 800398a:	e01a      	b.n	80039c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2a      	ldr	r2, [pc, #168]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003992:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd fb92 	bl	80010c0 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a0:	f7fd fb8e 	bl	80010c0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e20e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039b2:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1e0>
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d041      	beq.n	8003a52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d6:	4b19      	ldr	r3, [pc, #100]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 80039d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039dc:	4a17      	ldr	r2, [pc, #92]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e6:	f7fd fb6b 	bl	80010c0 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ee:	f7fd fb67 	bl	80010c0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e1e7      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a00:	4b0e      	ldr	r3, [pc, #56]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ef      	beq.n	80039ee <HAL_RCC_OscConfig+0x22e>
 8003a0e:	e020      	b.n	8003a52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a10:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a16:	4a09      	ldr	r2, [pc, #36]	@ (8003a3c <HAL_RCC_OscConfig+0x27c>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd fb4e 	bl	80010c0 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a26:	e00d      	b.n	8003a44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a28:	f7fd fb4a 	bl	80010c0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d906      	bls.n	8003a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e1ca      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a44:	4b8c      	ldr	r3, [pc, #560]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1ea      	bne.n	8003a28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80a6 	beq.w	8003bac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a64:	4b84      	ldr	r3, [pc, #528]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_OscConfig+0x2b4>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x2b6>
 8003a74:	2300      	movs	r3, #0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a86:	4b7c      	ldr	r3, [pc, #496]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a92:	2301      	movs	r3, #1
 8003a94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a96:	4b79      	ldr	r3, [pc, #484]	@ (8003c7c <HAL_RCC_OscConfig+0x4bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d118      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa2:	4b76      	ldr	r3, [pc, #472]	@ (8003c7c <HAL_RCC_OscConfig+0x4bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a75      	ldr	r2, [pc, #468]	@ (8003c7c <HAL_RCC_OscConfig+0x4bc>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aae:	f7fd fb07 	bl	80010c0 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab6:	f7fd fb03 	bl	80010c0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e183      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c7c <HAL_RCC_OscConfig+0x4bc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d108      	bne.n	8003aee <HAL_RCC_OscConfig+0x32e>
 8003adc:	4b66      	ldr	r3, [pc, #408]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae2:	4a65      	ldr	r2, [pc, #404]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003aec:	e024      	b.n	8003b38 <HAL_RCC_OscConfig+0x378>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d110      	bne.n	8003b18 <HAL_RCC_OscConfig+0x358>
 8003af6:	4b60      	ldr	r3, [pc, #384]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afc:	4a5e      	ldr	r2, [pc, #376]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b06:	4b5c      	ldr	r3, [pc, #368]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b16:	e00f      	b.n	8003b38 <HAL_RCC_OscConfig+0x378>
 8003b18:	4b57      	ldr	r3, [pc, #348]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1e:	4a56      	ldr	r2, [pc, #344]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b28:	4b53      	ldr	r3, [pc, #332]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2e:	4a52      	ldr	r2, [pc, #328]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003b30:	f023 0304 	bic.w	r3, r3, #4
 8003b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d016      	beq.n	8003b6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd fabe 	bl	80010c0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fd faba 	bl	80010c0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e138      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5e:	4b46      	ldr	r3, [pc, #280]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ed      	beq.n	8003b48 <HAL_RCC_OscConfig+0x388>
 8003b6c:	e015      	b.n	8003b9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fd faa7 	bl	80010c0 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fd faa3 	bl	80010c0 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e121      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1ed      	bne.n	8003b76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b9a:	7ffb      	ldrb	r3, [r7, #31]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d105      	bne.n	8003bac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba0:	4b35      	ldr	r3, [pc, #212]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba4:	4a34      	ldr	r2, [pc, #208]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003ba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003baa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03c      	beq.n	8003c32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fd fa76 	bl	80010c0 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd8:	f7fd fa72 	bl	80010c0 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e0f2      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bea:	4b23      	ldr	r3, [pc, #140]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ef      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x418>
 8003bf8:	e01b      	b.n	8003c32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c00:	4a1d      	ldr	r2, [pc, #116]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fa59 	bl	80010c0 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c12:	f7fd fa55 	bl	80010c0 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0d5      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c24:	4b14      	ldr	r3, [pc, #80]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1ef      	bne.n	8003c12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80c9 	beq.w	8003dce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	f000 8083 	beq.w	8003d50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d15e      	bne.n	8003d10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a08      	ldr	r2, [pc, #32]	@ (8003c78 <HAL_RCC_OscConfig+0x4b8>)
 8003c58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fa2f 	bl	80010c0 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c64:	e00c      	b.n	8003c80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fd fa2b 	bl	80010c0 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d905      	bls.n	8003c80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e0ab      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c80:	4b55      	ldr	r3, [pc, #340]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ec      	bne.n	8003c66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8c:	4b52      	ldr	r3, [pc, #328]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	4b52      	ldr	r3, [pc, #328]	@ (8003ddc <HAL_RCC_OscConfig+0x61c>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6a11      	ldr	r1, [r2, #32]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c9c:	3a01      	subs	r2, #1
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	4311      	orrs	r1, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003ca6:	0212      	lsls	r2, r2, #8
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cae:	0852      	lsrs	r2, r2, #1
 8003cb0:	3a01      	subs	r2, #1
 8003cb2:	0552      	lsls	r2, r2, #21
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cba:	0852      	lsrs	r2, r2, #1
 8003cbc:	3a01      	subs	r2, #1
 8003cbe:	0652      	lsls	r2, r2, #25
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cc6:	06d2      	lsls	r2, r2, #27
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	4943      	ldr	r1, [pc, #268]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd0:	4b41      	ldr	r3, [pc, #260]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a40      	ldr	r2, [pc, #256]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a3d      	ldr	r2, [pc, #244]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd f9ea 	bl	80010c0 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fd f9e6 	bl	80010c0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e066      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d02:	4b35      	ldr	r3, [pc, #212]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x530>
 8003d0e:	e05e      	b.n	8003dce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d10:	4b31      	ldr	r3, [pc, #196]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a30      	ldr	r2, [pc, #192]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003d16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fd f9d0 	bl	80010c0 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fd f9cc 	bl	80010c0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e04c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d36:	4b28      	ldr	r3, [pc, #160]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d42:	4b25      	ldr	r3, [pc, #148]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	4924      	ldr	r1, [pc, #144]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003d48:	4b25      	ldr	r3, [pc, #148]	@ (8003de0 <HAL_RCC_OscConfig+0x620>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	60cb      	str	r3, [r1, #12]
 8003d4e:	e03e      	b.n	8003dce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e039      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd8 <HAL_RCC_OscConfig+0x618>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 0203 	and.w	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d12c      	bne.n	8003dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d123      	bne.n	8003dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d11b      	bne.n	8003dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d113      	bne.n	8003dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	019f800c 	.word	0x019f800c
 8003de0:	feeefffc 	.word	0xfeeefffc

08003de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e11e      	b.n	800403a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b91      	ldr	r3, [pc, #580]	@ (8004044 <HAL_RCC_ClockConfig+0x260>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d910      	bls.n	8003e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b8e      	ldr	r3, [pc, #568]	@ (8004044 <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 020f 	bic.w	r2, r3, #15
 8003e12:	498c      	ldr	r1, [pc, #560]	@ (8004044 <HAL_RCC_ClockConfig+0x260>)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1a:	4b8a      	ldr	r3, [pc, #552]	@ (8004044 <HAL_RCC_ClockConfig+0x260>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e106      	b.n	800403a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d073      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d129      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e40:	4b81      	ldr	r3, [pc, #516]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0f4      	b.n	800403a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e50:	f000 f966 	bl	8004120 <RCC_GetSysClockFreqFromPLLSource>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4a7c      	ldr	r2, [pc, #496]	@ (800404c <HAL_RCC_ClockConfig+0x268>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d93f      	bls.n	8003ede <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e5e:	4b7a      	ldr	r3, [pc, #488]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d033      	beq.n	8003ede <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d12f      	bne.n	8003ede <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e7e:	4b72      	ldr	r3, [pc, #456]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e86:	4a70      	ldr	r2, [pc, #448]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e8e:	2380      	movs	r3, #128	@ 0x80
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e024      	b.n	8003ede <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0c6      	b.n	800403a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eac:	4b66      	ldr	r3, [pc, #408]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0be      	b.n	800403a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ebc:	f000 f8ce 	bl	800405c <HAL_RCC_GetSysClockFreq>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4a61      	ldr	r2, [pc, #388]	@ (800404c <HAL_RCC_ClockConfig+0x268>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d909      	bls.n	8003ede <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eca:	4b5f      	ldr	r3, [pc, #380]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ed2:	4a5d      	ldr	r2, [pc, #372]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ed8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003eda:	2380      	movs	r3, #128	@ 0x80
 8003edc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4b5a      	ldr	r3, [pc, #360]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4957      	ldr	r1, [pc, #348]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef0:	f7fd f8e6 	bl	80010c0 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef8:	f7fd f8e2 	bl	80010c0 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e095      	b.n	800403a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 020c 	and.w	r2, r3, #12
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1eb      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d023      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f38:	4b43      	ldr	r3, [pc, #268]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a42      	ldr	r2, [pc, #264]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003f3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f50:	4b3d      	ldr	r3, [pc, #244]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f58:	4a3b      	ldr	r2, [pc, #236]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003f5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f60:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4936      	ldr	r1, [pc, #216]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b80      	cmp	r3, #128	@ 0x80
 8003f78:	d105      	bne.n	8003f86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f7a:	4b33      	ldr	r3, [pc, #204]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	4a32      	ldr	r2, [pc, #200]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003f80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f86:	4b2f      	ldr	r3, [pc, #188]	@ (8004044 <HAL_RCC_ClockConfig+0x260>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d21d      	bcs.n	8003fd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f94:	4b2b      	ldr	r3, [pc, #172]	@ (8004044 <HAL_RCC_ClockConfig+0x260>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f023 020f 	bic.w	r2, r3, #15
 8003f9c:	4929      	ldr	r1, [pc, #164]	@ (8004044 <HAL_RCC_ClockConfig+0x260>)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fa4:	f7fd f88c 	bl	80010c0 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fac:	f7fd f888 	bl	80010c0 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e03b      	b.n	800403a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b20      	ldr	r3, [pc, #128]	@ (8004044 <HAL_RCC_ClockConfig+0x260>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d1ed      	bne.n	8003fac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4917      	ldr	r1, [pc, #92]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ffa:	4b13      	ldr	r3, [pc, #76]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	490f      	ldr	r1, [pc, #60]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800400e:	f000 f825 	bl	800405c <HAL_RCC_GetSysClockFreq>
 8004012:	4602      	mov	r2, r0
 8004014:	4b0c      	ldr	r3, [pc, #48]	@ (8004048 <HAL_RCC_ClockConfig+0x264>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	490c      	ldr	r1, [pc, #48]	@ (8004050 <HAL_RCC_ClockConfig+0x26c>)
 8004020:	5ccb      	ldrb	r3, [r1, r3]
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	4a0a      	ldr	r2, [pc, #40]	@ (8004054 <HAL_RCC_ClockConfig+0x270>)
 800402c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800402e:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <HAL_RCC_ClockConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fc fff8 	bl	8001028 <HAL_InitTick>
 8004038:	4603      	mov	r3, r0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40022000 	.word	0x40022000
 8004048:	40021000 	.word	0x40021000
 800404c:	04c4b400 	.word	0x04c4b400
 8004050:	0800746c 	.word	0x0800746c
 8004054:	20000000 	.word	0x20000000
 8004058:	20000004 	.word	0x20000004

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004062:	4b2c      	ldr	r3, [pc, #176]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b04      	cmp	r3, #4
 800406c:	d102      	bne.n	8004074 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800406e:	4b2a      	ldr	r3, [pc, #168]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	e047      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004074:	4b27      	ldr	r3, [pc, #156]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d102      	bne.n	8004086 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004080:	4b26      	ldr	r3, [pc, #152]	@ (800411c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	e03e      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004086:	4b23      	ldr	r3, [pc, #140]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b0c      	cmp	r3, #12
 8004090:	d136      	bne.n	8004100 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004092:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800409c:	4b1d      	ldr	r3, [pc, #116]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	3301      	adds	r3, #1
 80040a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d10c      	bne.n	80040ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b0:	4a1a      	ldr	r2, [pc, #104]	@ (800411c <HAL_RCC_GetSysClockFreq+0xc0>)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a16      	ldr	r2, [pc, #88]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ba:	68d2      	ldr	r2, [r2, #12]
 80040bc:	0a12      	lsrs	r2, r2, #8
 80040be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	617b      	str	r3, [r7, #20]
      break;
 80040c8:	e00c      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ca:	4a13      	ldr	r2, [pc, #76]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d2:	4a10      	ldr	r2, [pc, #64]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d4:	68d2      	ldr	r2, [r2, #12]
 80040d6:	0a12      	lsrs	r2, r2, #8
 80040d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]
      break;
 80040e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	0e5b      	lsrs	r3, r3, #25
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	3301      	adds	r3, #1
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	e001      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004104:	693b      	ldr	r3, [r7, #16]
}
 8004106:	4618      	mov	r0, r3
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	00f42400 	.word	0x00f42400
 800411c:	016e3600 	.word	0x016e3600

08004120 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004126:	4b1e      	ldr	r3, [pc, #120]	@ (80041a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004130:	4b1b      	ldr	r3, [pc, #108]	@ (80041a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	3301      	adds	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d10c      	bne.n	800415e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004144:	4a17      	ldr	r2, [pc, #92]	@ (80041a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	4a14      	ldr	r2, [pc, #80]	@ (80041a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800414e:	68d2      	ldr	r2, [r2, #12]
 8004150:	0a12      	lsrs	r2, r2, #8
 8004152:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	617b      	str	r3, [r7, #20]
    break;
 800415c:	e00c      	b.n	8004178 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800415e:	4a12      	ldr	r2, [pc, #72]	@ (80041a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	4a0e      	ldr	r2, [pc, #56]	@ (80041a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004168:	68d2      	ldr	r2, [r2, #12]
 800416a:	0a12      	lsrs	r2, r2, #8
 800416c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004170:	fb02 f303 	mul.w	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
    break;
 8004176:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004178:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	0e5b      	lsrs	r3, r3, #25
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	3301      	adds	r3, #1
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004192:	687b      	ldr	r3, [r7, #4]
}
 8004194:	4618      	mov	r0, r3
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40021000 	.word	0x40021000
 80041a4:	016e3600 	.word	0x016e3600
 80041a8:	00f42400 	.word	0x00f42400

080041ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041b4:	2300      	movs	r3, #0
 80041b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041b8:	2300      	movs	r3, #0
 80041ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8098 	beq.w	80042fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ce:	4b43      	ldr	r3, [pc, #268]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10d      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	4b40      	ldr	r3, [pc, #256]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041de:	4a3f      	ldr	r2, [pc, #252]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e6:	4b3d      	ldr	r3, [pc, #244]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f2:	2301      	movs	r3, #1
 80041f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041f6:	4b3a      	ldr	r3, [pc, #232]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a39      	ldr	r2, [pc, #228]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004200:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004202:	f7fc ff5d 	bl	80010c0 <HAL_GetTick>
 8004206:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004208:	e009      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fc ff59 	bl	80010c0 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d902      	bls.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	74fb      	strb	r3, [r7, #19]
        break;
 800421c:	e005      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800421e:	4b30      	ldr	r3, [pc, #192]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0ef      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800422a:	7cfb      	ldrb	r3, [r7, #19]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d159      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004230:	4b2a      	ldr	r3, [pc, #168]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01e      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	429a      	cmp	r2, r3
 800424a:	d019      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800424c:	4b23      	ldr	r3, [pc, #140]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004256:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004258:	4b20      	ldr	r3, [pc, #128]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425e:	4a1f      	ldr	r2, [pc, #124]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004268:	4b1c      	ldr	r3, [pc, #112]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426e:	4a1b      	ldr	r2, [pc, #108]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004278:	4a18      	ldr	r2, [pc, #96]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d016      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fc ff19 	bl	80010c0 <HAL_GetTick>
 800428e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004290:	e00b      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fc ff15 	bl	80010c0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d902      	bls.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	74fb      	strb	r3, [r7, #19]
            break;
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042aa:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ec      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042be:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042cc:	4903      	ldr	r1, [pc, #12]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042d4:	e008      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042d6:	7cfb      	ldrb	r3, [r7, #19]
 80042d8:	74bb      	strb	r3, [r7, #18]
 80042da:	e005      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e8:	7c7b      	ldrb	r3, [r7, #17]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4ba7      	ldr	r3, [pc, #668]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f2:	4aa6      	ldr	r2, [pc, #664]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004306:	4ba1      	ldr	r3, [pc, #644]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430c:	f023 0203 	bic.w	r2, r3, #3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	499d      	ldr	r1, [pc, #628]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004328:	4b98      	ldr	r3, [pc, #608]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432e:	f023 020c 	bic.w	r2, r3, #12
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4995      	ldr	r1, [pc, #596]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800434a:	4b90      	ldr	r3, [pc, #576]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004350:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	498c      	ldr	r1, [pc, #560]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800436c:	4b87      	ldr	r3, [pc, #540]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	4984      	ldr	r1, [pc, #528]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800438e:	4b7f      	ldr	r3, [pc, #508]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	497b      	ldr	r1, [pc, #492]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043b0:	4b76      	ldr	r3, [pc, #472]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	4973      	ldr	r1, [pc, #460]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d2:	4b6e      	ldr	r3, [pc, #440]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	496a      	ldr	r1, [pc, #424]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f4:	4b65      	ldr	r3, [pc, #404]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4962      	ldr	r1, [pc, #392]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004416:	4b5d      	ldr	r3, [pc, #372]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	4959      	ldr	r1, [pc, #356]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004438:	4b54      	ldr	r3, [pc, #336]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	4951      	ldr	r1, [pc, #324]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004456:	2b00      	cmp	r3, #0
 8004458:	d015      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445a:	4b4c      	ldr	r3, [pc, #304]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004460:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004468:	4948      	ldr	r1, [pc, #288]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004478:	d105      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800447a:	4b44      	ldr	r3, [pc, #272]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	4a43      	ldr	r2, [pc, #268]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004480:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004484:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800448e:	2b00      	cmp	r3, #0
 8004490:	d015      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004492:	4b3e      	ldr	r3, [pc, #248]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004498:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a0:	493a      	ldr	r1, [pc, #232]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044b0:	d105      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b2:	4b36      	ldr	r3, [pc, #216]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	4a35      	ldr	r2, [pc, #212]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044bc:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d015      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044ca:	4b30      	ldr	r3, [pc, #192]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d8:	492c      	ldr	r1, [pc, #176]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044e8:	d105      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ea:	4b28      	ldr	r3, [pc, #160]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	4a27      	ldr	r2, [pc, #156]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044f4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d015      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004502:	4b22      	ldr	r3, [pc, #136]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004508:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	491e      	ldr	r1, [pc, #120]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004520:	d105      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004522:	4b1a      	ldr	r3, [pc, #104]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	4a19      	ldr	r2, [pc, #100]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800452c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d015      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800453a:	4b14      	ldr	r3, [pc, #80]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	4910      	ldr	r1, [pc, #64]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004558:	d105      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800455a:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	4a0b      	ldr	r2, [pc, #44]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004560:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004564:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d018      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004572:	4b06      	ldr	r3, [pc, #24]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	4902      	ldr	r1, [pc, #8]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	e001      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800458c:	40021000 	.word	0x40021000
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004596:	d105      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004598:	4b21      	ldr	r3, [pc, #132]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a20      	ldr	r2, [pc, #128]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800459e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d015      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	4918      	ldr	r1, [pc, #96]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ce:	d105      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045d0:	4b13      	ldr	r3, [pc, #76]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80045d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80045e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80045ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f6:	490a      	ldr	r1, [pc, #40]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004602:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004606:	d105      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004608:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4a04      	ldr	r2, [pc, #16]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800460e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004612:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004614:	7cbb      	ldrb	r3, [r7, #18]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000

08004624 <__NVIC_SetPriority>:
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004634:	2b00      	cmp	r3, #0
 8004636:	db0a      	blt.n	800464e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	490c      	ldr	r1, [pc, #48]	@ (8004670 <__NVIC_SetPriority+0x4c>)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	0112      	lsls	r2, r2, #4
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	440b      	add	r3, r1
 8004648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800464c:	e00a      	b.n	8004664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	4908      	ldr	r1, [pc, #32]	@ (8004674 <__NVIC_SetPriority+0x50>)
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	3b04      	subs	r3, #4
 800465c:	0112      	lsls	r2, r2, #4
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	440b      	add	r3, r1
 8004662:	761a      	strb	r2, [r3, #24]
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	e000e100 	.word	0xe000e100
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800467c:	2100      	movs	r1, #0
 800467e:	f06f 0004 	mvn.w	r0, #4
 8004682:	f7ff ffcf 	bl	8004624 <__NVIC_SetPriority>
#endif
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004692:	f3ef 8305 	mrs	r3, IPSR
 8004696:	603b      	str	r3, [r7, #0]
  return(result);
 8004698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800469e:	f06f 0305 	mvn.w	r3, #5
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	e00c      	b.n	80046c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046a6:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <osKernelInitialize+0x44>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d105      	bne.n	80046ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046ae:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <osKernelInitialize+0x44>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	e002      	b.n	80046c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295
 80046be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046c0:	687b      	ldr	r3, [r7, #4]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	200004d8 	.word	0x200004d8

080046d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046da:	f3ef 8305 	mrs	r3, IPSR
 80046de:	603b      	str	r3, [r7, #0]
  return(result);
 80046e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80046e6:	f06f 0305 	mvn.w	r3, #5
 80046ea:	607b      	str	r3, [r7, #4]
 80046ec:	e010      	b.n	8004710 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046ee:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <osKernelStart+0x48>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d109      	bne.n	800470a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046f6:	f7ff ffbf 	bl	8004678 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046fa:	4b08      	ldr	r3, [pc, #32]	@ (800471c <osKernelStart+0x48>)
 80046fc:	2202      	movs	r2, #2
 80046fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004700:	f001 f87a 	bl	80057f8 <vTaskStartScheduler>
      stat = osOK;
 8004704:	2300      	movs	r3, #0
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	e002      	b.n	8004710 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004710:	687b      	ldr	r3, [r7, #4]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	200004d8 	.word	0x200004d8

08004720 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b08e      	sub	sp, #56	@ 0x38
 8004724:	af04      	add	r7, sp, #16
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004730:	f3ef 8305 	mrs	r3, IPSR
 8004734:	617b      	str	r3, [r7, #20]
  return(result);
 8004736:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004738:	2b00      	cmp	r3, #0
 800473a:	d17e      	bne.n	800483a <osThreadNew+0x11a>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d07b      	beq.n	800483a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004746:	2318      	movs	r3, #24
 8004748:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800474e:	f04f 33ff 	mov.w	r3, #4294967295
 8004752:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d045      	beq.n	80047e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <osThreadNew+0x48>
        name = attr->name;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <osThreadNew+0x6e>
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b38      	cmp	r3, #56	@ 0x38
 8004780:	d805      	bhi.n	800478e <osThreadNew+0x6e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <osThreadNew+0x72>
        return (NULL);
 800478e:	2300      	movs	r3, #0
 8004790:	e054      	b.n	800483c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00e      	beq.n	80047c8 <osThreadNew+0xa8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b5b      	cmp	r3, #91	@ 0x5b
 80047b0:	d90a      	bls.n	80047c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <osThreadNew+0xa8>
        mem = 1;
 80047c2:	2301      	movs	r3, #1
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e010      	b.n	80047ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10c      	bne.n	80047ea <osThreadNew+0xca>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d108      	bne.n	80047ea <osThreadNew+0xca>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <osThreadNew+0xca>
          mem = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	e001      	b.n	80047ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d110      	bne.n	8004812 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047f8:	9202      	str	r2, [sp, #8]
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6a3a      	ldr	r2, [r7, #32]
 8004804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fe1a 	bl	8005440 <xTaskCreateStatic>
 800480c:	4603      	mov	r3, r0
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	e013      	b.n	800483a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d110      	bne.n	800483a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	b29a      	uxth	r2, r3
 800481c:	f107 0310 	add.w	r3, r7, #16
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fe68 	bl	8005500 <xTaskCreate>
 8004830:	4603      	mov	r3, r0
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <osThreadNew+0x11a>
            hTask = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800483a:	693b      	ldr	r3, [r7, #16]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3728      	adds	r7, #40	@ 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800484c:	f3ef 8305 	mrs	r3, IPSR
 8004850:	60bb      	str	r3, [r7, #8]
  return(result);
 8004852:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <osDelay+0x1c>
    stat = osErrorISR;
 8004858:	f06f 0305 	mvn.w	r3, #5
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e007      	b.n	8004870 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <osDelay+0x2c>
      vTaskDelay(ticks);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 ff8e 	bl	800578c <vTaskDelay>
    }
  }

  return (stat);
 8004870:	68fb      	ldr	r3, [r7, #12]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a07      	ldr	r2, [pc, #28]	@ (80048a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800488c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4a06      	ldr	r2, [pc, #24]	@ (80048ac <vApplicationGetIdleTaskMemory+0x30>)
 8004892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2280      	movs	r2, #128	@ 0x80
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	200004dc 	.word	0x200004dc
 80048ac:	20000538 	.word	0x20000538

080048b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a07      	ldr	r2, [pc, #28]	@ (80048dc <vApplicationGetTimerTaskMemory+0x2c>)
 80048c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a06      	ldr	r2, [pc, #24]	@ (80048e0 <vApplicationGetTimerTaskMemory+0x30>)
 80048c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048ce:	601a      	str	r2, [r3, #0]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	20000738 	.word	0x20000738
 80048e0:	20000794 	.word	0x20000794

080048e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f103 0208 	add.w	r2, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f04f 32ff 	mov.w	r2, #4294967295
 80048fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f103 0208 	add.w	r2, r3, #8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f103 0208 	add.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d103      	bne.n	80049a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e00c      	b.n	80049c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3308      	adds	r3, #8
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e002      	b.n	80049b4 <vListInsert+0x2e>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d2f6      	bcs.n	80049ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	601a      	str	r2, [r3, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6892      	ldr	r2, [r2, #8]
 8004a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6852      	ldr	r2, [r2, #4]
 8004a18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d103      	bne.n	8004a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	1e5a      	subs	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10b      	bne.n	8004a78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a78:	f002 f966 	bl	8006d48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a84:	68f9      	ldr	r1, [r7, #12]
 8004a86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	441a      	add	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004aae:	fb01 f303 	mul.w	r3, r1, r3
 8004ab2:	441a      	add	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	22ff      	movs	r2, #255	@ 0xff
 8004abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	22ff      	movs	r2, #255	@ 0xff
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d114      	bne.n	8004af8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01a      	beq.n	8004b0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3310      	adds	r3, #16
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 f91a 	bl	8005d14 <xTaskRemoveFromEventList>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d012      	beq.n	8004b0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <xQueueGenericReset+0xd0>)
 8004ae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	e009      	b.n	8004b0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3310      	adds	r3, #16
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fef1 	bl	80048e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3324      	adds	r3, #36	@ 0x24
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff feec 	bl	80048e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b0c:	f002 f94e 	bl	8006dac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b10:	2301      	movs	r3, #1
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	e000ed04 	.word	0xe000ed04

08004b20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08e      	sub	sp, #56	@ 0x38
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	e7fd      	b.n	8004b48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	e7fd      	b.n	8004b66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <xQueueGenericCreateStatic+0x56>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <xQueueGenericCreateStatic+0x5a>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <xQueueGenericCreateStatic+0x5c>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	623b      	str	r3, [r7, #32]
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <xQueueGenericCreateStatic+0x84>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <xQueueGenericCreateStatic+0x88>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <xQueueGenericCreateStatic+0x8a>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	61fb      	str	r3, [r7, #28]
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	e7fd      	b.n	8004bc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bc6:	2350      	movs	r3, #80	@ 0x50
 8004bc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b50      	cmp	r3, #80	@ 0x50
 8004bce:	d00b      	beq.n	8004be8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	61bb      	str	r3, [r7, #24]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004be8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00d      	beq.n	8004c10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f805 	bl	8004c1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3730      	adds	r7, #48	@ 0x30
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e002      	b.n	8004c3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c48:	2101      	movs	r1, #1
 8004c4a:	69b8      	ldr	r0, [r7, #24]
 8004c4c:	f7ff fefe 	bl	8004a4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08e      	sub	sp, #56	@ 0x38
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10b      	bne.n	8004c94 <xQueueGenericSend+0x34>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	e7fd      	b.n	8004c90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <xQueueGenericSend+0x42>
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <xQueueGenericSend+0x46>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <xQueueGenericSend+0x48>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <xQueueGenericSend+0x64>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d103      	bne.n	8004cd2 <xQueueGenericSend+0x72>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <xQueueGenericSend+0x76>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericSend+0x78>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <xQueueGenericSend+0x94>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	623b      	str	r3, [r7, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cf4:	f001 f9de 	bl	80060b4 <xTaskGetSchedulerState>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <xQueueGenericSend+0xa4>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <xQueueGenericSend+0xa8>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <xQueueGenericSend+0xaa>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10b      	bne.n	8004d26 <xQueueGenericSend+0xc6>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	61fb      	str	r3, [r7, #28]
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d26:	f002 f80f 	bl	8006d48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <xQueueGenericSend+0xdc>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d129      	bne.n	8004d90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d42:	f000 fa0f 	bl	8005164 <prvCopyDataToQueue>
 8004d46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d010      	beq.n	8004d72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	3324      	adds	r3, #36	@ 0x24
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 ffdd 	bl	8005d14 <xTaskRemoveFromEventList>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d60:	4b3f      	ldr	r3, [pc, #252]	@ (8004e60 <xQueueGenericSend+0x200>)
 8004d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	e00a      	b.n	8004d88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d78:	4b39      	ldr	r3, [pc, #228]	@ (8004e60 <xQueueGenericSend+0x200>)
 8004d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d88:	f002 f810 	bl	8006dac <vPortExitCritical>
				return pdPASS;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e063      	b.n	8004e58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d96:	f002 f809 	bl	8006dac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e05c      	b.n	8004e58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d106      	bne.n	8004db2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004da4:	f107 0314 	add.w	r3, r7, #20
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 f817 	bl	8005ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dae:	2301      	movs	r3, #1
 8004db0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004db2:	f001 fffb 	bl	8006dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004db6:	f000 fd87 	bl	80058c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dba:	f001 ffc5 	bl	8006d48 <vPortEnterCritical>
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dc4:	b25b      	sxtb	r3, r3
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d103      	bne.n	8004dd4 <xQueueGenericSend+0x174>
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d103      	bne.n	8004dea <xQueueGenericSend+0x18a>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dea:	f001 ffdf 	bl	8006dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dee:	1d3a      	adds	r2, r7, #4
 8004df0:	f107 0314 	add.w	r3, r7, #20
 8004df4:	4611      	mov	r1, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 f806 	bl	8005e08 <xTaskCheckForTimeOut>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d124      	bne.n	8004e4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e04:	f000 faa6 	bl	8005354 <prvIsQueueFull>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d018      	beq.n	8004e40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	3310      	adds	r3, #16
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	4611      	mov	r1, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 ff2a 	bl	8005c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e1e:	f000 fa31 	bl	8005284 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e22:	f000 fd5f 	bl	80058e4 <xTaskResumeAll>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f af7c 	bne.w	8004d26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e60 <xQueueGenericSend+0x200>)
 8004e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	e772      	b.n	8004d26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e42:	f000 fa1f 	bl	8005284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e46:	f000 fd4d 	bl	80058e4 <xTaskResumeAll>
 8004e4a:	e76c      	b.n	8004d26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e4e:	f000 fa19 	bl	8005284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e52:	f000 fd47 	bl	80058e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3738      	adds	r7, #56	@ 0x38
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	e000ed04 	.word	0xe000ed04

08004e64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b090      	sub	sp, #64	@ 0x40
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10b      	bne.n	8004e94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e8e:	bf00      	nop
 8004e90:	bf00      	nop
 8004e92:	e7fd      	b.n	8004e90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d103      	bne.n	8004ea2 <xQueueGenericSendFromISR+0x3e>
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <xQueueGenericSendFromISR+0x42>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <xQueueGenericSendFromISR+0x44>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d103      	bne.n	8004ed2 <xQueueGenericSendFromISR+0x6e>
 8004eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <xQueueGenericSendFromISR+0x72>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <xQueueGenericSendFromISR+0x74>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	623b      	str	r3, [r7, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ef4:	f002 f808 	bl	8006f08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ef8:	f3ef 8211 	mrs	r2, BASEPRI
 8004efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	61fa      	str	r2, [r7, #28]
 8004f0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d302      	bcc.n	8004f26 <xQueueGenericSendFromISR+0xc2>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d12f      	bne.n	8004f86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f3c:	f000 f912 	bl	8005164 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d112      	bne.n	8004f70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d016      	beq.n	8004f80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f54:	3324      	adds	r3, #36	@ 0x24
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fedc 	bl	8005d14 <xTaskRemoveFromEventList>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00e      	beq.n	8004f80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00b      	beq.n	8004f80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e007      	b.n	8004f80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f74:	3301      	adds	r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	b25a      	sxtb	r2, r3
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f80:	2301      	movs	r3, #1
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004f84:	e001      	b.n	8004f8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3740      	adds	r7, #64	@ 0x40
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08c      	sub	sp, #48	@ 0x30
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10b      	bne.n	8004fd2 <xQueueReceive+0x32>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	623b      	str	r3, [r7, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	e7fd      	b.n	8004fce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d103      	bne.n	8004fe0 <xQueueReceive+0x40>
 8004fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <xQueueReceive+0x44>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <xQueueReceive+0x46>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10b      	bne.n	8005002 <xQueueReceive+0x62>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	61fb      	str	r3, [r7, #28]
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	e7fd      	b.n	8004ffe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005002:	f001 f857 	bl	80060b4 <xTaskGetSchedulerState>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <xQueueReceive+0x72>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <xQueueReceive+0x76>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <xQueueReceive+0x78>
 8005016:	2300      	movs	r3, #0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <xQueueReceive+0x94>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	61bb      	str	r3, [r7, #24]
}
 800502e:	bf00      	nop
 8005030:	bf00      	nop
 8005032:	e7fd      	b.n	8005030 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005034:	f001 fe88 	bl	8006d48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01f      	beq.n	8005084 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005048:	f000 f8f6 	bl	8005238 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005052:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00f      	beq.n	800507c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800505c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505e:	3310      	adds	r3, #16
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fe57 	bl	8005d14 <xTaskRemoveFromEventList>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800506c:	4b3c      	ldr	r3, [pc, #240]	@ (8005160 <xQueueReceive+0x1c0>)
 800506e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800507c:	f001 fe96 	bl	8006dac <vPortExitCritical>
				return pdPASS;
 8005080:	2301      	movs	r3, #1
 8005082:	e069      	b.n	8005158 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800508a:	f001 fe8f 	bl	8006dac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800508e:	2300      	movs	r3, #0
 8005090:	e062      	b.n	8005158 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005098:	f107 0310 	add.w	r3, r7, #16
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fe9d 	bl	8005ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050a2:	2301      	movs	r3, #1
 80050a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050a6:	f001 fe81 	bl	8006dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050aa:	f000 fc0d 	bl	80058c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ae:	f001 fe4b 	bl	8006d48 <vPortEnterCritical>
 80050b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050b8:	b25b      	sxtb	r3, r3
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	d103      	bne.n	80050c8 <xQueueReceive+0x128>
 80050c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050ce:	b25b      	sxtb	r3, r3
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d103      	bne.n	80050de <xQueueReceive+0x13e>
 80050d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050de:	f001 fe65 	bl	8006dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050e2:	1d3a      	adds	r2, r7, #4
 80050e4:	f107 0310 	add.w	r3, r7, #16
 80050e8:	4611      	mov	r1, r2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fe8c 	bl	8005e08 <xTaskCheckForTimeOut>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d123      	bne.n	800513e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050f8:	f000 f916 	bl	8005328 <prvIsQueueEmpty>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d017      	beq.n	8005132 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005104:	3324      	adds	r3, #36	@ 0x24
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fdb0 	bl	8005c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005112:	f000 f8b7 	bl	8005284 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005116:	f000 fbe5 	bl	80058e4 <xTaskResumeAll>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d189      	bne.n	8005034 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005120:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <xQueueReceive+0x1c0>)
 8005122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	e780      	b.n	8005034 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005134:	f000 f8a6 	bl	8005284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005138:	f000 fbd4 	bl	80058e4 <xTaskResumeAll>
 800513c:	e77a      	b.n	8005034 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800513e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005140:	f000 f8a0 	bl	8005284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005144:	f000 fbce 	bl	80058e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800514a:	f000 f8ed 	bl	8005328 <prvIsQueueEmpty>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	f43f af6f 	beq.w	8005034 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005156:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005158:	4618      	mov	r0, r3
 800515a:	3730      	adds	r7, #48	@ 0x30
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	e000ed04 	.word	0xe000ed04

08005164 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10d      	bne.n	800519e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d14d      	bne.n	8005226 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 ffae 	bl	80060f0 <xTaskPriorityDisinherit>
 8005194:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	e043      	b.n	8005226 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d119      	bne.n	80051d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6858      	ldr	r0, [r3, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ac:	461a      	mov	r2, r3
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	f002 f906 	bl	80073c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d32b      	bcc.n	8005226 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	605a      	str	r2, [r3, #4]
 80051d6:	e026      	b.n	8005226 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	68d8      	ldr	r0, [r3, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	461a      	mov	r2, r3
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	f002 f8ec 	bl	80073c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	425b      	negs	r3, r3
 80051f2:	441a      	add	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d207      	bcs.n	8005214 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	425b      	negs	r3, r3
 800520e:	441a      	add	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d105      	bne.n	8005226 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	3b01      	subs	r3, #1
 8005224:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800522e:	697b      	ldr	r3, [r7, #20]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d018      	beq.n	800527c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	441a      	add	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	d303      	bcc.n	800526c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68d9      	ldr	r1, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005274:	461a      	mov	r2, r3
 8005276:	6838      	ldr	r0, [r7, #0]
 8005278:	f002 f8a2 	bl	80073c0 <memcpy>
	}
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800528c:	f001 fd5c 	bl	8006d48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005296:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005298:	e011      	b.n	80052be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d012      	beq.n	80052c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3324      	adds	r3, #36	@ 0x24
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fd34 	bl	8005d14 <xTaskRemoveFromEventList>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052b2:	f000 fe0d 	bl	8005ed0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	dce9      	bgt.n	800529a <prvUnlockQueue+0x16>
 80052c6:	e000      	b.n	80052ca <prvUnlockQueue+0x46>
					break;
 80052c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	22ff      	movs	r2, #255	@ 0xff
 80052ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80052d2:	f001 fd6b 	bl	8006dac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052d6:	f001 fd37 	bl	8006d48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052e2:	e011      	b.n	8005308 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d012      	beq.n	8005312 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3310      	adds	r3, #16
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fd0f 	bl	8005d14 <xTaskRemoveFromEventList>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052fc:	f000 fde8 	bl	8005ed0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005300:	7bbb      	ldrb	r3, [r7, #14]
 8005302:	3b01      	subs	r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800530c:	2b00      	cmp	r3, #0
 800530e:	dce9      	bgt.n	80052e4 <prvUnlockQueue+0x60>
 8005310:	e000      	b.n	8005314 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005312:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	22ff      	movs	r2, #255	@ 0xff
 8005318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800531c:	f001 fd46 	bl	8006dac <vPortExitCritical>
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005330:	f001 fd0a 	bl	8006d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800533c:	2301      	movs	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e001      	b.n	8005346 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005346:	f001 fd31 	bl	8006dac <vPortExitCritical>

	return xReturn;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800535c:	f001 fcf4 	bl	8006d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	429a      	cmp	r2, r3
 800536a:	d102      	bne.n	8005372 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e001      	b.n	8005376 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005376:	f001 fd19 	bl	8006dac <vPortExitCritical>

	return xReturn;
 800537a:	68fb      	ldr	r3, [r7, #12]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	e014      	b.n	80053be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005394:	4a0f      	ldr	r2, [pc, #60]	@ (80053d4 <vQueueAddToRegistry+0x50>)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10b      	bne.n	80053b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053a0:	490c      	ldr	r1, [pc, #48]	@ (80053d4 <vQueueAddToRegistry+0x50>)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053aa:	4a0a      	ldr	r2, [pc, #40]	@ (80053d4 <vQueueAddToRegistry+0x50>)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053b6:	e006      	b.n	80053c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b07      	cmp	r3, #7
 80053c2:	d9e7      	bls.n	8005394 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000b94 	.word	0x20000b94

080053d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053e8:	f001 fcae 	bl	8006d48 <vPortEnterCritical>
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053f2:	b25b      	sxtb	r3, r3
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d103      	bne.n	8005402 <vQueueWaitForMessageRestricted+0x2a>
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005408:	b25b      	sxtb	r3, r3
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d103      	bne.n	8005418 <vQueueWaitForMessageRestricted+0x40>
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005418:	f001 fcc8 	bl	8006dac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3324      	adds	r3, #36	@ 0x24
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fc45 	bl	8005cbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005432:	6978      	ldr	r0, [r7, #20]
 8005434:	f7ff ff26 	bl	8005284 <prvUnlockQueue>
	}
 8005438:	bf00      	nop
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08e      	sub	sp, #56	@ 0x38
 8005444:	af04      	add	r7, sp, #16
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800544e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	623b      	str	r3, [r7, #32]
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800546c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	61fb      	str	r3, [r7, #28]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800548a:	235c      	movs	r3, #92	@ 0x5c
 800548c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b5c      	cmp	r3, #92	@ 0x5c
 8005492:	d00b      	beq.n	80054ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	61bb      	str	r3, [r7, #24]
}
 80054a6:	bf00      	nop
 80054a8:	bf00      	nop
 80054aa:	e7fd      	b.n	80054a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01e      	beq.n	80054f2 <xTaskCreateStatic+0xb2>
 80054b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01b      	beq.n	80054f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054cc:	2300      	movs	r3, #0
 80054ce:	9303      	str	r3, [sp, #12]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	9302      	str	r3, [sp, #8]
 80054d4:	f107 0314 	add.w	r3, r7, #20
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f850 	bl	800558a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054ec:	f000 f8de 	bl	80056ac <prvAddNewTaskToReadyList>
 80054f0:	e001      	b.n	80054f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054f6:	697b      	ldr	r3, [r7, #20]
	}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3728      	adds	r7, #40	@ 0x28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08c      	sub	sp, #48	@ 0x30
 8005504:	af04      	add	r7, sp, #16
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fd39 	bl	8006f8c <pvPortMalloc>
 800551a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00e      	beq.n	8005540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005522:	205c      	movs	r0, #92	@ 0x5c
 8005524:	f001 fd32 	bl	8006f8c <pvPortMalloc>
 8005528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	631a      	str	r2, [r3, #48]	@ 0x30
 8005536:	e005      	b.n	8005544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005538:	6978      	ldr	r0, [r7, #20]
 800553a:	f001 fdf5 	bl	8007128 <vPortFree>
 800553e:	e001      	b.n	8005544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d017      	beq.n	800557a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	2300      	movs	r3, #0
 8005556:	9303      	str	r3, [sp, #12]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	9302      	str	r3, [sp, #8]
 800555c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f80e 	bl	800558a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800556e:	69f8      	ldr	r0, [r7, #28]
 8005570:	f000 f89c 	bl	80056ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005574:	2301      	movs	r3, #1
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	e002      	b.n	8005580 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800557a:	f04f 33ff 	mov.w	r3, #4294967295
 800557e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005580:	69bb      	ldr	r3, [r7, #24]
	}
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b088      	sub	sp, #32
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	461a      	mov	r2, r3
 80055a2:	21a5      	movs	r1, #165	@ 0xa5
 80055a4:	f001 fee0 	bl	8007368 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055b2:	3b01      	subs	r3, #1
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f023 0307 	bic.w	r3, r3, #7
 80055c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	617b      	str	r3, [r7, #20]
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	e7fd      	b.n	80055e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01f      	beq.n	800562a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e012      	b.n	8005616 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	7819      	ldrb	r1, [r3, #0]
 80055f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	3334      	adds	r3, #52	@ 0x34
 8005600:	460a      	mov	r2, r1
 8005602:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d006      	beq.n	800561e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	3301      	adds	r3, #1
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	2b0f      	cmp	r3, #15
 800561a:	d9e9      	bls.n	80055f0 <prvInitialiseNewTask+0x66>
 800561c:	e000      	b.n	8005620 <prvInitialiseNewTask+0x96>
			{
				break;
 800561e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005628:	e003      	b.n	8005632 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	2b37      	cmp	r3, #55	@ 0x37
 8005636:	d901      	bls.n	800563c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005638:	2337      	movs	r3, #55	@ 0x37
 800563a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005640:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005646:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564a:	2200      	movs	r2, #0
 800564c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	3304      	adds	r3, #4
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff f966 	bl	8004924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	3318      	adds	r3, #24
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff f961 	bl	8004924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005666:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005676:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	2200      	movs	r2, #0
 800567c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	68f9      	ldr	r1, [r7, #12]
 800568a:	69b8      	ldr	r0, [r7, #24]
 800568c:	f001 fa2a 	bl	8006ae4 <pxPortInitialiseStack>
 8005690:	4602      	mov	r2, r0
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a2:	bf00      	nop
 80056a4:	3720      	adds	r7, #32
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056b4:	f001 fb48 	bl	8006d48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005770 <prvAddNewTaskToReadyList+0xc4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	4a2c      	ldr	r2, [pc, #176]	@ (8005770 <prvAddNewTaskToReadyList+0xc4>)
 80056c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005774 <prvAddNewTaskToReadyList+0xc8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005774 <prvAddNewTaskToReadyList+0xc8>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056d0:	4b27      	ldr	r3, [pc, #156]	@ (8005770 <prvAddNewTaskToReadyList+0xc4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d110      	bne.n	80056fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056d8:	f000 fc1e 	bl	8005f18 <prvInitialiseTaskLists>
 80056dc:	e00d      	b.n	80056fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056de:	4b26      	ldr	r3, [pc, #152]	@ (8005778 <prvAddNewTaskToReadyList+0xcc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056e6:	4b23      	ldr	r3, [pc, #140]	@ (8005774 <prvAddNewTaskToReadyList+0xc8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d802      	bhi.n	80056fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005774 <prvAddNewTaskToReadyList+0xc8>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056fa:	4b20      	ldr	r3, [pc, #128]	@ (800577c <prvAddNewTaskToReadyList+0xd0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3301      	adds	r3, #1
 8005700:	4a1e      	ldr	r2, [pc, #120]	@ (800577c <prvAddNewTaskToReadyList+0xd0>)
 8005702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005704:	4b1d      	ldr	r3, [pc, #116]	@ (800577c <prvAddNewTaskToReadyList+0xd0>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005710:	4b1b      	ldr	r3, [pc, #108]	@ (8005780 <prvAddNewTaskToReadyList+0xd4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d903      	bls.n	8005720 <prvAddNewTaskToReadyList+0x74>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	4a18      	ldr	r2, [pc, #96]	@ (8005780 <prvAddNewTaskToReadyList+0xd4>)
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4a15      	ldr	r2, [pc, #84]	@ (8005784 <prvAddNewTaskToReadyList+0xd8>)
 800572e:	441a      	add	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f7ff f901 	bl	800493e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800573c:	f001 fb36 	bl	8006dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005740:	4b0d      	ldr	r3, [pc, #52]	@ (8005778 <prvAddNewTaskToReadyList+0xcc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00e      	beq.n	8005766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005748:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <prvAddNewTaskToReadyList+0xc8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005752:	429a      	cmp	r2, r3
 8005754:	d207      	bcs.n	8005766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005756:	4b0c      	ldr	r3, [pc, #48]	@ (8005788 <prvAddNewTaskToReadyList+0xdc>)
 8005758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200010a8 	.word	0x200010a8
 8005774:	20000bd4 	.word	0x20000bd4
 8005778:	200010b4 	.word	0x200010b4
 800577c:	200010c4 	.word	0x200010c4
 8005780:	200010b0 	.word	0x200010b0
 8005784:	20000bd8 	.word	0x20000bd8
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800579e:	4b14      	ldr	r3, [pc, #80]	@ (80057f0 <vTaskDelay+0x64>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <vTaskDelay+0x32>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	60bb      	str	r3, [r7, #8]
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057be:	f000 f883 	bl	80058c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057c2:	2100      	movs	r1, #0
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fddf 	bl	8006388 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057ca:	f000 f88b 	bl	80058e4 <xTaskResumeAll>
 80057ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d107      	bne.n	80057e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80057d6:	4b07      	ldr	r3, [pc, #28]	@ (80057f4 <vTaskDelay+0x68>)
 80057d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200010d0 	.word	0x200010d0
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	@ 0x28
 80057fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005806:	463a      	mov	r2, r7
 8005808:	1d39      	adds	r1, r7, #4
 800580a:	f107 0308 	add.w	r3, r7, #8
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff f834 	bl	800487c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	9202      	str	r2, [sp, #8]
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	2300      	movs	r3, #0
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	2300      	movs	r3, #0
 8005824:	460a      	mov	r2, r1
 8005826:	4922      	ldr	r1, [pc, #136]	@ (80058b0 <vTaskStartScheduler+0xb8>)
 8005828:	4822      	ldr	r0, [pc, #136]	@ (80058b4 <vTaskStartScheduler+0xbc>)
 800582a:	f7ff fe09 	bl	8005440 <xTaskCreateStatic>
 800582e:	4603      	mov	r3, r0
 8005830:	4a21      	ldr	r2, [pc, #132]	@ (80058b8 <vTaskStartScheduler+0xc0>)
 8005832:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005834:	4b20      	ldr	r3, [pc, #128]	@ (80058b8 <vTaskStartScheduler+0xc0>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800583c:	2301      	movs	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	e001      	b.n	8005846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d102      	bne.n	8005852 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800584c:	f000 fdf0 	bl	8006430 <xTimerCreateTimerTask>
 8005850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d116      	bne.n	8005886 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	613b      	str	r3, [r7, #16]
}
 800586a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800586c:	4b13      	ldr	r3, [pc, #76]	@ (80058bc <vTaskStartScheduler+0xc4>)
 800586e:	f04f 32ff 	mov.w	r2, #4294967295
 8005872:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005874:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <vTaskStartScheduler+0xc8>)
 8005876:	2201      	movs	r2, #1
 8005878:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800587a:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <vTaskStartScheduler+0xcc>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005880:	f001 f9be 	bl	8006c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005884:	e00f      	b.n	80058a6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d10b      	bne.n	80058a6 <vTaskStartScheduler+0xae>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	60fb      	str	r3, [r7, #12]
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	e7fd      	b.n	80058a2 <vTaskStartScheduler+0xaa>
}
 80058a6:	bf00      	nop
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	0800740c 	.word	0x0800740c
 80058b4:	08005ee9 	.word	0x08005ee9
 80058b8:	200010cc 	.word	0x200010cc
 80058bc:	200010c8 	.word	0x200010c8
 80058c0:	200010b4 	.word	0x200010b4
 80058c4:	200010ac 	.word	0x200010ac

080058c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058cc:	4b04      	ldr	r3, [pc, #16]	@ (80058e0 <vTaskSuspendAll+0x18>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	4a03      	ldr	r2, [pc, #12]	@ (80058e0 <vTaskSuspendAll+0x18>)
 80058d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058d6:	bf00      	nop
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	200010d0 	.word	0x200010d0

080058e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058f2:	4b42      	ldr	r3, [pc, #264]	@ (80059fc <xTaskResumeAll+0x118>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <xTaskResumeAll+0x2e>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	603b      	str	r3, [r7, #0]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005912:	f001 fa19 	bl	8006d48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005916:	4b39      	ldr	r3, [pc, #228]	@ (80059fc <xTaskResumeAll+0x118>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3b01      	subs	r3, #1
 800591c:	4a37      	ldr	r2, [pc, #220]	@ (80059fc <xTaskResumeAll+0x118>)
 800591e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005920:	4b36      	ldr	r3, [pc, #216]	@ (80059fc <xTaskResumeAll+0x118>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d162      	bne.n	80059ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005928:	4b35      	ldr	r3, [pc, #212]	@ (8005a00 <xTaskResumeAll+0x11c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d05e      	beq.n	80059ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005930:	e02f      	b.n	8005992 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005932:	4b34      	ldr	r3, [pc, #208]	@ (8005a04 <xTaskResumeAll+0x120>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3318      	adds	r3, #24
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff f85a 	bl	80049f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3304      	adds	r3, #4
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff f855 	bl	80049f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005952:	4b2d      	ldr	r3, [pc, #180]	@ (8005a08 <xTaskResumeAll+0x124>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d903      	bls.n	8005962 <xTaskResumeAll+0x7e>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	4a2a      	ldr	r2, [pc, #168]	@ (8005a08 <xTaskResumeAll+0x124>)
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4a27      	ldr	r2, [pc, #156]	@ (8005a0c <xTaskResumeAll+0x128>)
 8005970:	441a      	add	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3304      	adds	r3, #4
 8005976:	4619      	mov	r1, r3
 8005978:	4610      	mov	r0, r2
 800597a:	f7fe ffe0 	bl	800493e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005982:	4b23      	ldr	r3, [pc, #140]	@ (8005a10 <xTaskResumeAll+0x12c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	429a      	cmp	r2, r3
 800598a:	d302      	bcc.n	8005992 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800598c:	4b21      	ldr	r3, [pc, #132]	@ (8005a14 <xTaskResumeAll+0x130>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005992:	4b1c      	ldr	r3, [pc, #112]	@ (8005a04 <xTaskResumeAll+0x120>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1cb      	bne.n	8005932 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059a0:	f000 fb58 	bl	8006054 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a18 <xTaskResumeAll+0x134>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059b0:	f000 f846 	bl	8005a40 <xTaskIncrementTick>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80059ba:	4b16      	ldr	r3, [pc, #88]	@ (8005a14 <xTaskResumeAll+0x130>)
 80059bc:	2201      	movs	r2, #1
 80059be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1f1      	bne.n	80059b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80059cc:	4b12      	ldr	r3, [pc, #72]	@ (8005a18 <xTaskResumeAll+0x134>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059d2:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <xTaskResumeAll+0x130>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059da:	2301      	movs	r3, #1
 80059dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059de:	4b0f      	ldr	r3, [pc, #60]	@ (8005a1c <xTaskResumeAll+0x138>)
 80059e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059ee:	f001 f9dd 	bl	8006dac <vPortExitCritical>

	return xAlreadyYielded;
 80059f2:	68bb      	ldr	r3, [r7, #8]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	200010d0 	.word	0x200010d0
 8005a00:	200010a8 	.word	0x200010a8
 8005a04:	20001068 	.word	0x20001068
 8005a08:	200010b0 	.word	0x200010b0
 8005a0c:	20000bd8 	.word	0x20000bd8
 8005a10:	20000bd4 	.word	0x20000bd4
 8005a14:	200010bc 	.word	0x200010bc
 8005a18:	200010b8 	.word	0x200010b8
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a26:	4b05      	ldr	r3, [pc, #20]	@ (8005a3c <xTaskGetTickCount+0x1c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a2c:	687b      	ldr	r3, [r7, #4]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	200010ac 	.word	0x200010ac

08005a40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8005b88 <xTaskIncrementTick+0x148>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 8090 	bne.w	8005b74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a54:	4b4d      	ldr	r3, [pc, #308]	@ (8005b8c <xTaskIncrementTick+0x14c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8005b8c <xTaskIncrementTick+0x14c>)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d121      	bne.n	8005aac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a68:	4b49      	ldr	r3, [pc, #292]	@ (8005b90 <xTaskIncrementTick+0x150>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	603b      	str	r3, [r7, #0]
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	e7fd      	b.n	8005a86 <xTaskIncrementTick+0x46>
 8005a8a:	4b41      	ldr	r3, [pc, #260]	@ (8005b90 <xTaskIncrementTick+0x150>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	4b40      	ldr	r3, [pc, #256]	@ (8005b94 <xTaskIncrementTick+0x154>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a3e      	ldr	r2, [pc, #248]	@ (8005b90 <xTaskIncrementTick+0x150>)
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	4a3e      	ldr	r2, [pc, #248]	@ (8005b94 <xTaskIncrementTick+0x154>)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b98 <xTaskIncrementTick+0x158>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8005b98 <xTaskIncrementTick+0x158>)
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	f000 fad4 	bl	8006054 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005aac:	4b3b      	ldr	r3, [pc, #236]	@ (8005b9c <xTaskIncrementTick+0x15c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d349      	bcc.n	8005b4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ab6:	4b36      	ldr	r3, [pc, #216]	@ (8005b90 <xTaskIncrementTick+0x150>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac0:	4b36      	ldr	r3, [pc, #216]	@ (8005b9c <xTaskIncrementTick+0x15c>)
 8005ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac6:	601a      	str	r2, [r3, #0]
					break;
 8005ac8:	e03f      	b.n	8005b4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aca:	4b31      	ldr	r3, [pc, #196]	@ (8005b90 <xTaskIncrementTick+0x150>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d203      	bcs.n	8005aea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ae2:	4a2e      	ldr	r2, [pc, #184]	@ (8005b9c <xTaskIncrementTick+0x15c>)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ae8:	e02f      	b.n	8005b4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe ff82 	bl	80049f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3318      	adds	r3, #24
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe ff79 	bl	80049f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0a:	4b25      	ldr	r3, [pc, #148]	@ (8005ba0 <xTaskIncrementTick+0x160>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d903      	bls.n	8005b1a <xTaskIncrementTick+0xda>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b16:	4a22      	ldr	r2, [pc, #136]	@ (8005ba0 <xTaskIncrementTick+0x160>)
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba4 <xTaskIncrementTick+0x164>)
 8005b28:	441a      	add	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f7fe ff04 	bl	800493e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba8 <xTaskIncrementTick+0x168>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3b8      	bcc.n	8005ab6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b48:	e7b5      	b.n	8005ab6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b4a:	4b17      	ldr	r3, [pc, #92]	@ (8005ba8 <xTaskIncrementTick+0x168>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b50:	4914      	ldr	r1, [pc, #80]	@ (8005ba4 <xTaskIncrementTick+0x164>)
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d901      	bls.n	8005b66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b66:	4b11      	ldr	r3, [pc, #68]	@ (8005bac <xTaskIncrementTick+0x16c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	e004      	b.n	8005b7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b74:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb0 <xTaskIncrementTick+0x170>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb0 <xTaskIncrementTick+0x170>)
 8005b7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b7e:	697b      	ldr	r3, [r7, #20]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	200010d0 	.word	0x200010d0
 8005b8c:	200010ac 	.word	0x200010ac
 8005b90:	20001060 	.word	0x20001060
 8005b94:	20001064 	.word	0x20001064
 8005b98:	200010c0 	.word	0x200010c0
 8005b9c:	200010c8 	.word	0x200010c8
 8005ba0:	200010b0 	.word	0x200010b0
 8005ba4:	20000bd8 	.word	0x20000bd8
 8005ba8:	20000bd4 	.word	0x20000bd4
 8005bac:	200010bc 	.word	0x200010bc
 8005bb0:	200010b8 	.word	0x200010b8

08005bb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bba:	4b28      	ldr	r3, [pc, #160]	@ (8005c5c <vTaskSwitchContext+0xa8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bc2:	4b27      	ldr	r3, [pc, #156]	@ (8005c60 <vTaskSwitchContext+0xac>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bc8:	e042      	b.n	8005c50 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005bca:	4b25      	ldr	r3, [pc, #148]	@ (8005c60 <vTaskSwitchContext+0xac>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd0:	4b24      	ldr	r3, [pc, #144]	@ (8005c64 <vTaskSwitchContext+0xb0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e011      	b.n	8005bfc <vTaskSwitchContext+0x48>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10b      	bne.n	8005bf6 <vTaskSwitchContext+0x42>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	607b      	str	r3, [r7, #4]
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	e7fd      	b.n	8005bf2 <vTaskSwitchContext+0x3e>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	491a      	ldr	r1, [pc, #104]	@ (8005c68 <vTaskSwitchContext+0xb4>)
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0e3      	beq.n	8005bd8 <vTaskSwitchContext+0x24>
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4a13      	ldr	r2, [pc, #76]	@ (8005c68 <vTaskSwitchContext+0xb4>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	3308      	adds	r3, #8
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d104      	bne.n	8005c40 <vTaskSwitchContext+0x8c>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	605a      	str	r2, [r3, #4]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	4a09      	ldr	r2, [pc, #36]	@ (8005c6c <vTaskSwitchContext+0xb8>)
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	4a06      	ldr	r2, [pc, #24]	@ (8005c64 <vTaskSwitchContext+0xb0>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6013      	str	r3, [r2, #0]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	200010d0 	.word	0x200010d0
 8005c60:	200010bc 	.word	0x200010bc
 8005c64:	200010b0 	.word	0x200010b0
 8005c68:	20000bd8 	.word	0x20000bd8
 8005c6c:	20000bd4 	.word	0x20000bd4

08005c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10b      	bne.n	8005c98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	60fb      	str	r3, [r7, #12]
}
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	e7fd      	b.n	8005c94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c98:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <vTaskPlaceOnEventList+0x48>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3318      	adds	r3, #24
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fe fe70 	bl	8004986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	6838      	ldr	r0, [r7, #0]
 8005caa:	f000 fb6d 	bl	8006388 <prvAddCurrentTaskToDelayedList>
}
 8005cae:	bf00      	nop
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000bd4 	.word	0x20000bd4

08005cbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	617b      	str	r3, [r7, #20]
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8005d10 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3318      	adds	r3, #24
 8005cec:	4619      	mov	r1, r3
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7fe fe25 	bl	800493e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	68b8      	ldr	r0, [r7, #8]
 8005d04:	f000 fb40 	bl	8006388 <prvAddCurrentTaskToDelayedList>
	}
 8005d08:	bf00      	nop
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000bd4 	.word	0x20000bd4

08005d14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10b      	bne.n	8005d42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60fb      	str	r3, [r7, #12]
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	e7fd      	b.n	8005d3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	3318      	adds	r3, #24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fe56 	bl	80049f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc4 <xTaskRemoveFromEventList+0xb0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d11d      	bne.n	8005d90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fe fe4d 	bl	80049f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d62:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <xTaskRemoveFromEventList+0xb4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d903      	bls.n	8005d72 <xTaskRemoveFromEventList+0x5e>
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6e:	4a16      	ldr	r2, [pc, #88]	@ (8005dc8 <xTaskRemoveFromEventList+0xb4>)
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4a13      	ldr	r2, [pc, #76]	@ (8005dcc <xTaskRemoveFromEventList+0xb8>)
 8005d80:	441a      	add	r2, r3
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4619      	mov	r1, r3
 8005d88:	4610      	mov	r0, r2
 8005d8a:	f7fe fdd8 	bl	800493e <vListInsertEnd>
 8005d8e:	e005      	b.n	8005d9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	3318      	adds	r3, #24
 8005d94:	4619      	mov	r1, r3
 8005d96:	480e      	ldr	r0, [pc, #56]	@ (8005dd0 <xTaskRemoveFromEventList+0xbc>)
 8005d98:	f7fe fdd1 	bl	800493e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da0:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <xTaskRemoveFromEventList+0xc0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d905      	bls.n	8005db6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dae:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <xTaskRemoveFromEventList+0xc4>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e001      	b.n	8005dba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dba:	697b      	ldr	r3, [r7, #20]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	200010d0 	.word	0x200010d0
 8005dc8:	200010b0 	.word	0x200010b0
 8005dcc:	20000bd8 	.word	0x20000bd8
 8005dd0:	20001068 	.word	0x20001068
 8005dd4:	20000bd4 	.word	0x20000bd4
 8005dd8:	200010bc 	.word	0x200010bc

08005ddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005de4:	4b06      	ldr	r3, [pc, #24]	@ (8005e00 <vTaskInternalSetTimeOutState+0x24>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005dec:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <vTaskInternalSetTimeOutState+0x28>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	200010c0 	.word	0x200010c0
 8005e04:	200010ac 	.word	0x200010ac

08005e08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10b      	bne.n	8005e30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	613b      	str	r3, [r7, #16]
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10b      	bne.n	8005e4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60fb      	str	r3, [r7, #12]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005e4e:	f000 ff7b 	bl	8006d48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e52:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec8 <xTaskCheckForTimeOut+0xc0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d102      	bne.n	8005e72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	e023      	b.n	8005eba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b15      	ldr	r3, [pc, #84]	@ (8005ecc <xTaskCheckForTimeOut+0xc4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d007      	beq.n	8005e8e <xTaskCheckForTimeOut+0x86>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d302      	bcc.n	8005e8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	e015      	b.n	8005eba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d20b      	bcs.n	8005eb0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ff99 	bl	8005ddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	e004      	b.n	8005eba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005eba:	f000 ff77 	bl	8006dac <vPortExitCritical>

	return xReturn;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200010ac 	.word	0x200010ac
 8005ecc:	200010c0 	.word	0x200010c0

08005ed0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ed4:	4b03      	ldr	r3, [pc, #12]	@ (8005ee4 <vTaskMissedYield+0x14>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
}
 8005eda:	bf00      	nop
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	200010bc 	.word	0x200010bc

08005ee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ef0:	f000 f852 	bl	8005f98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ef4:	4b06      	ldr	r3, [pc, #24]	@ (8005f10 <prvIdleTask+0x28>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d9f9      	bls.n	8005ef0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <prvIdleTask+0x2c>)
 8005efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f0c:	e7f0      	b.n	8005ef0 <prvIdleTask+0x8>
 8005f0e:	bf00      	nop
 8005f10:	20000bd8 	.word	0x20000bd8
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	e00c      	b.n	8005f3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4a12      	ldr	r2, [pc, #72]	@ (8005f78 <prvInitialiseTaskLists+0x60>)
 8005f30:	4413      	add	r3, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe fcd6 	bl	80048e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	607b      	str	r3, [r7, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b37      	cmp	r3, #55	@ 0x37
 8005f42:	d9ef      	bls.n	8005f24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f44:	480d      	ldr	r0, [pc, #52]	@ (8005f7c <prvInitialiseTaskLists+0x64>)
 8005f46:	f7fe fccd 	bl	80048e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f4a:	480d      	ldr	r0, [pc, #52]	@ (8005f80 <prvInitialiseTaskLists+0x68>)
 8005f4c:	f7fe fcca 	bl	80048e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f50:	480c      	ldr	r0, [pc, #48]	@ (8005f84 <prvInitialiseTaskLists+0x6c>)
 8005f52:	f7fe fcc7 	bl	80048e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f56:	480c      	ldr	r0, [pc, #48]	@ (8005f88 <prvInitialiseTaskLists+0x70>)
 8005f58:	f7fe fcc4 	bl	80048e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f5c:	480b      	ldr	r0, [pc, #44]	@ (8005f8c <prvInitialiseTaskLists+0x74>)
 8005f5e:	f7fe fcc1 	bl	80048e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f62:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <prvInitialiseTaskLists+0x78>)
 8005f64:	4a05      	ldr	r2, [pc, #20]	@ (8005f7c <prvInitialiseTaskLists+0x64>)
 8005f66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	@ (8005f94 <prvInitialiseTaskLists+0x7c>)
 8005f6a:	4a05      	ldr	r2, [pc, #20]	@ (8005f80 <prvInitialiseTaskLists+0x68>)
 8005f6c:	601a      	str	r2, [r3, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000bd8 	.word	0x20000bd8
 8005f7c:	20001038 	.word	0x20001038
 8005f80:	2000104c 	.word	0x2000104c
 8005f84:	20001068 	.word	0x20001068
 8005f88:	2000107c 	.word	0x2000107c
 8005f8c:	20001094 	.word	0x20001094
 8005f90:	20001060 	.word	0x20001060
 8005f94:	20001064 	.word	0x20001064

08005f98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f9e:	e019      	b.n	8005fd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fa0:	f000 fed2 	bl	8006d48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa4:	4b10      	ldr	r3, [pc, #64]	@ (8005fe8 <prvCheckTasksWaitingTermination+0x50>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fd21 	bl	80049f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <prvCheckTasksWaitingTermination+0x54>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8005fec <prvCheckTasksWaitingTermination+0x54>)
 8005fbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff0 <prvCheckTasksWaitingTermination+0x58>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff0 <prvCheckTasksWaitingTermination+0x58>)
 8005fc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fca:	f000 feef 	bl	8006dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f810 	bl	8005ff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fd4:	4b06      	ldr	r3, [pc, #24]	@ (8005ff0 <prvCheckTasksWaitingTermination+0x58>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e1      	bne.n	8005fa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	2000107c 	.word	0x2000107c
 8005fec:	200010a8 	.word	0x200010a8
 8005ff0:	20001090 	.word	0x20001090

08005ff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006002:	2b00      	cmp	r3, #0
 8006004:	d108      	bne.n	8006018 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600a:	4618      	mov	r0, r3
 800600c:	f001 f88c 	bl	8007128 <vPortFree>
				vPortFree( pxTCB );
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 f889 	bl	8007128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006016:	e019      	b.n	800604c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800601e:	2b01      	cmp	r3, #1
 8006020:	d103      	bne.n	800602a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 f880 	bl	8007128 <vPortFree>
	}
 8006028:	e010      	b.n	800604c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006030:	2b02      	cmp	r3, #2
 8006032:	d00b      	beq.n	800604c <prvDeleteTCB+0x58>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	60fb      	str	r3, [r7, #12]
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	e7fd      	b.n	8006048 <prvDeleteTCB+0x54>
	}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800605a:	4b0c      	ldr	r3, [pc, #48]	@ (800608c <prvResetNextTaskUnblockTime+0x38>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006064:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <prvResetNextTaskUnblockTime+0x3c>)
 8006066:	f04f 32ff 	mov.w	r2, #4294967295
 800606a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800606c:	e008      	b.n	8006080 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606e:	4b07      	ldr	r3, [pc, #28]	@ (800608c <prvResetNextTaskUnblockTime+0x38>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	4a04      	ldr	r2, [pc, #16]	@ (8006090 <prvResetNextTaskUnblockTime+0x3c>)
 800607e:	6013      	str	r3, [r2, #0]
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	20001060 	.word	0x20001060
 8006090:	200010c8 	.word	0x200010c8

08006094 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800609a:	4b05      	ldr	r3, [pc, #20]	@ (80060b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80060a0:	687b      	ldr	r3, [r7, #4]
	}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20000bd4 	.word	0x20000bd4

080060b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060ba:	4b0b      	ldr	r3, [pc, #44]	@ (80060e8 <xTaskGetSchedulerState+0x34>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060c2:	2301      	movs	r3, #1
 80060c4:	607b      	str	r3, [r7, #4]
 80060c6:	e008      	b.n	80060da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c8:	4b08      	ldr	r3, [pc, #32]	@ (80060ec <xTaskGetSchedulerState+0x38>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060d0:	2302      	movs	r3, #2
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	e001      	b.n	80060da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060d6:	2300      	movs	r3, #0
 80060d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060da:	687b      	ldr	r3, [r7, #4]
	}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	200010b4 	.word	0x200010b4
 80060ec:	200010d0 	.word	0x200010d0

080060f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d058      	beq.n	80061b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006106:	4b2f      	ldr	r3, [pc, #188]	@ (80061c4 <xTaskPriorityDisinherit+0xd4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	429a      	cmp	r2, r3
 800610e:	d00b      	beq.n	8006128 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60fb      	str	r3, [r7, #12]
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	e7fd      	b.n	8006124 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10b      	bne.n	8006148 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	60bb      	str	r3, [r7, #8]
}
 8006142:	bf00      	nop
 8006144:	bf00      	nop
 8006146:	e7fd      	b.n	8006144 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800614c:	1e5a      	subs	r2, r3, #1
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800615a:	429a      	cmp	r2, r3
 800615c:	d02c      	beq.n	80061b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006162:	2b00      	cmp	r3, #0
 8006164:	d128      	bne.n	80061b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3304      	adds	r3, #4
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fc44 	bl	80049f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006188:	4b0f      	ldr	r3, [pc, #60]	@ (80061c8 <xTaskPriorityDisinherit+0xd8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d903      	bls.n	8006198 <xTaskPriorityDisinherit+0xa8>
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	4a0c      	ldr	r2, [pc, #48]	@ (80061c8 <xTaskPriorityDisinherit+0xd8>)
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4a09      	ldr	r2, [pc, #36]	@ (80061cc <xTaskPriorityDisinherit+0xdc>)
 80061a6:	441a      	add	r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f7fe fbc5 	bl	800493e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061b8:	697b      	ldr	r3, [r7, #20]
	}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000bd4 	.word	0x20000bd4
 80061c8:	200010b0 	.word	0x200010b0
 80061cc:	20000bd8 	.word	0x20000bd8

080061d0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80061da:	f000 fdb5 	bl	8006d48 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80061de:	4b1e      	ldr	r3, [pc, #120]	@ (8006258 <ulTaskNotifyTake+0x88>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d113      	bne.n	8006210 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80061e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006258 <ulTaskNotifyTake+0x88>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061f8:	2101      	movs	r1, #1
 80061fa:	6838      	ldr	r0, [r7, #0]
 80061fc:	f000 f8c4 	bl	8006388 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006200:	4b16      	ldr	r3, [pc, #88]	@ (800625c <ulTaskNotifyTake+0x8c>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006210:	f000 fdcc 	bl	8006dac <vPortExitCritical>

		taskENTER_CRITICAL();
 8006214:	f000 fd98 	bl	8006d48 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006218:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <ulTaskNotifyTake+0x88>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00c      	beq.n	8006240 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d004      	beq.n	8006236 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800622c:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <ulTaskNotifyTake+0x88>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2200      	movs	r2, #0
 8006232:	655a      	str	r2, [r3, #84]	@ 0x54
 8006234:	e004      	b.n	8006240 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006236:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <ulTaskNotifyTake+0x88>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	3a01      	subs	r2, #1
 800623e:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006240:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <ulTaskNotifyTake+0x88>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800624a:	f000 fdaf 	bl	8006dac <vPortExitCritical>

		return ulReturn;
 800624e:	68fb      	ldr	r3, [r7, #12]
	}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20000bd4 	.word	0x20000bd4
 800625c:	e000ed04 	.word	0xe000ed04

08006260 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08a      	sub	sp, #40	@ 0x28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10b      	bne.n	8006288 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	61bb      	str	r3, [r7, #24]
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	e7fd      	b.n	8006284 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006288:	f000 fe3e 	bl	8006f08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006290:	f3ef 8211 	mrs	r2, BASEPRI
 8006294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	617a      	str	r2, [r7, #20]
 80062a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80062a8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062aa:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80062b2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80062c6:	7ffb      	ldrb	r3, [r7, #31]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d147      	bne.n	800635c <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	60fb      	str	r3, [r7, #12]
}
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	e7fd      	b.n	80062e8 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ec:	4b20      	ldr	r3, [pc, #128]	@ (8006370 <vTaskNotifyGiveFromISR+0x110>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d11d      	bne.n	8006330 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	3304      	adds	r3, #4
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fb7d 	bl	80049f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006302:	4b1c      	ldr	r3, [pc, #112]	@ (8006374 <vTaskNotifyGiveFromISR+0x114>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d903      	bls.n	8006312 <vTaskNotifyGiveFromISR+0xb2>
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630e:	4a19      	ldr	r2, [pc, #100]	@ (8006374 <vTaskNotifyGiveFromISR+0x114>)
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4a16      	ldr	r2, [pc, #88]	@ (8006378 <vTaskNotifyGiveFromISR+0x118>)
 8006320:	441a      	add	r2, r3
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	3304      	adds	r3, #4
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7fe fb08 	bl	800493e <vListInsertEnd>
 800632e:	e005      	b.n	800633c <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	3318      	adds	r3, #24
 8006334:	4619      	mov	r1, r3
 8006336:	4811      	ldr	r0, [pc, #68]	@ (800637c <vTaskNotifyGiveFromISR+0x11c>)
 8006338:	f7fe fb01 	bl	800493e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006340:	4b0f      	ldr	r3, [pc, #60]	@ (8006380 <vTaskNotifyGiveFromISR+0x120>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006346:	429a      	cmp	r2, r3
 8006348:	d908      	bls.n	800635c <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006356:	4b0b      	ldr	r3, [pc, #44]	@ (8006384 <vTaskNotifyGiveFromISR+0x124>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f383 8811 	msr	BASEPRI, r3
}
 8006366:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006368:	bf00      	nop
 800636a:	3728      	adds	r7, #40	@ 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	200010d0 	.word	0x200010d0
 8006374:	200010b0 	.word	0x200010b0
 8006378:	20000bd8 	.word	0x20000bd8
 800637c:	20001068 	.word	0x20001068
 8006380:	20000bd4 	.word	0x20000bd4
 8006384:	200010bc 	.word	0x200010bc

08006388 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006392:	4b21      	ldr	r3, [pc, #132]	@ (8006418 <prvAddCurrentTaskToDelayedList+0x90>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006398:	4b20      	ldr	r3, [pc, #128]	@ (800641c <prvAddCurrentTaskToDelayedList+0x94>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3304      	adds	r3, #4
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fb2a 	bl	80049f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d10a      	bne.n	80063c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063b2:	4b1a      	ldr	r3, [pc, #104]	@ (800641c <prvAddCurrentTaskToDelayedList+0x94>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4819      	ldr	r0, [pc, #100]	@ (8006420 <prvAddCurrentTaskToDelayedList+0x98>)
 80063bc:	f7fe fabf 	bl	800493e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063c0:	e026      	b.n	8006410 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4413      	add	r3, r2
 80063c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063ca:	4b14      	ldr	r3, [pc, #80]	@ (800641c <prvAddCurrentTaskToDelayedList+0x94>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d209      	bcs.n	80063ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063da:	4b12      	ldr	r3, [pc, #72]	@ (8006424 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b0f      	ldr	r3, [pc, #60]	@ (800641c <prvAddCurrentTaskToDelayedList+0x94>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f7fe facd 	bl	8004986 <vListInsert>
}
 80063ec:	e010      	b.n	8006410 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006428 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <prvAddCurrentTaskToDelayedList+0x94>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7fe fac3 	bl	8004986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006400:	4b0a      	ldr	r3, [pc, #40]	@ (800642c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	429a      	cmp	r2, r3
 8006408:	d202      	bcs.n	8006410 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800640a:	4a08      	ldr	r2, [pc, #32]	@ (800642c <prvAddCurrentTaskToDelayedList+0xa4>)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6013      	str	r3, [r2, #0]
}
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	200010ac 	.word	0x200010ac
 800641c:	20000bd4 	.word	0x20000bd4
 8006420:	20001094 	.word	0x20001094
 8006424:	20001064 	.word	0x20001064
 8006428:	20001060 	.word	0x20001060
 800642c:	200010c8 	.word	0x200010c8

08006430 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	@ 0x28
 8006434:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800643a:	f000 fb13 	bl	8006a64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800643e:	4b1d      	ldr	r3, [pc, #116]	@ (80064b4 <xTimerCreateTimerTask+0x84>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d021      	beq.n	800648a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800644e:	1d3a      	adds	r2, r7, #4
 8006450:	f107 0108 	add.w	r1, r7, #8
 8006454:	f107 030c 	add.w	r3, r7, #12
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe fa29 	bl	80048b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	9202      	str	r2, [sp, #8]
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	2302      	movs	r3, #2
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	2300      	movs	r3, #0
 800646e:	460a      	mov	r2, r1
 8006470:	4911      	ldr	r1, [pc, #68]	@ (80064b8 <xTimerCreateTimerTask+0x88>)
 8006472:	4812      	ldr	r0, [pc, #72]	@ (80064bc <xTimerCreateTimerTask+0x8c>)
 8006474:	f7fe ffe4 	bl	8005440 <xTaskCreateStatic>
 8006478:	4603      	mov	r3, r0
 800647a:	4a11      	ldr	r2, [pc, #68]	@ (80064c0 <xTimerCreateTimerTask+0x90>)
 800647c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800647e:	4b10      	ldr	r3, [pc, #64]	@ (80064c0 <xTimerCreateTimerTask+0x90>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006486:	2301      	movs	r3, #1
 8006488:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10b      	bne.n	80064a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	613b      	str	r3, [r7, #16]
}
 80064a2:	bf00      	nop
 80064a4:	bf00      	nop
 80064a6:	e7fd      	b.n	80064a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064a8:	697b      	ldr	r3, [r7, #20]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20001104 	.word	0x20001104
 80064b8:	08007414 	.word	0x08007414
 80064bc:	080065fd 	.word	0x080065fd
 80064c0:	20001108 	.word	0x20001108

080064c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08a      	sub	sp, #40	@ 0x28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <xTimerGenericCommand+0x30>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	623b      	str	r3, [r7, #32]
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064f4:	4b19      	ldr	r3, [pc, #100]	@ (800655c <xTimerGenericCommand+0x98>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d02a      	beq.n	8006552 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b05      	cmp	r3, #5
 800650c:	dc18      	bgt.n	8006540 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800650e:	f7ff fdd1 	bl	80060b4 <xTaskGetSchedulerState>
 8006512:	4603      	mov	r3, r0
 8006514:	2b02      	cmp	r3, #2
 8006516:	d109      	bne.n	800652c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006518:	4b10      	ldr	r3, [pc, #64]	@ (800655c <xTimerGenericCommand+0x98>)
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	f107 0110 	add.w	r1, r7, #16
 8006520:	2300      	movs	r3, #0
 8006522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006524:	f7fe fb9c 	bl	8004c60 <xQueueGenericSend>
 8006528:	6278      	str	r0, [r7, #36]	@ 0x24
 800652a:	e012      	b.n	8006552 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800652c:	4b0b      	ldr	r3, [pc, #44]	@ (800655c <xTimerGenericCommand+0x98>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	f107 0110 	add.w	r1, r7, #16
 8006534:	2300      	movs	r3, #0
 8006536:	2200      	movs	r2, #0
 8006538:	f7fe fb92 	bl	8004c60 <xQueueGenericSend>
 800653c:	6278      	str	r0, [r7, #36]	@ 0x24
 800653e:	e008      	b.n	8006552 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006540:	4b06      	ldr	r3, [pc, #24]	@ (800655c <xTimerGenericCommand+0x98>)
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	f107 0110 	add.w	r1, r7, #16
 8006548:	2300      	movs	r3, #0
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	f7fe fc8a 	bl	8004e64 <xQueueGenericSendFromISR>
 8006550:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006554:	4618      	mov	r0, r3
 8006556:	3728      	adds	r7, #40	@ 0x28
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20001104 	.word	0x20001104

08006560 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af02      	add	r7, sp, #8
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800656a:	4b23      	ldr	r3, [pc, #140]	@ (80065f8 <prvProcessExpiredTimer+0x98>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	3304      	adds	r3, #4
 8006578:	4618      	mov	r0, r3
 800657a:	f7fe fa3d 	bl	80049f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d023      	beq.n	80065d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	699a      	ldr	r2, [r3, #24]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	18d1      	adds	r1, r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	6978      	ldr	r0, [r7, #20]
 800659a:	f000 f8d5 	bl	8006748 <prvInsertTimerInActiveList>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d020      	beq.n	80065e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065a4:	2300      	movs	r3, #0
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	2300      	movs	r3, #0
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	2100      	movs	r1, #0
 80065ae:	6978      	ldr	r0, [r7, #20]
 80065b0:	f7ff ff88 	bl	80064c4 <xTimerGenericCommand>
 80065b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d114      	bne.n	80065e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	60fb      	str	r3, [r7, #12]
}
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
 80065d2:	e7fd      	b.n	80065d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	6978      	ldr	r0, [r7, #20]
 80065ec:	4798      	blx	r3
}
 80065ee:	bf00      	nop
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	200010fc 	.word	0x200010fc

080065fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006604:	f107 0308 	add.w	r3, r7, #8
 8006608:	4618      	mov	r0, r3
 800660a:	f000 f859 	bl	80066c0 <prvGetNextExpireTime>
 800660e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4619      	mov	r1, r3
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f805 	bl	8006624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800661a:	f000 f8d7 	bl	80067cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800661e:	bf00      	nop
 8006620:	e7f0      	b.n	8006604 <prvTimerTask+0x8>
	...

08006624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800662e:	f7ff f94b 	bl	80058c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006632:	f107 0308 	add.w	r3, r7, #8
 8006636:	4618      	mov	r0, r3
 8006638:	f000 f866 	bl	8006708 <prvSampleTimeNow>
 800663c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d130      	bne.n	80066a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <prvProcessTimerOrBlockTask+0x3c>
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	429a      	cmp	r2, r3
 8006650:	d806      	bhi.n	8006660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006652:	f7ff f947 	bl	80058e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ff81 	bl	8006560 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800665e:	e024      	b.n	80066aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d008      	beq.n	8006678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006666:	4b13      	ldr	r3, [pc, #76]	@ (80066b4 <prvProcessTimerOrBlockTask+0x90>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <prvProcessTimerOrBlockTask+0x50>
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <prvProcessTimerOrBlockTask+0x52>
 8006674:	2300      	movs	r3, #0
 8006676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006678:	4b0f      	ldr	r3, [pc, #60]	@ (80066b8 <prvProcessTimerOrBlockTask+0x94>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	f7fe fea7 	bl	80053d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800668a:	f7ff f92b 	bl	80058e4 <xTaskResumeAll>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006694:	4b09      	ldr	r3, [pc, #36]	@ (80066bc <prvProcessTimerOrBlockTask+0x98>)
 8006696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	f3bf 8f6f 	isb	sy
}
 80066a4:	e001      	b.n	80066aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066a6:	f7ff f91d 	bl	80058e4 <xTaskResumeAll>
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20001100 	.word	0x20001100
 80066b8:	20001104 	.word	0x20001104
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006704 <prvGetNextExpireTime+0x44>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <prvGetNextExpireTime+0x16>
 80066d2:	2201      	movs	r2, #1
 80066d4:	e000      	b.n	80066d8 <prvGetNextExpireTime+0x18>
 80066d6:	2200      	movs	r2, #0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066e4:	4b07      	ldr	r3, [pc, #28]	@ (8006704 <prvGetNextExpireTime+0x44>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e001      	b.n	80066f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066f4:	68fb      	ldr	r3, [r7, #12]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	200010fc 	.word	0x200010fc

08006708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006710:	f7ff f986 	bl	8005a20 <xTaskGetTickCount>
 8006714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006716:	4b0b      	ldr	r3, [pc, #44]	@ (8006744 <prvSampleTimeNow+0x3c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	429a      	cmp	r2, r3
 800671e:	d205      	bcs.n	800672c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006720:	f000 f93a 	bl	8006998 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e002      	b.n	8006732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006732:	4a04      	ldr	r2, [pc, #16]	@ (8006744 <prvSampleTimeNow+0x3c>)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006738:	68fb      	ldr	r3, [r7, #12]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	2000110c 	.word	0x2000110c

08006748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d812      	bhi.n	8006794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	1ad2      	subs	r2, r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	429a      	cmp	r2, r3
 800677a:	d302      	bcc.n	8006782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800677c:	2301      	movs	r3, #1
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e01b      	b.n	80067ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006782:	4b10      	ldr	r3, [pc, #64]	@ (80067c4 <prvInsertTimerInActiveList+0x7c>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3304      	adds	r3, #4
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f7fe f8fa 	bl	8004986 <vListInsert>
 8006792:	e012      	b.n	80067ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d206      	bcs.n	80067aa <prvInsertTimerInActiveList+0x62>
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	e007      	b.n	80067ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067aa:	4b07      	ldr	r3, [pc, #28]	@ (80067c8 <prvInsertTimerInActiveList+0x80>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7fe f8e6 	bl	8004986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067ba:	697b      	ldr	r3, [r7, #20]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20001100 	.word	0x20001100
 80067c8:	200010fc 	.word	0x200010fc

080067cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08e      	sub	sp, #56	@ 0x38
 80067d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067d2:	e0ce      	b.n	8006972 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da19      	bge.n	800680e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067da:	1d3b      	adds	r3, r7, #4
 80067dc:	3304      	adds	r3, #4
 80067de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	61fb      	str	r3, [r7, #28]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006804:	6850      	ldr	r0, [r2, #4]
 8006806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006808:	6892      	ldr	r2, [r2, #8]
 800680a:	4611      	mov	r1, r2
 800680c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f2c0 80ae 	blt.w	8006972 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	3304      	adds	r3, #4
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe f8e6 	bl	80049f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800682c:	463b      	mov	r3, r7
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff ff6a 	bl	8006708 <prvSampleTimeNow>
 8006834:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b09      	cmp	r3, #9
 800683a:	f200 8097 	bhi.w	800696c <prvProcessReceivedCommands+0x1a0>
 800683e:	a201      	add	r2, pc, #4	@ (adr r2, 8006844 <prvProcessReceivedCommands+0x78>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	0800686d 	.word	0x0800686d
 8006848:	0800686d 	.word	0x0800686d
 800684c:	0800686d 	.word	0x0800686d
 8006850:	080068e3 	.word	0x080068e3
 8006854:	080068f7 	.word	0x080068f7
 8006858:	08006943 	.word	0x08006943
 800685c:	0800686d 	.word	0x0800686d
 8006860:	0800686d 	.word	0x0800686d
 8006864:	080068e3 	.word	0x080068e3
 8006868:	080068f7 	.word	0x080068f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	b2da      	uxtb	r2, r3
 8006878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	18d1      	adds	r1, r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800688a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800688c:	f7ff ff5c 	bl	8006748 <prvInsertTimerInActiveList>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d06c      	beq.n	8006970 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800689c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800689e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d061      	beq.n	8006970 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	441a      	add	r2, r3
 80068b4:	2300      	movs	r3, #0
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	2300      	movs	r3, #0
 80068ba:	2100      	movs	r1, #0
 80068bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068be:	f7ff fe01 	bl	80064c4 <xTimerGenericCommand>
 80068c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d152      	bne.n	8006970 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	61bb      	str	r3, [r7, #24]
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	e7fd      	b.n	80068de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068e8:	f023 0301 	bic.w	r3, r3, #1
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80068f4:	e03d      	b.n	8006972 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	b2da      	uxtb	r2, r3
 8006902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006904:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10b      	bne.n	800692e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	617b      	str	r3, [r7, #20]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800692e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	18d1      	adds	r1, r2, r3
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800693a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800693c:	f7ff ff04 	bl	8006748 <prvInsertTimerInActiveList>
					break;
 8006940:	e017      	b.n	8006972 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d103      	bne.n	8006958 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006950:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006952:	f000 fbe9 	bl	8007128 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006956:	e00c      	b.n	8006972 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800696a:	e002      	b.n	8006972 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800696c:	bf00      	nop
 800696e:	e000      	b.n	8006972 <prvProcessReceivedCommands+0x1a6>
					break;
 8006970:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006972:	4b08      	ldr	r3, [pc, #32]	@ (8006994 <prvProcessReceivedCommands+0x1c8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	1d39      	adds	r1, r7, #4
 8006978:	2200      	movs	r2, #0
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe fb10 	bl	8004fa0 <xQueueReceive>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	f47f af26 	bne.w	80067d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	3730      	adds	r7, #48	@ 0x30
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20001104 	.word	0x20001104

08006998 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800699e:	e049      	b.n	8006a34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069a0:	4b2e      	ldr	r3, [pc, #184]	@ (8006a5c <prvSwitchTimerLists+0xc4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069aa:	4b2c      	ldr	r3, [pc, #176]	@ (8006a5c <prvSwitchTimerLists+0xc4>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe f81d 	bl	80049f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d02f      	beq.n	8006a34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d90e      	bls.n	8006a04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069f2:	4b1a      	ldr	r3, [pc, #104]	@ (8006a5c <prvSwitchTimerLists+0xc4>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3304      	adds	r3, #4
 80069fa:	4619      	mov	r1, r3
 80069fc:	4610      	mov	r0, r2
 80069fe:	f7fd ffc2 	bl	8004986 <vListInsert>
 8006a02:	e017      	b.n	8006a34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a04:	2300      	movs	r3, #0
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f7ff fd58 	bl	80064c4 <xTimerGenericCommand>
 8006a14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	603b      	str	r3, [r7, #0]
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a34:	4b09      	ldr	r3, [pc, #36]	@ (8006a5c <prvSwitchTimerLists+0xc4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1b0      	bne.n	80069a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a3e:	4b07      	ldr	r3, [pc, #28]	@ (8006a5c <prvSwitchTimerLists+0xc4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a44:	4b06      	ldr	r3, [pc, #24]	@ (8006a60 <prvSwitchTimerLists+0xc8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a04      	ldr	r2, [pc, #16]	@ (8006a5c <prvSwitchTimerLists+0xc4>)
 8006a4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a4c:	4a04      	ldr	r2, [pc, #16]	@ (8006a60 <prvSwitchTimerLists+0xc8>)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	6013      	str	r3, [r2, #0]
}
 8006a52:	bf00      	nop
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	200010fc 	.word	0x200010fc
 8006a60:	20001100 	.word	0x20001100

08006a64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a6a:	f000 f96d 	bl	8006d48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a6e:	4b15      	ldr	r3, [pc, #84]	@ (8006ac4 <prvCheckForValidListAndQueue+0x60>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d120      	bne.n	8006ab8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a76:	4814      	ldr	r0, [pc, #80]	@ (8006ac8 <prvCheckForValidListAndQueue+0x64>)
 8006a78:	f7fd ff34 	bl	80048e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a7c:	4813      	ldr	r0, [pc, #76]	@ (8006acc <prvCheckForValidListAndQueue+0x68>)
 8006a7e:	f7fd ff31 	bl	80048e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a82:	4b13      	ldr	r3, [pc, #76]	@ (8006ad0 <prvCheckForValidListAndQueue+0x6c>)
 8006a84:	4a10      	ldr	r2, [pc, #64]	@ (8006ac8 <prvCheckForValidListAndQueue+0x64>)
 8006a86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a88:	4b12      	ldr	r3, [pc, #72]	@ (8006ad4 <prvCheckForValidListAndQueue+0x70>)
 8006a8a:	4a10      	ldr	r2, [pc, #64]	@ (8006acc <prvCheckForValidListAndQueue+0x68>)
 8006a8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	4b11      	ldr	r3, [pc, #68]	@ (8006ad8 <prvCheckForValidListAndQueue+0x74>)
 8006a94:	4a11      	ldr	r2, [pc, #68]	@ (8006adc <prvCheckForValidListAndQueue+0x78>)
 8006a96:	2110      	movs	r1, #16
 8006a98:	200a      	movs	r0, #10
 8006a9a:	f7fe f841 	bl	8004b20 <xQueueGenericCreateStatic>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4a08      	ldr	r2, [pc, #32]	@ (8006ac4 <prvCheckForValidListAndQueue+0x60>)
 8006aa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006aa4:	4b07      	ldr	r3, [pc, #28]	@ (8006ac4 <prvCheckForValidListAndQueue+0x60>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006aac:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <prvCheckForValidListAndQueue+0x60>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	490b      	ldr	r1, [pc, #44]	@ (8006ae0 <prvCheckForValidListAndQueue+0x7c>)
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fc66 	bl	8005384 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ab8:	f000 f978 	bl	8006dac <vPortExitCritical>
}
 8006abc:	bf00      	nop
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20001104 	.word	0x20001104
 8006ac8:	200010d4 	.word	0x200010d4
 8006acc:	200010e8 	.word	0x200010e8
 8006ad0:	200010fc 	.word	0x200010fc
 8006ad4:	20001100 	.word	0x20001100
 8006ad8:	200011b0 	.word	0x200011b0
 8006adc:	20001110 	.word	0x20001110
 8006ae0:	0800741c 	.word	0x0800741c

08006ae4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3b04      	subs	r3, #4
 8006af4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3b04      	subs	r3, #4
 8006b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f023 0201 	bic.w	r2, r3, #1
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3b04      	subs	r3, #4
 8006b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b14:	4a0c      	ldr	r2, [pc, #48]	@ (8006b48 <pxPortInitialiseStack+0x64>)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3b14      	subs	r3, #20
 8006b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3b04      	subs	r3, #4
 8006b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f06f 0202 	mvn.w	r2, #2
 8006b32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3b20      	subs	r3, #32
 8006b38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	08006b4d 	.word	0x08006b4d

08006b4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b56:	4b13      	ldr	r3, [pc, #76]	@ (8006ba4 <prvTaskExitError+0x58>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d00b      	beq.n	8006b78 <prvTaskExitError+0x2c>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60fb      	str	r3, [r7, #12]
}
 8006b72:	bf00      	nop
 8006b74:	bf00      	nop
 8006b76:	e7fd      	b.n	8006b74 <prvTaskExitError+0x28>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	60bb      	str	r3, [r7, #8]
}
 8006b8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b8c:	bf00      	nop
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0fc      	beq.n	8006b8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	2000000c 	.word	0x2000000c
	...

08006bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bb0:	4b07      	ldr	r3, [pc, #28]	@ (8006bd0 <pxCurrentTCBConst2>)
 8006bb2:	6819      	ldr	r1, [r3, #0]
 8006bb4:	6808      	ldr	r0, [r1, #0]
 8006bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bba:	f380 8809 	msr	PSP, r0
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f04f 0000 	mov.w	r0, #0
 8006bc6:	f380 8811 	msr	BASEPRI, r0
 8006bca:	4770      	bx	lr
 8006bcc:	f3af 8000 	nop.w

08006bd0 <pxCurrentTCBConst2>:
 8006bd0:	20000bd4 	.word	0x20000bd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop

08006bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bd8:	4808      	ldr	r0, [pc, #32]	@ (8006bfc <prvPortStartFirstTask+0x24>)
 8006bda:	6800      	ldr	r0, [r0, #0]
 8006bdc:	6800      	ldr	r0, [r0, #0]
 8006bde:	f380 8808 	msr	MSP, r0
 8006be2:	f04f 0000 	mov.w	r0, #0
 8006be6:	f380 8814 	msr	CONTROL, r0
 8006bea:	b662      	cpsie	i
 8006bec:	b661      	cpsie	f
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	df00      	svc	0
 8006bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bfa:	bf00      	nop
 8006bfc:	e000ed08 	.word	0xe000ed08

08006c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c06:	4b47      	ldr	r3, [pc, #284]	@ (8006d24 <xPortStartScheduler+0x124>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a47      	ldr	r2, [pc, #284]	@ (8006d28 <xPortStartScheduler+0x128>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d10b      	bne.n	8006c28 <xPortStartScheduler+0x28>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	60fb      	str	r3, [r7, #12]
}
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	e7fd      	b.n	8006c24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c28:	4b3e      	ldr	r3, [pc, #248]	@ (8006d24 <xPortStartScheduler+0x124>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d2c <xPortStartScheduler+0x12c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d10b      	bne.n	8006c4a <xPortStartScheduler+0x4a>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	613b      	str	r3, [r7, #16]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c4a:	4b39      	ldr	r3, [pc, #228]	@ (8006d30 <xPortStartScheduler+0x130>)
 8006c4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	22ff      	movs	r2, #255	@ 0xff
 8006c5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	4b31      	ldr	r3, [pc, #196]	@ (8006d34 <xPortStartScheduler+0x134>)
 8006c70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c72:	4b31      	ldr	r3, [pc, #196]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006c74:	2207      	movs	r2, #7
 8006c76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c78:	e009      	b.n	8006c8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	4a2d      	ldr	r2, [pc, #180]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006c82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c96:	2b80      	cmp	r3, #128	@ 0x80
 8006c98:	d0ef      	beq.n	8006c7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c9a:	4b27      	ldr	r3, [pc, #156]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f1c3 0307 	rsb	r3, r3, #7
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d00b      	beq.n	8006cbe <xPortStartScheduler+0xbe>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	60bb      	str	r3, [r7, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	e7fd      	b.n	8006cba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006cc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cd0:	4a19      	ldr	r2, [pc, #100]	@ (8006d38 <xPortStartScheduler+0x138>)
 8006cd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cdc:	4b17      	ldr	r3, [pc, #92]	@ (8006d3c <xPortStartScheduler+0x13c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a16      	ldr	r2, [pc, #88]	@ (8006d3c <xPortStartScheduler+0x13c>)
 8006ce2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ce6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ce8:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <xPortStartScheduler+0x13c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a13      	ldr	r2, [pc, #76]	@ (8006d3c <xPortStartScheduler+0x13c>)
 8006cee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006cf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cf4:	f000 f8da 	bl	8006eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cf8:	4b11      	ldr	r3, [pc, #68]	@ (8006d40 <xPortStartScheduler+0x140>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cfe:	f000 f8f9 	bl	8006ef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d02:	4b10      	ldr	r3, [pc, #64]	@ (8006d44 <xPortStartScheduler+0x144>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a0f      	ldr	r2, [pc, #60]	@ (8006d44 <xPortStartScheduler+0x144>)
 8006d08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006d0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d0e:	f7ff ff63 	bl	8006bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d12:	f7fe ff4f 	bl	8005bb4 <vTaskSwitchContext>
	prvTaskExitError();
 8006d16:	f7ff ff19 	bl	8006b4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	e000ed00 	.word	0xe000ed00
 8006d28:	410fc271 	.word	0x410fc271
 8006d2c:	410fc270 	.word	0x410fc270
 8006d30:	e000e400 	.word	0xe000e400
 8006d34:	20001200 	.word	0x20001200
 8006d38:	20001204 	.word	0x20001204
 8006d3c:	e000ed20 	.word	0xe000ed20
 8006d40:	2000000c 	.word	0x2000000c
 8006d44:	e000ef34 	.word	0xe000ef34

08006d48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	607b      	str	r3, [r7, #4]
}
 8006d60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d62:	4b10      	ldr	r3, [pc, #64]	@ (8006da4 <vPortEnterCritical+0x5c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3301      	adds	r3, #1
 8006d68:	4a0e      	ldr	r2, [pc, #56]	@ (8006da4 <vPortEnterCritical+0x5c>)
 8006d6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <vPortEnterCritical+0x5c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d110      	bne.n	8006d96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d74:	4b0c      	ldr	r3, [pc, #48]	@ (8006da8 <vPortEnterCritical+0x60>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <vPortEnterCritical+0x4e>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	603b      	str	r3, [r7, #0]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <vPortEnterCritical+0x4a>
	}
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	2000000c 	.word	0x2000000c
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006db2:	4b12      	ldr	r3, [pc, #72]	@ (8006dfc <vPortExitCritical+0x50>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10b      	bne.n	8006dd2 <vPortExitCritical+0x26>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	607b      	str	r3, [r7, #4]
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	e7fd      	b.n	8006dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <vPortExitCritical+0x50>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	4a08      	ldr	r2, [pc, #32]	@ (8006dfc <vPortExitCritical+0x50>)
 8006dda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ddc:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <vPortExitCritical+0x50>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d105      	bne.n	8006df0 <vPortExitCritical+0x44>
 8006de4:	2300      	movs	r3, #0
 8006de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	f383 8811 	msr	BASEPRI, r3
}
 8006dee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	2000000c 	.word	0x2000000c

08006e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e00:	f3ef 8009 	mrs	r0, PSP
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	4b15      	ldr	r3, [pc, #84]	@ (8006e60 <pxCurrentTCBConst>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	f01e 0f10 	tst.w	lr, #16
 8006e10:	bf08      	it	eq
 8006e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1a:	6010      	str	r0, [r2, #0]
 8006e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e24:	f380 8811 	msr	BASEPRI, r0
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f7fe fec0 	bl	8005bb4 <vTaskSwitchContext>
 8006e34:	f04f 0000 	mov.w	r0, #0
 8006e38:	f380 8811 	msr	BASEPRI, r0
 8006e3c:	bc09      	pop	{r0, r3}
 8006e3e:	6819      	ldr	r1, [r3, #0]
 8006e40:	6808      	ldr	r0, [r1, #0]
 8006e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e46:	f01e 0f10 	tst.w	lr, #16
 8006e4a:	bf08      	it	eq
 8006e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e50:	f380 8809 	msr	PSP, r0
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	f3af 8000 	nop.w

08006e60 <pxCurrentTCBConst>:
 8006e60:	20000bd4 	.word	0x20000bd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop

08006e68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	607b      	str	r3, [r7, #4]
}
 8006e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e82:	f7fe fddd 	bl	8005a40 <xTaskIncrementTick>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ea8 <xPortSysTickHandler+0x40>)
 8006e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	2300      	movs	r3, #0
 8006e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	f383 8811 	msr	BASEPRI, r3
}
 8006e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <vPortSetupTimerInterrupt+0x34>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee4 <vPortSetupTimerInterrupt+0x38>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee8 <vPortSetupTimerInterrupt+0x3c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8006eec <vPortSetupTimerInterrupt+0x40>)
 8006ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec6:	099b      	lsrs	r3, r3, #6
 8006ec8:	4a09      	ldr	r2, [pc, #36]	@ (8006ef0 <vPortSetupTimerInterrupt+0x44>)
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ece:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <vPortSetupTimerInterrupt+0x34>)
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	601a      	str	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	e000e010 	.word	0xe000e010
 8006ee4:	e000e018 	.word	0xe000e018
 8006ee8:	20000000 	.word	0x20000000
 8006eec:	10624dd3 	.word	0x10624dd3
 8006ef0:	e000e014 	.word	0xe000e014

08006ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006f04 <vPortEnableVFP+0x10>
 8006ef8:	6801      	ldr	r1, [r0, #0]
 8006efa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006efe:	6001      	str	r1, [r0, #0]
 8006f00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f02:	bf00      	nop
 8006f04:	e000ed88 	.word	0xe000ed88

08006f08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f0e:	f3ef 8305 	mrs	r3, IPSR
 8006f12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b0f      	cmp	r3, #15
 8006f18:	d915      	bls.n	8006f46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f1a:	4a18      	ldr	r2, [pc, #96]	@ (8006f7c <vPortValidateInterruptPriority+0x74>)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f24:	4b16      	ldr	r3, [pc, #88]	@ (8006f80 <vPortValidateInterruptPriority+0x78>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	7afa      	ldrb	r2, [r7, #11]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d20b      	bcs.n	8006f46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	607b      	str	r3, [r7, #4]
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	e7fd      	b.n	8006f42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f46:	4b0f      	ldr	r3, [pc, #60]	@ (8006f84 <vPortValidateInterruptPriority+0x7c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f88 <vPortValidateInterruptPriority+0x80>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d90b      	bls.n	8006f6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	603b      	str	r3, [r7, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <vPortValidateInterruptPriority+0x62>
	}
 8006f6e:	bf00      	nop
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	e000e3f0 	.word	0xe000e3f0
 8006f80:	20001200 	.word	0x20001200
 8006f84:	e000ed0c 	.word	0xe000ed0c
 8006f88:	20001204 	.word	0x20001204

08006f8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08a      	sub	sp, #40	@ 0x28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f98:	f7fe fc96 	bl	80058c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8007110 <pvPortMalloc+0x184>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fa4:	f000 f924 	bl	80071f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8007114 <pvPortMalloc+0x188>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f040 8095 	bne.w	80070e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01e      	beq.n	8006ffa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d015      	beq.n	8006ffa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f023 0307 	bic.w	r3, r3, #7
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00b      	beq.n	8006ffa <pvPortMalloc+0x6e>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	617b      	str	r3, [r7, #20]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d06f      	beq.n	80070e0 <pvPortMalloc+0x154>
 8007000:	4b45      	ldr	r3, [pc, #276]	@ (8007118 <pvPortMalloc+0x18c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	429a      	cmp	r2, r3
 8007008:	d86a      	bhi.n	80070e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800700a:	4b44      	ldr	r3, [pc, #272]	@ (800711c <pvPortMalloc+0x190>)
 800700c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800700e:	4b43      	ldr	r3, [pc, #268]	@ (800711c <pvPortMalloc+0x190>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007014:	e004      	b.n	8007020 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	429a      	cmp	r2, r3
 8007028:	d903      	bls.n	8007032 <pvPortMalloc+0xa6>
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f1      	bne.n	8007016 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007032:	4b37      	ldr	r3, [pc, #220]	@ (8007110 <pvPortMalloc+0x184>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007038:	429a      	cmp	r2, r3
 800703a:	d051      	beq.n	80070e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2208      	movs	r2, #8
 8007042:	4413      	add	r3, r2
 8007044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	1ad2      	subs	r2, r2, r3
 8007056:	2308      	movs	r3, #8
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	429a      	cmp	r2, r3
 800705c:	d920      	bls.n	80070a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800705e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4413      	add	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00b      	beq.n	8007088 <pvPortMalloc+0xfc>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	613b      	str	r3, [r7, #16]
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	e7fd      	b.n	8007084 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800709a:	69b8      	ldr	r0, [r7, #24]
 800709c:	f000 f90a 	bl	80072b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007118 <pvPortMalloc+0x18c>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007118 <pvPortMalloc+0x18c>)
 80070ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007118 <pvPortMalloc+0x18c>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007120 <pvPortMalloc+0x194>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d203      	bcs.n	80070c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070ba:	4b17      	ldr	r3, [pc, #92]	@ (8007118 <pvPortMalloc+0x18c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a18      	ldr	r2, [pc, #96]	@ (8007120 <pvPortMalloc+0x194>)
 80070c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4b13      	ldr	r3, [pc, #76]	@ (8007114 <pvPortMalloc+0x188>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80070d6:	4b13      	ldr	r3, [pc, #76]	@ (8007124 <pvPortMalloc+0x198>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	4a11      	ldr	r2, [pc, #68]	@ (8007124 <pvPortMalloc+0x198>)
 80070de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070e0:	f7fe fc00 	bl	80058e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00b      	beq.n	8007106 <pvPortMalloc+0x17a>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	60fb      	str	r3, [r7, #12]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <pvPortMalloc+0x176>
	return pvReturn;
 8007106:	69fb      	ldr	r3, [r7, #28]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3728      	adds	r7, #40	@ 0x28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20001e10 	.word	0x20001e10
 8007114:	20001e24 	.word	0x20001e24
 8007118:	20001e14 	.word	0x20001e14
 800711c:	20001e08 	.word	0x20001e08
 8007120:	20001e18 	.word	0x20001e18
 8007124:	20001e1c 	.word	0x20001e1c

08007128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d04f      	beq.n	80071da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800713a:	2308      	movs	r3, #8
 800713c:	425b      	negs	r3, r3
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4413      	add	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	4b25      	ldr	r3, [pc, #148]	@ (80071e4 <vPortFree+0xbc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4013      	ands	r3, r2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10b      	bne.n	800716e <vPortFree+0x46>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60fb      	str	r3, [r7, #12]
}
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	e7fd      	b.n	800716a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <vPortFree+0x66>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	60bb      	str	r3, [r7, #8]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	4b14      	ldr	r3, [pc, #80]	@ (80071e4 <vPortFree+0xbc>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4013      	ands	r3, r2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01e      	beq.n	80071da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d11a      	bne.n	80071da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	4b0e      	ldr	r3, [pc, #56]	@ (80071e4 <vPortFree+0xbc>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	43db      	mvns	r3, r3
 80071ae:	401a      	ands	r2, r3
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071b4:	f7fe fb88 	bl	80058c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	4b0a      	ldr	r3, [pc, #40]	@ (80071e8 <vPortFree+0xc0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4413      	add	r3, r2
 80071c2:	4a09      	ldr	r2, [pc, #36]	@ (80071e8 <vPortFree+0xc0>)
 80071c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071c6:	6938      	ldr	r0, [r7, #16]
 80071c8:	f000 f874 	bl	80072b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80071cc:	4b07      	ldr	r3, [pc, #28]	@ (80071ec <vPortFree+0xc4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3301      	adds	r3, #1
 80071d2:	4a06      	ldr	r2, [pc, #24]	@ (80071ec <vPortFree+0xc4>)
 80071d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80071d6:	f7fe fb85 	bl	80058e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071da:	bf00      	nop
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20001e24 	.word	0x20001e24
 80071e8:	20001e14 	.word	0x20001e14
 80071ec:	20001e20 	.word	0x20001e20

080071f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071f6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80071fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071fc:	4b27      	ldr	r3, [pc, #156]	@ (800729c <prvHeapInit+0xac>)
 80071fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00c      	beq.n	8007224 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3307      	adds	r3, #7
 800720e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0307 	bic.w	r3, r3, #7
 8007216:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	4a1f      	ldr	r2, [pc, #124]	@ (800729c <prvHeapInit+0xac>)
 8007220:	4413      	add	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007228:	4a1d      	ldr	r2, [pc, #116]	@ (80072a0 <prvHeapInit+0xb0>)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800722e:	4b1c      	ldr	r3, [pc, #112]	@ (80072a0 <prvHeapInit+0xb0>)
 8007230:	2200      	movs	r2, #0
 8007232:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	4413      	add	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800723c:	2208      	movs	r2, #8
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4a15      	ldr	r2, [pc, #84]	@ (80072a4 <prvHeapInit+0xb4>)
 8007250:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007252:	4b14      	ldr	r3, [pc, #80]	@ (80072a4 <prvHeapInit+0xb4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800725a:	4b12      	ldr	r3, [pc, #72]	@ (80072a4 <prvHeapInit+0xb4>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <prvHeapInit+0xb4>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4a0a      	ldr	r2, [pc, #40]	@ (80072a8 <prvHeapInit+0xb8>)
 800727e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	4a09      	ldr	r2, [pc, #36]	@ (80072ac <prvHeapInit+0xbc>)
 8007286:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007288:	4b09      	ldr	r3, [pc, #36]	@ (80072b0 <prvHeapInit+0xc0>)
 800728a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800728e:	601a      	str	r2, [r3, #0]
}
 8007290:	bf00      	nop
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	20001208 	.word	0x20001208
 80072a0:	20001e08 	.word	0x20001e08
 80072a4:	20001e10 	.word	0x20001e10
 80072a8:	20001e18 	.word	0x20001e18
 80072ac:	20001e14 	.word	0x20001e14
 80072b0:	20001e24 	.word	0x20001e24

080072b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072bc:	4b28      	ldr	r3, [pc, #160]	@ (8007360 <prvInsertBlockIntoFreeList+0xac>)
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e002      	b.n	80072c8 <prvInsertBlockIntoFreeList+0x14>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d8f7      	bhi.n	80072c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	4413      	add	r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d108      	bne.n	80072f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	441a      	add	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	441a      	add	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d118      	bne.n	800733c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4b15      	ldr	r3, [pc, #84]	@ (8007364 <prvInsertBlockIntoFreeList+0xb0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d00d      	beq.n	8007332 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	441a      	add	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	e008      	b.n	8007344 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007332:	4b0c      	ldr	r3, [pc, #48]	@ (8007364 <prvInsertBlockIntoFreeList+0xb0>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	e003      	b.n	8007344 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d002      	beq.n	8007352 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20001e08 	.word	0x20001e08
 8007364:	20001e10 	.word	0x20001e10

08007368 <memset>:
 8007368:	4402      	add	r2, r0
 800736a:	4603      	mov	r3, r0
 800736c:	4293      	cmp	r3, r2
 800736e:	d100      	bne.n	8007372 <memset+0xa>
 8007370:	4770      	bx	lr
 8007372:	f803 1b01 	strb.w	r1, [r3], #1
 8007376:	e7f9      	b.n	800736c <memset+0x4>

08007378 <__libc_init_array>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	4d0d      	ldr	r5, [pc, #52]	@ (80073b0 <__libc_init_array+0x38>)
 800737c:	4c0d      	ldr	r4, [pc, #52]	@ (80073b4 <__libc_init_array+0x3c>)
 800737e:	1b64      	subs	r4, r4, r5
 8007380:	10a4      	asrs	r4, r4, #2
 8007382:	2600      	movs	r6, #0
 8007384:	42a6      	cmp	r6, r4
 8007386:	d109      	bne.n	800739c <__libc_init_array+0x24>
 8007388:	4d0b      	ldr	r5, [pc, #44]	@ (80073b8 <__libc_init_array+0x40>)
 800738a:	4c0c      	ldr	r4, [pc, #48]	@ (80073bc <__libc_init_array+0x44>)
 800738c:	f000 f826 	bl	80073dc <_init>
 8007390:	1b64      	subs	r4, r4, r5
 8007392:	10a4      	asrs	r4, r4, #2
 8007394:	2600      	movs	r6, #0
 8007396:	42a6      	cmp	r6, r4
 8007398:	d105      	bne.n	80073a6 <__libc_init_array+0x2e>
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a0:	4798      	blx	r3
 80073a2:	3601      	adds	r6, #1
 80073a4:	e7ee      	b.n	8007384 <__libc_init_array+0xc>
 80073a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073aa:	4798      	blx	r3
 80073ac:	3601      	adds	r6, #1
 80073ae:	e7f2      	b.n	8007396 <__libc_init_array+0x1e>
 80073b0:	0800748c 	.word	0x0800748c
 80073b4:	0800748c 	.word	0x0800748c
 80073b8:	0800748c 	.word	0x0800748c
 80073bc:	08007490 	.word	0x08007490

080073c0 <memcpy>:
 80073c0:	440a      	add	r2, r1
 80073c2:	4291      	cmp	r1, r2
 80073c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073c8:	d100      	bne.n	80073cc <memcpy+0xc>
 80073ca:	4770      	bx	lr
 80073cc:	b510      	push	{r4, lr}
 80073ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073d6:	4291      	cmp	r1, r2
 80073d8:	d1f9      	bne.n	80073ce <memcpy+0xe>
 80073da:	bd10      	pop	{r4, pc}

080073dc <_init>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr

080073e8 <_fini>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr
