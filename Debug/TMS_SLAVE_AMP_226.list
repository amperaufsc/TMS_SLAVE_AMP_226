
TMS_SLAVE_AMP_226.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007054  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007234  08007234  00008234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c8  080072c8  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080072c8  080072c8  00009010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080072c8  080072c8  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c8  080072c8  000082c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072cc  080072cc  000082cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080072d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e18  20000010  080072e0  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e28  080072e0  00009e28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160c8  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003527  00000000  00000000  0001f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00022630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f39  00000000  00000000  00023a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022199  00000000  00000000  00024989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015855  00000000  00000000  00046b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd009  00000000  00000000  0005c377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053dc  00000000  00000000  001393c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0013e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800721c 	.word	0x0800721c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800721c 	.word	0x0800721c

08000220 <initializeHistory>:

float convertVoltageToTemperature(float voltage){
	return C0 + C1 * voltage + C2 * pow(voltage, 2) + C3 * pow(voltage, 3) + C4 *pow(voltage, 4);
}

void initializeHistory(){
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
	for (int i = 0; i < numberOfThermistors; i++){
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e024      	b.n	8000276 <initializeHistory+0x56>
		for(int j = 0; j < windowSize; j++){
 800022c:	2300      	movs	r3, #0
 800022e:	603b      	str	r3, [r7, #0]
 8000230:	e00f      	b.n	8000252 <initializeHistory+0x32>
			readingsHistory[i][j] = 0;
 8000232:	4916      	ldr	r1, [pc, #88]	@ (800028c <initializeHistory+0x6c>)
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4613      	mov	r3, r2
 8000238:	009b      	lsls	r3, r3, #2
 800023a:	4413      	add	r3, r2
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	683a      	ldr	r2, [r7, #0]
 8000240:	4413      	add	r3, r2
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	440b      	add	r3, r1
 8000246:	f04f 0200 	mov.w	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < windowSize; j++){
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	3301      	adds	r3, #1
 8000250:	603b      	str	r3, [r7, #0]
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	2b09      	cmp	r3, #9
 8000256:	ddec      	ble.n	8000232 <initializeHistory+0x12>
		}
		filteredReadings[i] = 0;
 8000258:	4a0d      	ldr	r2, [pc, #52]	@ (8000290 <initializeHistory+0x70>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	4413      	add	r3, r2
 8000260:	f04f 0200 	mov.w	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
		validReadingsCount[i] = 0;
 8000266:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <initializeHistory+0x74>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2100      	movs	r1, #0
 800026c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < numberOfThermistors; i++){
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3301      	adds	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b0f      	cmp	r3, #15
 800027a:	ddd7      	ble.n	800022c <initializeHistory+0xc>
	}
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	2000002c 	.word	0x2000002c
 8000290:	200002ac 	.word	0x200002ac
 8000294:	200002ec 	.word	0x200002ec

08000298 <sendTemperatureToMaster0>:

extern FDCAN_HandleTypeDef hfdcan1;
uint8_t FDCAN1TxData[8];
FDCAN_TxHeaderTypeDef FDCAN1TxHeader;

void sendTemperatureToMaster0(float buffer[]){
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <sendTemperatureToMaster0+0x3c>)
 80002a2:	2208      	movs	r2, #8
 80002a4:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst0;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <sendTemperatureToMaster0+0x3c>)
 80002a8:	2210      	movs	r2, #16
 80002aa:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <sendTemperatureToMaster0+0x40>)
 80002b4:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	3304      	adds	r3, #4
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	461a      	mov	r2, r3
 80002be:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <sendTemperatureToMaster0+0x40>)
 80002c0:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 80002c2:	4a05      	ldr	r2, [pc, #20]	@ (80002d8 <sendTemperatureToMaster0+0x40>)
 80002c4:	4903      	ldr	r1, [pc, #12]	@ (80002d4 <sendTemperatureToMaster0+0x3c>)
 80002c6:	4805      	ldr	r0, [pc, #20]	@ (80002dc <sendTemperatureToMaster0+0x44>)
 80002c8:	f002 fd60 	bl	8002d8c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000334 	.word	0x20000334
 80002d8:	2000032c 	.word	0x2000032c
 80002dc:	20000424 	.word	0x20000424

080002e0 <sendTemperatureToMaster1>:

void sendTemperatureToMaster1(float buffer[]){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <sendTemperatureToMaster1+0x3c>)
 80002ea:	2208      	movs	r2, #8
 80002ec:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst1;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <sendTemperatureToMaster1+0x3c>)
 80002f0:	2211      	movs	r2, #17
 80002f2:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <sendTemperatureToMaster1+0x40>)
 80002fc:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3304      	adds	r3, #4
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <sendTemperatureToMaster1+0x40>)
 8000308:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 800030a:	4a05      	ldr	r2, [pc, #20]	@ (8000320 <sendTemperatureToMaster1+0x40>)
 800030c:	4903      	ldr	r1, [pc, #12]	@ (800031c <sendTemperatureToMaster1+0x3c>)
 800030e:	4805      	ldr	r0, [pc, #20]	@ (8000324 <sendTemperatureToMaster1+0x44>)
 8000310:	f002 fd3c 	bl	8002d8c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000334 	.word	0x20000334
 8000320:	2000032c 	.word	0x2000032c
 8000324:	20000424 	.word	0x20000424

08000328 <sendTemperatureToMaster2>:

void sendTemperatureToMaster2(float buffer[]){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <sendTemperatureToMaster2+0x3c>)
 8000332:	2208      	movs	r2, #8
 8000334:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst2;
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <sendTemperatureToMaster2+0x3c>)
 8000338:	2212      	movs	r2, #18
 800033a:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	461a      	mov	r2, r3
 8000342:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <sendTemperatureToMaster2+0x40>)
 8000344:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3304      	adds	r3, #4
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <sendTemperatureToMaster2+0x40>)
 8000350:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 8000352:	4a05      	ldr	r2, [pc, #20]	@ (8000368 <sendTemperatureToMaster2+0x40>)
 8000354:	4903      	ldr	r1, [pc, #12]	@ (8000364 <sendTemperatureToMaster2+0x3c>)
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <sendTemperatureToMaster2+0x44>)
 8000358:	f002 fd18 	bl	8002d8c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000334 	.word	0x20000334
 8000368:	2000032c 	.word	0x2000032c
 800036c:	20000424 	.word	0x20000424

08000370 <sendTemperatureToMaster3>:

void sendTemperatureToMaster3(float buffer[]){
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <sendTemperatureToMaster3+0x3c>)
 800037a:	2208      	movs	r2, #8
 800037c:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst3;
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <sendTemperatureToMaster3+0x3c>)
 8000380:	2213      	movs	r2, #19
 8000382:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	461a      	mov	r2, r3
 800038a:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <sendTemperatureToMaster3+0x40>)
 800038c:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3304      	adds	r3, #4
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	461a      	mov	r2, r3
 8000396:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <sendTemperatureToMaster3+0x40>)
 8000398:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 800039a:	4a05      	ldr	r2, [pc, #20]	@ (80003b0 <sendTemperatureToMaster3+0x40>)
 800039c:	4903      	ldr	r1, [pc, #12]	@ (80003ac <sendTemperatureToMaster3+0x3c>)
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <sendTemperatureToMaster3+0x44>)
 80003a0:	f002 fcf4 	bl	8002d8c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000334 	.word	0x20000334
 80003b0:	2000032c 	.word	0x2000032c
 80003b4:	20000424 	.word	0x20000424

080003b8 <sendTemperatureToMaster4>:

void sendTemperatureToMaster4(float buffer[]){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <sendTemperatureToMaster4+0x3c>)
 80003c2:	2208      	movs	r2, #8
 80003c4:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst4;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <sendTemperatureToMaster4+0x3c>)
 80003c8:	2214      	movs	r2, #20
 80003ca:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <sendTemperatureToMaster4+0x40>)
 80003d4:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3304      	adds	r3, #4
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	461a      	mov	r2, r3
 80003de:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <sendTemperatureToMaster4+0x40>)
 80003e0:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 80003e2:	4a05      	ldr	r2, [pc, #20]	@ (80003f8 <sendTemperatureToMaster4+0x40>)
 80003e4:	4903      	ldr	r1, [pc, #12]	@ (80003f4 <sendTemperatureToMaster4+0x3c>)
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <sendTemperatureToMaster4+0x44>)
 80003e8:	f002 fcd0 	bl	8002d8c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000334 	.word	0x20000334
 80003f8:	2000032c 	.word	0x2000032c
 80003fc:	20000424 	.word	0x20000424

08000400 <sendTemperatureToMaster5>:

void sendTemperatureToMaster5(float buffer[]){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000408:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <sendTemperatureToMaster5+0x3c>)
 800040a:	2208      	movs	r2, #8
 800040c:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst5;
 800040e:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <sendTemperatureToMaster5+0x3c>)
 8000410:	2215      	movs	r2, #21
 8000412:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <sendTemperatureToMaster5+0x40>)
 800041c:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	3304      	adds	r3, #4
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <sendTemperatureToMaster5+0x40>)
 8000428:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 800042a:	4a05      	ldr	r2, [pc, #20]	@ (8000440 <sendTemperatureToMaster5+0x40>)
 800042c:	4903      	ldr	r1, [pc, #12]	@ (800043c <sendTemperatureToMaster5+0x3c>)
 800042e:	4805      	ldr	r0, [pc, #20]	@ (8000444 <sendTemperatureToMaster5+0x44>)
 8000430:	f002 fcac 	bl	8002d8c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000334 	.word	0x20000334
 8000440:	2000032c 	.word	0x2000032c
 8000444:	20000424 	.word	0x20000424

08000448 <sendTemperatureToMaster6>:

void sendTemperatureToMaster6(float buffer[]){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <sendTemperatureToMaster6+0x3c>)
 8000452:	2208      	movs	r2, #8
 8000454:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst6;
 8000456:	4b0b      	ldr	r3, [pc, #44]	@ (8000484 <sendTemperatureToMaster6+0x3c>)
 8000458:	2216      	movs	r2, #22
 800045a:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	461a      	mov	r2, r3
 8000462:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <sendTemperatureToMaster6+0x40>)
 8000464:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3304      	adds	r3, #4
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	461a      	mov	r2, r3
 800046e:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <sendTemperatureToMaster6+0x40>)
 8000470:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 8000472:	4a05      	ldr	r2, [pc, #20]	@ (8000488 <sendTemperatureToMaster6+0x40>)
 8000474:	4903      	ldr	r1, [pc, #12]	@ (8000484 <sendTemperatureToMaster6+0x3c>)
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <sendTemperatureToMaster6+0x44>)
 8000478:	f002 fc88 	bl	8002d8c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000334 	.word	0x20000334
 8000488:	2000032c 	.word	0x2000032c
 800048c:	20000424 	.word	0x20000424

08000490 <sendTemperatureToMaster7>:

void sendTemperatureToMaster7(float buffer[]){
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <sendTemperatureToMaster7+0x3c>)
 800049a:	2208      	movs	r2, #8
 800049c:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst7;
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <sendTemperatureToMaster7+0x3c>)
 80004a0:	2217      	movs	r2, #23
 80004a2:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <sendTemperatureToMaster7+0x40>)
 80004ac:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3304      	adds	r3, #4
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <sendTemperatureToMaster7+0x40>)
 80004b8:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 80004ba:	4a05      	ldr	r2, [pc, #20]	@ (80004d0 <sendTemperatureToMaster7+0x40>)
 80004bc:	4903      	ldr	r1, [pc, #12]	@ (80004cc <sendTemperatureToMaster7+0x3c>)
 80004be:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <sendTemperatureToMaster7+0x44>)
 80004c0:	f002 fc64 	bl	8002d8c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000334 	.word	0x20000334
 80004d0:	2000032c 	.word	0x2000032c
 80004d4:	20000424 	.word	0x20000424

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fce1 	bl	8000ea2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f82c 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fa56 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 fa2a 	bl	8000940 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80004ec:	f000 f9da 	bl	80008a4 <MX_FDCAN1_Init>
  MX_ADC2_Init();
 80004f0:	f000 f870 	bl	80005d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  initializeHistory();
 80004f4:	f7ff fe94 	bl	8000220 <initializeHistory>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f003 ffec 	bl	80044d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readTemp */
  readTempHandle = osThreadNew(readTempFunction, NULL, &readTemp_attributes);
 80004fc:	4a09      	ldr	r2, [pc, #36]	@ (8000524 <main+0x4c>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4809      	ldr	r0, [pc, #36]	@ (8000528 <main+0x50>)
 8000502:	f004 f831 	bl	8004568 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a08      	ldr	r2, [pc, #32]	@ (800052c <main+0x54>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of sendCAN */
  sendCANHandle = osThreadNew(sendCANFunction, NULL, &sendCAN_attributes);
 800050c:	4a08      	ldr	r2, [pc, #32]	@ (8000530 <main+0x58>)
 800050e:	2100      	movs	r1, #0
 8000510:	4808      	ldr	r0, [pc, #32]	@ (8000534 <main+0x5c>)
 8000512:	f004 f829 	bl	8004568 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <main+0x60>)
 800051a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051c:	f003 fffe 	bl	800451c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0x48>
 8000524:	08007260 	.word	0x08007260
 8000528:	08000a51 	.word	0x08000a51
 800052c:	20000488 	.word	0x20000488
 8000530:	08007284 	.word	0x08007284
 8000534:	08000a7d 	.word	0x08000a7d
 8000538:	2000048c 	.word	0x2000048c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2238      	movs	r2, #56	@ 0x38
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 fe2c 	bl	80071a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800055e:	2000      	movs	r0, #0
 8000560:	f002 ff9e 	bl	80034a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2340      	movs	r3, #64	@ 0x40
 8000570:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800057a:	2304      	movs	r3, #4
 800057c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800057e:	2355      	movs	r3, #85	@ 0x55
 8000580:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f838 	bl	8003608 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800059e:	f000 fab5 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2104      	movs	r1, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fb36 	bl	8003c2c <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005c6:	f000 faa1 	bl	8000b0c <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	@ 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2220      	movs	r2, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f006 fde1 	bl	80071a8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005e6:	4b9c      	ldr	r3, [pc, #624]	@ (8000858 <MX_ADC2_Init+0x284>)
 80005e8:	4a9c      	ldr	r2, [pc, #624]	@ (800085c <MX_ADC2_Init+0x288>)
 80005ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ec:	4b9a      	ldr	r3, [pc, #616]	@ (8000858 <MX_ADC2_Init+0x284>)
 80005ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005f4:	4b98      	ldr	r3, [pc, #608]	@ (8000858 <MX_ADC2_Init+0x284>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b97      	ldr	r3, [pc, #604]	@ (8000858 <MX_ADC2_Init+0x284>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000600:	4b95      	ldr	r3, [pc, #596]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000606:	4b94      	ldr	r3, [pc, #592]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000608:	2201      	movs	r2, #1
 800060a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b92      	ldr	r3, [pc, #584]	@ (8000858 <MX_ADC2_Init+0x284>)
 800060e:	2204      	movs	r2, #4
 8000610:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000612:	4b91      	ldr	r3, [pc, #580]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000614:	2200      	movs	r2, #0
 8000616:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000618:	4b8f      	ldr	r3, [pc, #572]	@ (8000858 <MX_ADC2_Init+0x284>)
 800061a:	2201      	movs	r2, #1
 800061c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 16;
 800061e:	4b8e      	ldr	r3, [pc, #568]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000620:	2210      	movs	r2, #16
 8000622:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b8c      	ldr	r3, [pc, #560]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b8a      	ldr	r3, [pc, #552]	@ (8000858 <MX_ADC2_Init+0x284>)
 800062e:	2200      	movs	r2, #0
 8000630:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000632:	4b89      	ldr	r3, [pc, #548]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000634:	2200      	movs	r2, #0
 8000636:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000638:	4b87      	ldr	r3, [pc, #540]	@ (8000858 <MX_ADC2_Init+0x284>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000640:	4b85      	ldr	r3, [pc, #532]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000642:	2200      	movs	r2, #0
 8000644:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000646:	4b84      	ldr	r3, [pc, #528]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800064e:	4882      	ldr	r0, [pc, #520]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000650:	f000 feb6 	bl	80013c0 <HAL_ADC_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800065a:	f000 fa57 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800065e:	4b80      	ldr	r3, [pc, #512]	@ (8000860 <MX_ADC2_Init+0x28c>)
 8000660:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000662:	2306      	movs	r3, #6
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000666:	2307      	movs	r3, #7
 8000668:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066a:	237f      	movs	r3, #127	@ 0x7f
 800066c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800066e:	2304      	movs	r3, #4
 8000670:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	4619      	mov	r1, r3
 800067a:	4877      	ldr	r0, [pc, #476]	@ (8000858 <MX_ADC2_Init+0x284>)
 800067c:	f001 f92c 	bl	80018d8 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000686:	f000 fa41 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800068a:	4b76      	ldr	r3, [pc, #472]	@ (8000864 <MX_ADC2_Init+0x290>)
 800068c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800068e:	230c      	movs	r3, #12
 8000690:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4619      	mov	r1, r3
 8000696:	4870      	ldr	r0, [pc, #448]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000698:	f001 f91e 	bl	80018d8 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80006a2:	f000 fa33 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a6:	4b70      	ldr	r3, [pc, #448]	@ (8000868 <MX_ADC2_Init+0x294>)
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006aa:	2312      	movs	r3, #18
 80006ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4869      	ldr	r0, [pc, #420]	@ (8000858 <MX_ADC2_Init+0x284>)
 80006b4:	f001 f910 	bl	80018d8 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80006be:	f000 fa25 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c2:	4b6a      	ldr	r3, [pc, #424]	@ (800086c <MX_ADC2_Init+0x298>)
 80006c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006c6:	2318      	movs	r3, #24
 80006c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	4619      	mov	r1, r3
 80006ce:	4862      	ldr	r0, [pc, #392]	@ (8000858 <MX_ADC2_Init+0x284>)
 80006d0:	f001 f902 	bl	80018d8 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80006da:	f000 fa17 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006de:	4b64      	ldr	r3, [pc, #400]	@ (8000870 <MX_ADC2_Init+0x29c>)
 80006e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	485a      	ldr	r0, [pc, #360]	@ (8000858 <MX_ADC2_Init+0x284>)
 80006ee:	f001 f8f3 	bl	80018d8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80006f8:	f000 fa08 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006fc:	4b5d      	ldr	r3, [pc, #372]	@ (8000874 <MX_ADC2_Init+0x2a0>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000700:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000704:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4853      	ldr	r0, [pc, #332]	@ (8000858 <MX_ADC2_Init+0x284>)
 800070c:	f001 f8e4 	bl	80018d8 <HAL_ADC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 8000716:	f000 f9f9 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800071a:	4b57      	ldr	r3, [pc, #348]	@ (8000878 <MX_ADC2_Init+0x2a4>)
 800071c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800071e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	484b      	ldr	r0, [pc, #300]	@ (8000858 <MX_ADC2_Init+0x284>)
 800072a:	f001 f8d5 	bl	80018d8 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 8000734:	f000 f9ea 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000738:	4b50      	ldr	r3, [pc, #320]	@ (800087c <MX_ADC2_Init+0x2a8>)
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800073c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000740:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4844      	ldr	r0, [pc, #272]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000748:	f001 f8c6 	bl	80018d8 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 8000752:	f000 f9db 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000756:	4b4a      	ldr	r3, [pc, #296]	@ (8000880 <MX_ADC2_Init+0x2ac>)
 8000758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800075a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800075e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	483c      	ldr	r0, [pc, #240]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000766:	f001 f8b7 	bl	80018d8 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC2_Init+0x1a0>
  {
    Error_Handler();
 8000770:	f000 f9cc 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000774:	4b43      	ldr	r3, [pc, #268]	@ (8000884 <MX_ADC2_Init+0x2b0>)
 8000776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800077c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4835      	ldr	r0, [pc, #212]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000784:	f001 f8a8 	bl	80018d8 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0x1be>
  {
    Error_Handler();
 800078e:	f000 f9bd 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000792:	4b3d      	ldr	r3, [pc, #244]	@ (8000888 <MX_ADC2_Init+0x2b4>)
 8000794:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000796:	f240 2306 	movw	r3, #518	@ 0x206
 800079a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	482d      	ldr	r0, [pc, #180]	@ (8000858 <MX_ADC2_Init+0x284>)
 80007a2:	f001 f899 	bl	80018d8 <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC2_Init+0x1dc>
  {
    Error_Handler();
 80007ac:	f000 f9ae 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <MX_ADC2_Init+0x2b8>)
 80007b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80007b4:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80007b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4826      	ldr	r0, [pc, #152]	@ (8000858 <MX_ADC2_Init+0x284>)
 80007c0:	f001 f88a 	bl	80018d8 <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC2_Init+0x1fa>
  {
    Error_Handler();
 80007ca:	f000 f99f 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007ce:	4b30      	ldr	r3, [pc, #192]	@ (8000890 <MX_ADC2_Init+0x2bc>)
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80007d2:	f240 2312 	movw	r3, #530	@ 0x212
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	481e      	ldr	r0, [pc, #120]	@ (8000858 <MX_ADC2_Init+0x284>)
 80007de:	f001 f87b 	bl	80018d8 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC2_Init+0x218>
  {
    Error_Handler();
 80007e8:	f000 f990 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007ec:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <MX_ADC2_Init+0x2c0>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80007f0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80007f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	4619      	mov	r1, r3
 80007fa:	4817      	ldr	r0, [pc, #92]	@ (8000858 <MX_ADC2_Init+0x284>)
 80007fc:	f001 f86c 	bl	80018d8 <HAL_ADC_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC2_Init+0x236>
  {
    Error_Handler();
 8000806:	f000 f981 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800080a:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <MX_ADC2_Init+0x2c4>)
 800080c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800080e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	480f      	ldr	r0, [pc, #60]	@ (8000858 <MX_ADC2_Init+0x284>)
 800081a:	f001 f85d 	bl	80018d8 <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC2_Init+0x254>
  {
    Error_Handler();
 8000824:	f000 f972 	bl	8000b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000828:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_ADC2_Init+0x2c8>)
 800082a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 800082c:	f240 3306 	movw	r3, #774	@ 0x306
 8000830:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	4808      	ldr	r0, [pc, #32]	@ (8000858 <MX_ADC2_Init+0x284>)
 8000838:	f001 f84e 	bl	80018d8 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC2_Init+0x272>
  {
    Error_Handler();
 8000842:	f000 f963 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) rawAdcBuffer, numberOfThermistors);
 8000846:	2210      	movs	r2, #16
 8000848:	4915      	ldr	r1, [pc, #84]	@ (80008a0 <MX_ADC2_Init+0x2cc>)
 800084a:	4803      	ldr	r0, [pc, #12]	@ (8000858 <MX_ADC2_Init+0x284>)
 800084c:	f000 ff66 	bl	800171c <HAL_ADC_Start_DMA>
  /* USER CODE END ADC2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000358 	.word	0x20000358
 800085c:	50000100 	.word	0x50000100
 8000860:	04300002 	.word	0x04300002
 8000864:	08600004 	.word	0x08600004
 8000868:	0c900008 	.word	0x0c900008
 800086c:	10c00010 	.word	0x10c00010
 8000870:	14f00020 	.word	0x14f00020
 8000874:	19200040 	.word	0x19200040
 8000878:	1d500080 	.word	0x1d500080
 800087c:	21800100 	.word	0x21800100
 8000880:	25b00200 	.word	0x25b00200
 8000884:	2a000400 	.word	0x2a000400
 8000888:	2e300800 	.word	0x2e300800
 800088c:	32601000 	.word	0x32601000
 8000890:	36902000 	.word	0x36902000
 8000894:	3ac04000 	.word	0x3ac04000
 8000898:	3ef08000 	.word	0x3ef08000
 800089c:	47520000 	.word	0x47520000
 80008a0:	20000490 	.word	0x20000490

080008a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80008a8:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008aa:	4a24      	ldr	r2, [pc, #144]	@ (800093c <MX_FDCAN1_Init+0x98>)
 80008ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008b4:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008d4:	220a      	movs	r2, #10
 80008d6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008da:	2201      	movs	r2, #1
 80008dc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008e0:	2216      	movs	r2, #22
 80008e2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008e6:	220b      	movs	r2, #11
 80008e8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 80008fe:	2201      	movs	r2, #1
 8000900:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000914:	4808      	ldr	r0, [pc, #32]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 8000916:	f002 f8b7 	bl	8002a88 <HAL_FDCAN_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000920:	f000 f8f4 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2101      	movs	r1, #1
 8000928:	4803      	ldr	r0, [pc, #12]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 800092a:	f002 fa73 	bl	8002e14 <HAL_FDCAN_ActivateNotification>
  HAL_FDCAN_Start(&hfdcan1);
 800092e:	4802      	ldr	r0, [pc, #8]	@ (8000938 <MX_FDCAN1_Init+0x94>)
 8000930:	f002 fa04 	bl	8002d3c <HAL_FDCAN_Start>
  /* USER CODE END FDCAN1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000424 	.word	0x20000424
 800093c:	40006400 	.word	0x40006400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_DMA_Init+0x50>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094a:	4a11      	ldr	r2, [pc, #68]	@ (8000990 <MX_DMA_Init+0x50>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6493      	str	r3, [r2, #72]	@ 0x48
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_DMA_Init+0x50>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_DMA_Init+0x50>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000962:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <MX_DMA_Init+0x50>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6493      	str	r3, [r2, #72]	@ 0x48
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_DMA_Init+0x50>)
 800096c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2105      	movs	r1, #5
 800097a:	200b      	movs	r0, #11
 800097c:	f001 fddd 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000980:	200b      	movs	r0, #11
 8000982:	f001 fdf4 	bl	800256e <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_GPIO_Init+0x74>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4a1a      	ldr	r2, [pc, #104]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a14      	ldr	r2, [pc, #80]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_GPIO_Init+0x74>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(readTempHandle, &xHigherPriorityTaskWoken);
 8000a18:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f107 020c 	add.w	r2, r7, #12
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 fb40 	bl	80060a8 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <HAL_ADC_ConvCpltCallback+0x32>
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <HAL_ADC_ConvCpltCallback+0x40>)
 8000a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	f3bf 8f4f 	dsb	sy
 8000a3a:	f3bf 8f6f 	isb	sy
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000488 	.word	0x20000488
 8000a4c:	e000ed04 	.word	0xe000ed04

08000a50 <readTempFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readTempFunction */
void readTempFunction(void *argument)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	readTempHandle = xTaskGetCurrentTaskHandle();
 8000a58:	f005 fa40 	bl	8005edc <xTaskGetCurrentTaskHandle>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <readTempFunction+0x28>)
 8000a60:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000a62:	f04f 31ff 	mov.w	r1, #4294967295
 8000a66:	2001      	movs	r0, #1
 8000a68:	f005 fad6 	bl	8006018 <ulTaskNotifyTake>
	  osDelay(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f003 fe0d 	bl	800468c <osDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000a72:	bf00      	nop
 8000a74:	e7f5      	b.n	8000a62 <readTempFunction+0x12>
 8000a76:	bf00      	nop
 8000a78:	20000488 	.word	0x20000488

08000a7c <sendCANFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendCANFunction */
void sendCANFunction(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  static int burst = 0;

	  if (burst%3 == 0){
 8000a84:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <sendCANFunction+0x84>)
 8000a86:	6819      	ldr	r1, [r3, #0]
 8000a88:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <sendCANFunction+0x88>)
 8000a8a:	fb83 3201 	smull	r3, r2, r3, r1
 8000a8e:	17cb      	asrs	r3, r1, #31
 8000a90:	1ad2      	subs	r2, r2, r3
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	1aca      	subs	r2, r1, r3
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d109      	bne.n	8000ab2 <sendCANFunction+0x36>
		  sendTemperatureToMaster0(filteredReadings);
 8000a9e:	481a      	ldr	r0, [pc, #104]	@ (8000b08 <sendCANFunction+0x8c>)
 8000aa0:	f7ff fbfa 	bl	8000298 <sendTemperatureToMaster0>
		  sendTemperatureToMaster1(filteredReadings);
 8000aa4:	4818      	ldr	r0, [pc, #96]	@ (8000b08 <sendCANFunction+0x8c>)
 8000aa6:	f7ff fc1b 	bl	80002e0 <sendTemperatureToMaster1>
		  sendTemperatureToMaster2(filteredReadings);
 8000aaa:	4817      	ldr	r0, [pc, #92]	@ (8000b08 <sendCANFunction+0x8c>)
 8000aac:	f7ff fc3c 	bl	8000328 <sendTemperatureToMaster2>
 8000ab0:	e01c      	b.n	8000aec <sendCANFunction+0x70>
	  }

	  else if (burst%3 == 1){
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <sendCANFunction+0x84>)
 8000ab4:	6819      	ldr	r1, [r3, #0]
 8000ab6:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <sendCANFunction+0x88>)
 8000ab8:	fb83 3201 	smull	r3, r2, r3, r1
 8000abc:	17cb      	asrs	r3, r1, #31
 8000abe:	1ad2      	subs	r2, r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	4413      	add	r3, r2
 8000ac6:	1aca      	subs	r2, r1, r3
 8000ac8:	2a01      	cmp	r2, #1
 8000aca:	d109      	bne.n	8000ae0 <sendCANFunction+0x64>
		  sendTemperatureToMaster3(filteredReadings);
 8000acc:	480e      	ldr	r0, [pc, #56]	@ (8000b08 <sendCANFunction+0x8c>)
 8000ace:	f7ff fc4f 	bl	8000370 <sendTemperatureToMaster3>
		  sendTemperatureToMaster4(filteredReadings);
 8000ad2:	480d      	ldr	r0, [pc, #52]	@ (8000b08 <sendCANFunction+0x8c>)
 8000ad4:	f7ff fc70 	bl	80003b8 <sendTemperatureToMaster4>
		  sendTemperatureToMaster5(filteredReadings);
 8000ad8:	480b      	ldr	r0, [pc, #44]	@ (8000b08 <sendCANFunction+0x8c>)
 8000ada:	f7ff fc91 	bl	8000400 <sendTemperatureToMaster5>
 8000ade:	e005      	b.n	8000aec <sendCANFunction+0x70>
	  }

	  else{
		  sendTemperatureToMaster6(filteredReadings);
 8000ae0:	4809      	ldr	r0, [pc, #36]	@ (8000b08 <sendCANFunction+0x8c>)
 8000ae2:	f7ff fcb1 	bl	8000448 <sendTemperatureToMaster6>
		  sendTemperatureToMaster7(filteredReadings);
 8000ae6:	4808      	ldr	r0, [pc, #32]	@ (8000b08 <sendCANFunction+0x8c>)
 8000ae8:	f7ff fcd2 	bl	8000490 <sendTemperatureToMaster7>
	  }

	  burst++;
 8000aec:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <sendCANFunction+0x84>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a03      	ldr	r2, [pc, #12]	@ (8000b00 <sendCANFunction+0x84>)
 8000af4:	6013      	str	r3, [r2, #0]
	  osDelay(100);
 8000af6:	2064      	movs	r0, #100	@ 0x64
 8000af8:	f003 fdc8 	bl	800468c <osDelay>
  {
 8000afc:	e7c2      	b.n	8000a84 <sendCANFunction+0x8>
 8000afe:	bf00      	nop
 8000b00:	200004d0 	.word	0x200004d0
 8000b04:	55555556 	.word	0x55555556
 8000b08:	200002ac 	.word	0x200002ac

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_MspInit+0x50>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b22:	4a11      	ldr	r2, [pc, #68]	@ (8000b68 <HAL_MspInit+0x50>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <HAL_MspInit+0x50>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <HAL_MspInit+0x50>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b68 <HAL_MspInit+0x50>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <HAL_MspInit+0x50>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	210f      	movs	r1, #15
 8000b52:	f06f 0001 	mvn.w	r0, #1
 8000b56:	f001 fcf0 	bl	800253a <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b5a:	f002 fd45 	bl	80035e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0a0      	sub	sp, #128	@ 0x80
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	2250      	movs	r2, #80	@ 0x50
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f006 fb0b 	bl	80071a8 <memset>
  if(hadc->Instance==ADC2)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a58      	ldr	r2, [pc, #352]	@ (8000cf8 <HAL_ADC_MspInit+0x18c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	f040 80a9 	bne.w	8000cf0 <HAL_ADC_MspInit+0x184>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ba4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 fa20 	bl	8003ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000bba:	f7ff ffa7 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bbe:	4b4f      	ldr	r3, [pc, #316]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	4a4e      	ldr	r2, [pc, #312]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000bc4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bca:	4b4c      	ldr	r3, [pc, #304]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd6:	4b49      	ldr	r3, [pc, #292]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	4a48      	ldr	r2, [pc, #288]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000bdc:	f043 0320 	orr.w	r3, r3, #32
 8000be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be2:	4b46      	ldr	r3, [pc, #280]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	f003 0320 	and.w	r3, r3, #32
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b43      	ldr	r3, [pc, #268]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	4a42      	ldr	r2, [pc, #264]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfa:	4b40      	ldr	r3, [pc, #256]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b3d      	ldr	r3, [pc, #244]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	4a3c      	ldr	r2, [pc, #240]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c12:	4b3a      	ldr	r3, [pc, #232]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b37      	ldr	r3, [pc, #220]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c22:	4a36      	ldr	r2, [pc, #216]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2a:	4b34      	ldr	r3, [pc, #208]	@ (8000cfc <HAL_ADC_MspInit+0x190>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ADC2_IN11
    PB2     ------> ADC2_IN12
    PB11     ------> ADC2_IN14
    PB15     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c36:	2302      	movs	r3, #2
 8000c38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c42:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c46:	4619      	mov	r1, r3
 8000c48:	482d      	ldr	r0, [pc, #180]	@ (8000d00 <HAL_ADC_MspInit+0x194>)
 8000c4a:	f002 faa7 	bl	800319c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c4e:	233f      	movs	r3, #63	@ 0x3f
 8000c50:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4828      	ldr	r0, [pc, #160]	@ (8000d04 <HAL_ADC_MspInit+0x198>)
 8000c62:	f002 fa9b 	bl	800319c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000c66:	23f3      	movs	r3, #243	@ 0xf3
 8000c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7c:	f002 fa8e 	bl	800319c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_15;
 8000c80:	f648 0304 	movw	r3, #34820	@ 0x8804
 8000c84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c86:	2303      	movs	r3, #3
 8000c88:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c92:	4619      	mov	r1, r3
 8000c94:	481c      	ldr	r0, [pc, #112]	@ (8000d08 <HAL_ADC_MspInit+0x19c>)
 8000c96:	f002 fa81 	bl	800319c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <HAL_ADC_MspInit+0x1a4>)
 8000c9e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000ca2:	2224      	movs	r2, #36	@ 0x24
 8000ca4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cac:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000cb4:	2280      	movs	r2, #128	@ 0x80
 8000cb6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cbe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000cc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cc6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000cca:	2220      	movs	r2, #32
 8000ccc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000cd4:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000cd6:	f001 fc65 	bl	80025a4 <HAL_DMA_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000ce0:	f7ff ff14 	bl	8000b0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000ce8:	655a      	str	r2, [r3, #84]	@ 0x54
 8000cea:	4a08      	ldr	r2, [pc, #32]	@ (8000d0c <HAL_ADC_MspInit+0x1a0>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3780      	adds	r7, #128	@ 0x80
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	50000100 	.word	0x50000100
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	48001400 	.word	0x48001400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	200003c4 	.word	0x200003c4
 8000d10:	40020008 	.word	0x40020008

08000d14 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b09e      	sub	sp, #120	@ 0x78
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2250      	movs	r2, #80	@ 0x50
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f006 fa37 	bl	80071a8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a20      	ldr	r2, [pc, #128]	@ (8000dc0 <HAL_FDCAN_MspInit+0xac>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d139      	bne.n	8000db8 <HAL_FDCAN_MspInit+0xa4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000d4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 f94d 	bl	8003ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d60:	f7ff fed4 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d64:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <HAL_FDCAN_MspInit+0xb0>)
 8000d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d68:	4a16      	ldr	r2, [pc, #88]	@ (8000dc4 <HAL_FDCAN_MspInit+0xb0>)
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <HAL_FDCAN_MspInit+0xb0>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_FDCAN_MspInit+0xb0>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d80:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <HAL_FDCAN_MspInit+0xb0>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d88:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_FDCAN_MspInit+0xb0>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d94:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d98:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000da6:	2309      	movs	r3, #9
 8000da8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db4:	f002 f9f2 	bl	800319c <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000db8:	bf00      	nop
 8000dba:	3778      	adds	r7, #120	@ 0x78
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40006400 	.word	0x40006400
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <NMI_Handler+0x4>

08000dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <MemManage_Handler+0x4>

08000de0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <UsageFault_Handler+0x4>

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 f8a1 	bl	8000f48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e06:	f005 f879 	bl	8005efc <xTaskGetSchedulerState>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d001      	beq.n	8000e14 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e10:	f005 ff4a 	bl	8006ca8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <DMA1_Channel1_IRQHandler+0x10>)
 8000e1e:	f001 fce4 	bl	80027ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200003c4 	.word	0x200003c4

08000e2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e50:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e54:	f7ff ffea 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	@ (8000e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <LoopForever+0xe>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	@ (8000e9c <LoopForever+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f006 f99b 	bl	80071b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e82:	f7ff fb29 	bl	80004d8 <main>

08000e86 <LoopForever>:

LoopForever:
    b LoopForever
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
  ldr   r0, =_estack
 8000e88:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e94:	080072d0 	.word	0x080072d0
  ldr r2, =_sbss
 8000e98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e9c:	20001e28 	.word	0x20001e28

08000ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_2_IRQHandler>

08000ea2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f001 fb39 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f80e 	bl	8000ed4 <HAL_InitTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e001      	b.n	8000ec8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec4:	f7ff fe28 	bl	8000b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <HAL_InitTick+0x68>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d022      	beq.n	8000f2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_InitTick+0x6c>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <HAL_InitTick+0x68>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fb44 	bl	800258a <HAL_SYSTICK_Config>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10f      	bne.n	8000f28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d809      	bhi.n	8000f22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	f04f 30ff 	mov.w	r0, #4294967295
 8000f16:	f001 fb10 	bl	800253a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <HAL_InitTick+0x70>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	e007      	b.n	8000f32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e004      	b.n	8000f32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e001      	b.n	8000f32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_IncTick+0x1c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_IncTick+0x20>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a03      	ldr	r2, [pc, #12]	@ (8000f64 <HAL_IncTick+0x1c>)
 8000f58:	6013      	str	r3, [r2, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	200004d4 	.word	0x200004d4
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200004d4 	.word	0x200004d4

08000f84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3360      	adds	r3, #96	@ 0x60
 8000ffe:	461a      	mov	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <LL_ADC_SetOffset+0x44>)
 800100e:	4013      	ands	r3, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	430a      	orrs	r2, r1
 800101a:	4313      	orrs	r3, r2
 800101c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001024:	bf00      	nop
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	03fff000 	.word	0x03fff000

08001034 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3360      	adds	r3, #96	@ 0x60
 8001042:	461a      	mov	r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3360      	adds	r3, #96	@ 0x60
 8001070:	461a      	mov	r2, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	431a      	orrs	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800108a:	bf00      	nop
 800108c:	371c      	adds	r7, #28
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001096:	b480      	push	{r7}
 8001098:	b087      	sub	sp, #28
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3360      	adds	r3, #96	@ 0x60
 80010a6:	461a      	mov	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80010c0:	bf00      	nop
 80010c2:	371c      	adds	r7, #28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3360      	adds	r3, #96	@ 0x60
 80010dc:	461a      	mov	r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	615a      	str	r2, [r3, #20]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800114e:	b480      	push	{r7}
 8001150:	b087      	sub	sp, #28
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3330      	adds	r3, #48	@ 0x30
 800115e:	461a      	mov	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	4413      	add	r3, r2
 800116c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	211f      	movs	r1, #31
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	401a      	ands	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	0e9b      	lsrs	r3, r3, #26
 8001186:	f003 011f 	and.w	r1, r3, #31
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b087      	sub	sp, #28
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3314      	adds	r3, #20
 80011b6:	461a      	mov	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	0e5b      	lsrs	r3, r3, #25
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	0d1b      	lsrs	r3, r3, #20
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	2107      	movs	r1, #7
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	0d1b      	lsrs	r3, r3, #20
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001214:	43db      	mvns	r3, r3
 8001216:	401a      	ands	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0318 	and.w	r3, r3, #24
 800121e:	4908      	ldr	r1, [pc, #32]	@ (8001240 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001220:	40d9      	lsrs	r1, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	400b      	ands	r3, r1
 8001226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800122a:	431a      	orrs	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	0007ffff 	.word	0x0007ffff

08001244 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 031f 	and.w	r3, r3, #31
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001270:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6093      	str	r3, [r2, #8]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001298:	d101      	bne.n	800129e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80012bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80012e8:	d101      	bne.n	80012ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800130c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <LL_ADC_IsEnabled+0x18>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <LL_ADC_IsEnabled+0x1a>
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800135a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800135e:	f043 0204 	orr.w	r2, r3, #4
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b04      	cmp	r3, #4
 8001384:	d101      	bne.n	800138a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d101      	bne.n	80013b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e19b      	b.n	8001712 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d109      	bne.n	80013fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fbbf 	bl	8000b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff3f 	bl	8001284 <LL_ADC_IsDeepPowerDownEnabled>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff25 	bl	8001260 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff5a 	bl	80012d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d115      	bne.n	8001452 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff3e 	bl	80012ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001430:	4b97      	ldr	r3, [pc, #604]	@ (8001690 <HAL_ADC_Init+0x2d0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	4a97      	ldr	r2, [pc, #604]	@ (8001694 <HAL_ADC_Init+0x2d4>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	3301      	adds	r3, #1
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001444:	e002      	b.n	800144c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3b01      	subs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f9      	bne.n	8001446 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff3c 	bl	80012d4 <LL_ADC_IsInternalRegulatorEnabled>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10d      	bne.n	800147e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001466:	f043 0210 	orr.w	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff75 	bl	8001372 <LL_ADC_REG_IsConversionOngoing>
 8001488:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 8134 	bne.w	8001700 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 8130 	bne.w	8001700 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014a8:	f043 0202 	orr.w	r2, r3, #2
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff35 	bl	8001324 <LL_ADC_IsEnabled>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d137      	bne.n	8001530 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014c8:	d004      	beq.n	80014d4 <HAL_ADC_Init+0x114>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a72      	ldr	r2, [pc, #456]	@ (8001698 <HAL_ADC_Init+0x2d8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d10f      	bne.n	80014f4 <HAL_ADC_Init+0x134>
 80014d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80014d8:	f7ff ff24 	bl	8001324 <LL_ADC_IsEnabled>
 80014dc:	4604      	mov	r4, r0
 80014de:	486e      	ldr	r0, [pc, #440]	@ (8001698 <HAL_ADC_Init+0x2d8>)
 80014e0:	f7ff ff20 	bl	8001324 <LL_ADC_IsEnabled>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4323      	orrs	r3, r4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	e008      	b.n	8001506 <HAL_ADC_Init+0x146>
 80014f4:	4869      	ldr	r0, [pc, #420]	@ (800169c <HAL_ADC_Init+0x2dc>)
 80014f6:	f7ff ff15 	bl	8001324 <LL_ADC_IsEnabled>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d012      	beq.n	8001530 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001512:	d004      	beq.n	800151e <HAL_ADC_Init+0x15e>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a5f      	ldr	r2, [pc, #380]	@ (8001698 <HAL_ADC_Init+0x2d8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_ADC_Init+0x162>
 800151e:	4a60      	ldr	r2, [pc, #384]	@ (80016a0 <HAL_ADC_Init+0x2e0>)
 8001520:	e000      	b.n	8001524 <HAL_ADC_Init+0x164>
 8001522:	4a60      	ldr	r2, [pc, #384]	@ (80016a4 <HAL_ADC_Init+0x2e4>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f7ff fd2a 	bl	8000f84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7f5b      	ldrb	r3, [r3, #29]
 8001534:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800153a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001540:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001546:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800154e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800155a:	2b01      	cmp	r3, #1
 800155c:	d106      	bne.n	800156c <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001562:	3b01      	subs	r3, #1
 8001564:	045b      	lsls	r3, r3, #17
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d009      	beq.n	8001588 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001578:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001580:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	4b46      	ldr	r3, [pc, #280]	@ (80016a8 <HAL_ADC_Init+0x2e8>)
 8001590:	4013      	ands	r3, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	69b9      	ldr	r1, [r7, #24]
 8001598:	430b      	orrs	r3, r1
 800159a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff feee 	bl	8001398 <LL_ADC_INJ_IsConversionOngoing>
 80015bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d17b      	bne.n	80016bc <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d178      	bne.n	80016bc <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015e6:	f023 0302 	bic.w	r3, r3, #2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	69b9      	ldr	r1, [r7, #24]
 80015f0:	430b      	orrs	r3, r1
 80015f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d017      	beq.n	800162c <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800160a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001614:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001618:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6911      	ldr	r1, [r2, #16]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	430b      	orrs	r3, r1
 8001626:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800162a:	e013      	b.n	8001654 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800163a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800164c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001650:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800165a:	2b01      	cmp	r3, #1
 800165c:	d126      	bne.n	80016ac <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001668:	f023 0304 	bic.w	r3, r3, #4
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001674:	4311      	orrs	r1, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800167a:	4311      	orrs	r1, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001680:	430a      	orrs	r2, r1
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0201 	orr.w	r2, r2, #1
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	e015      	b.n	80016bc <HAL_ADC_Init+0x2fc>
 8001690:	20000000 	.word	0x20000000
 8001694:	053e2d63 	.word	0x053e2d63
 8001698:	50000100 	.word	0x50000100
 800169c:	50000400 	.word	0x50000400
 80016a0:	50000300 	.word	0x50000300
 80016a4:	50000700 	.word	0x50000700
 80016a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d10c      	bne.n	80016de <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f023 010f 	bic.w	r1, r3, #15
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	1e5a      	subs	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	631a      	str	r2, [r3, #48]	@ 0x30
 80016dc:	e007      	b.n	80016ee <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 020f 	bic.w	r2, r2, #15
 80016ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f2:	f023 0303 	bic.w	r3, r3, #3
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016fe:	e007      	b.n	8001710 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001704:	f043 0210 	orr.w	r2, r3, #16
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001710:	7ffb      	ldrb	r3, [r7, #31]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	@ 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd90      	pop	{r4, r7, pc}
 800171a:	bf00      	nop

0800171c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001730:	d004      	beq.n	800173c <HAL_ADC_Start_DMA+0x20>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a57      	ldr	r2, [pc, #348]	@ (8001894 <HAL_ADC_Start_DMA+0x178>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_ADC_Start_DMA+0x24>
 800173c:	4b56      	ldr	r3, [pc, #344]	@ (8001898 <HAL_ADC_Start_DMA+0x17c>)
 800173e:	e000      	b.n	8001742 <HAL_ADC_Start_DMA+0x26>
 8001740:	4b56      	ldr	r3, [pc, #344]	@ (800189c <HAL_ADC_Start_DMA+0x180>)
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fd7e 	bl	8001244 <LL_ADC_GetMultimode>
 8001748:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fe0f 	bl	8001372 <LL_ADC_REG_IsConversionOngoing>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 8094 	bne.w	8001884 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_ADC_Start_DMA+0x4e>
 8001766:	2302      	movs	r3, #2
 8001768:	e08f      	b.n	800188a <HAL_ADC_Start_DMA+0x16e>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a4a      	ldr	r2, [pc, #296]	@ (80018a0 <HAL_ADC_Start_DMA+0x184>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d008      	beq.n	800178e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d002      	beq.n	800178e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b09      	cmp	r3, #9
 800178c:	d173      	bne.n	8001876 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 fcce 	bl	8002130 <ADC_Enable>
 8001794:	4603      	mov	r3, r0
 8001796:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d166      	bne.n	800186c <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a37      	ldr	r2, [pc, #220]	@ (8001894 <HAL_ADC_Start_DMA+0x178>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d002      	beq.n	80017c2 <HAL_ADC_Start_DMA+0xa6>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	e001      	b.n	80017c6 <HAL_ADC_Start_DMA+0xaa>
 80017c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d002      	beq.n	80017d4 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f0:	f023 0206 	bic.w	r2, r3, #6
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	661a      	str	r2, [r3, #96]	@ 0x60
 80017f8:	e002      	b.n	8001800 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001804:	4a27      	ldr	r2, [pc, #156]	@ (80018a4 <HAL_ADC_Start_DMA+0x188>)
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180c:	4a26      	ldr	r2, [pc, #152]	@ (80018a8 <HAL_ADC_Start_DMA+0x18c>)
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001814:	4a25      	ldr	r2, [pc, #148]	@ (80018ac <HAL_ADC_Start_DMA+0x190>)
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	221c      	movs	r2, #28
 800181e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0210 	orr.w	r2, r2, #16
 8001836:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3340      	adds	r3, #64	@ 0x40
 8001852:	4619      	mov	r1, r3
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f000 ff4c 	bl	80026f4 <HAL_DMA_Start_IT>
 800185c:	4603      	mov	r3, r0
 800185e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fd70 	bl	800134a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800186a:	e00d      	b.n	8001888 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001874:	e008      	b.n	8001888 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001882:	e001      	b.n	8001888 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001884:	2302      	movs	r3, #2
 8001886:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001888:	7dfb      	ldrb	r3, [r7, #23]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	50000100 	.word	0x50000100
 8001898:	50000300 	.word	0x50000300
 800189c:	50000700 	.word	0x50000700
 80018a0:	50000400 	.word	0x50000400
 80018a4:	0800225d 	.word	0x0800225d
 80018a8:	08002335 	.word	0x08002335
 80018ac:	08002351 	.word	0x08002351

080018b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0b6      	sub	sp, #216	@ 0xd8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d102      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x24>
 80018f6:	2302      	movs	r3, #2
 80018f8:	f000 bc04 	b.w	8002104 <HAL_ADC_ConfigChannel+0x82c>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fd32 	bl	8001372 <LL_ADC_REG_IsConversionOngoing>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 83e8 	bne.w	80020e6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6859      	ldr	r1, [r3, #4]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	f7ff fc13 	bl	800114e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fd20 	bl	8001372 <LL_ADC_REG_IsConversionOngoing>
 8001932:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fd2c 	bl	8001398 <LL_ADC_INJ_IsConversionOngoing>
 8001940:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001944:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 81d9 	bne.w	8001d00 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800194e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 81d4 	bne.w	8001d00 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001960:	d10f      	bne.n	8001982 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff fc1a 	bl	80011a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fbc1 	bl	8001102 <LL_ADC_SetSamplingTimeCommonConfig>
 8001980:	e00e      	b.n	80019a0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6819      	ldr	r1, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	461a      	mov	r2, r3
 8001990:	f7ff fc09 	bl	80011a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fbb1 	bl	8001102 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	08db      	lsrs	r3, r3, #3
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d022      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6919      	ldr	r1, [r3, #16]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019d2:	f7ff fb0b 	bl	8000fec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6919      	ldr	r1, [r3, #16]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	461a      	mov	r2, r3
 80019e4:	f7ff fb57 	bl	8001096 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x126>
 80019f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019fc:	e000      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x128>
 80019fe:	2300      	movs	r3, #0
 8001a00:	461a      	mov	r2, r3
 8001a02:	f7ff fb63 	bl	80010cc <LL_ADC_SetOffsetSaturation>
 8001a06:	e17b      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fb10 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10a      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x15c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fb05 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	0e9b      	lsrs	r3, r3, #26
 8001a2e:	f003 021f 	and.w	r2, r3, #31
 8001a32:	e01e      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x19a>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fafa 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001a62:	2320      	movs	r3, #32
 8001a64:	e004      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d105      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x1b2>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	e018      	b.n	8001abc <HAL_ADC_ConfigChannel+0x1e4>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	e004      	b.n	8001abc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d106      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fac9 	bl	8001060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff faad 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10a      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x222>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff faa2 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	0e9b      	lsrs	r3, r3, #26
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	e01e      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x260>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2101      	movs	r1, #1
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fa97 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001b18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e004      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x278>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	e018      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x2aa>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001b74:	2320      	movs	r3, #32
 8001b76:	e004      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d106      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fa66 	bl	8001060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2102      	movs	r1, #2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fa4a 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x2e8>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fa3f 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	0e9b      	lsrs	r3, r3, #26
 8001bba:	f003 021f 	and.w	r2, r3, #31
 8001bbe:	e01e      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x326>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fa34 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001be2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001bee:	2320      	movs	r3, #32
 8001bf0:	e004      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d105      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x33e>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0e9b      	lsrs	r3, r3, #26
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	e016      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x36c>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001c28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001c36:	2320      	movs	r3, #32
 8001c38:	e004      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d106      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2102      	movs	r1, #2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fa05 	bl	8001060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2103      	movs	r1, #3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f9e9 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10a      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x3aa>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2103      	movs	r1, #3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f9de 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	0e9b      	lsrs	r3, r3, #26
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	e017      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x3da>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2103      	movs	r1, #3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f9d3 	bl	8001034 <LL_ADC_GetOffsetChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c9c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001c9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e003      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001ca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d105      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x3f2>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	0e9b      	lsrs	r3, r3, #26
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	e011      	b.n	8001cee <HAL_ADC_ConfigChannel+0x416>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cda:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	e003      	b.n	8001cee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d106      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f9b0 	bl	8001060 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fb0d 	bl	8001324 <LL_ADC_IsEnabled>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f040 813d 	bne.w	8001f8c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f7ff fa6c 	bl	80011fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4aa2      	ldr	r2, [pc, #648]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x6dc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	f040 812e 	bne.w	8001f8c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10b      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x480>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0e9b      	lsrs	r3, r3, #26
 8001d46:	3301      	adds	r3, #1
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2b09      	cmp	r3, #9
 8001d4e:	bf94      	ite	ls
 8001d50:	2301      	movls	r3, #1
 8001d52:	2300      	movhi	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e019      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x4b4>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d68:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001d6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001d70:	2320      	movs	r3, #32
 8001d72:	e003      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001d74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2b09      	cmp	r3, #9
 8001d84:	bf94      	ite	ls
 8001d86:	2301      	movls	r3, #1
 8001d88:	2300      	movhi	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d079      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d107      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x4d4>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	3301      	adds	r3, #1
 8001da4:	069b      	lsls	r3, r3, #26
 8001da6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001daa:	e015      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x500>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001dba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dbc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e003      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	069b      	lsls	r3, r3, #26
 8001dd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x520>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	3301      	adds	r3, #1
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	e017      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x550>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e08:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001e10:	2320      	movs	r3, #32
 8001e12:	e003      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	ea42 0103 	orr.w	r1, r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10a      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x576>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	051b      	lsls	r3, r3, #20
 8001e4c:	e018      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x5a8>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e003      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e80:	430b      	orrs	r3, r1
 8001e82:	e07e      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d107      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x5c8>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	3301      	adds	r3, #1
 8001e98:	069b      	lsls	r3, r3, #26
 8001e9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e9e:	e015      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x5f4>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	e003      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	069b      	lsls	r3, r3, #26
 8001ec8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x614>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	e017      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x644>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	61fb      	str	r3, [r7, #28]
  return result;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001f04:	2320      	movs	r3, #32
 8001f06:	e003      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	ea42 0103 	orr.w	r1, r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10d      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x670>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0e9b      	lsrs	r3, r3, #26
 8001f32:	3301      	adds	r3, #1
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b1e      	subs	r3, #30
 8001f40:	051b      	lsls	r3, r3, #20
 8001f42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f46:	e01b      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x6a8>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	613b      	str	r3, [r7, #16]
  return result;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e003      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f003 021f 	and.w	r2, r3, #31
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	3b1e      	subs	r3, #30
 8001f7a:	051b      	lsls	r3, r3, #20
 8001f7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7ff f90d 	bl	80011a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x6e0>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80af 	beq.w	80020f8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fa2:	d004      	beq.n	8001fae <HAL_ADC_ConfigChannel+0x6d6>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <HAL_ADC_ConfigChannel+0x6e4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d10a      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x6ec>
 8001fae:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x6e8>)
 8001fb0:	e009      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x6ee>
 8001fb2:	bf00      	nop
 8001fb4:	407f0000 	.word	0x407f0000
 8001fb8:	80080000 	.word	0x80080000
 8001fbc:	50000100 	.word	0x50000100
 8001fc0:	50000300 	.word	0x50000300
 8001fc4:	4b51      	ldr	r3, [pc, #324]	@ (800210c <HAL_ADC_ConfigChannel+0x834>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f802 	bl	8000fd0 <LL_ADC_GetCommonPathInternalCh>
 8001fcc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8002110 <HAL_ADC_ConfigChannel+0x838>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x70c>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a4d      	ldr	r2, [pc, #308]	@ (8002114 <HAL_ADC_ConfigChannel+0x83c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d134      	bne.n	800204e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d12e      	bne.n	800204e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ff8:	d17e      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002002:	d004      	beq.n	800200e <HAL_ADC_ConfigChannel+0x736>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a43      	ldr	r2, [pc, #268]	@ (8002118 <HAL_ADC_ConfigChannel+0x840>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x73a>
 800200e:	4a43      	ldr	r2, [pc, #268]	@ (800211c <HAL_ADC_ConfigChannel+0x844>)
 8002010:	e000      	b.n	8002014 <HAL_ADC_ConfigChannel+0x73c>
 8002012:	4a3e      	ldr	r2, [pc, #248]	@ (800210c <HAL_ADC_ConfigChannel+0x834>)
 8002014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002018:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f7fe ffc3 	bl	8000faa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002024:	4b3e      	ldr	r3, [pc, #248]	@ (8002120 <HAL_ADC_ConfigChannel+0x848>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	099b      	lsrs	r3, r3, #6
 800202a:	4a3e      	ldr	r2, [pc, #248]	@ (8002124 <HAL_ADC_ConfigChannel+0x84c>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800203e:	e002      	b.n	8002046 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3b01      	subs	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f9      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800204c:	e054      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a35      	ldr	r2, [pc, #212]	@ (8002128 <HAL_ADC_ConfigChannel+0x850>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d120      	bne.n	800209a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800205c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d11a      	bne.n	800209a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800206c:	d144      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002076:	d004      	beq.n	8002082 <HAL_ADC_ConfigChannel+0x7aa>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a26      	ldr	r2, [pc, #152]	@ (8002118 <HAL_ADC_ConfigChannel+0x840>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x7ae>
 8002082:	4a26      	ldr	r2, [pc, #152]	@ (800211c <HAL_ADC_ConfigChannel+0x844>)
 8002084:	e000      	b.n	8002088 <HAL_ADC_ConfigChannel+0x7b0>
 8002086:	4a21      	ldr	r2, [pc, #132]	@ (800210c <HAL_ADC_ConfigChannel+0x834>)
 8002088:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800208c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f7fe ff89 	bl	8000faa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002098:	e02e      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a23      	ldr	r2, [pc, #140]	@ (800212c <HAL_ADC_ConfigChannel+0x854>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d129      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d123      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a18      	ldr	r2, [pc, #96]	@ (8002118 <HAL_ADC_ConfigChannel+0x840>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01e      	beq.n	80020f8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020c2:	d004      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x7f6>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <HAL_ADC_ConfigChannel+0x840>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x7fa>
 80020ce:	4a13      	ldr	r2, [pc, #76]	@ (800211c <HAL_ADC_ConfigChannel+0x844>)
 80020d0:	e000      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x7fc>
 80020d2:	4a0e      	ldr	r2, [pc, #56]	@ (800210c <HAL_ADC_ConfigChannel+0x834>)
 80020d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f7fe ff63 	bl	8000faa <LL_ADC_SetCommonPathInternalCh>
 80020e4:	e008      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	f043 0220 	orr.w	r2, r3, #32
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002100:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002104:	4618      	mov	r0, r3
 8002106:	37d8      	adds	r7, #216	@ 0xd8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	50000700 	.word	0x50000700
 8002110:	c3210000 	.word	0xc3210000
 8002114:	90c00010 	.word	0x90c00010
 8002118:	50000100 	.word	0x50000100
 800211c:	50000300 	.word	0x50000300
 8002120:	20000000 	.word	0x20000000
 8002124:	053e2d63 	.word	0x053e2d63
 8002128:	c7520000 	.word	0xc7520000
 800212c:	cb840000 	.word	0xcb840000

08002130 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff f8ef 	bl	8001324 <LL_ADC_IsEnabled>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d176      	bne.n	800223a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	4b3c      	ldr	r3, [pc, #240]	@ (8002244 <ADC_Enable+0x114>)
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215e:	f043 0210 	orr.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e062      	b.n	800223c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f8be 	bl	80012fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002188:	d004      	beq.n	8002194 <ADC_Enable+0x64>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2e      	ldr	r2, [pc, #184]	@ (8002248 <ADC_Enable+0x118>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <ADC_Enable+0x68>
 8002194:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <ADC_Enable+0x11c>)
 8002196:	e000      	b.n	800219a <ADC_Enable+0x6a>
 8002198:	4b2d      	ldr	r3, [pc, #180]	@ (8002250 <ADC_Enable+0x120>)
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe ff18 	bl	8000fd0 <LL_ADC_GetCommonPathInternalCh>
 80021a0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d013      	beq.n	80021d2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002254 <ADC_Enable+0x124>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	4a29      	ldr	r2, [pc, #164]	@ (8002258 <ADC_Enable+0x128>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021c4:	e002      	b.n	80021cc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f9      	bne.n	80021c6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021d2:	f7fe fecb 	bl	8000f6c <HAL_GetTick>
 80021d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d8:	e028      	b.n	800222c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f8a0 	bl	8001324 <LL_ADC_IsEnabled>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d104      	bne.n	80021f4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f884 	bl	80012fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021f4:	f7fe feba 	bl	8000f6c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d914      	bls.n	800222c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d00d      	beq.n	800222c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002214:	f043 0210 	orr.w	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e007      	b.n	800223c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d1cf      	bne.n	80021da <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	8000003f 	.word	0x8000003f
 8002248:	50000100 	.word	0x50000100
 800224c:	50000300 	.word	0x50000300
 8002250:	50000700 	.word	0x50000700
 8002254:	20000000 	.word	0x20000000
 8002258:	053e2d63 	.word	0x053e2d63

0800225c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002272:	2b00      	cmp	r3, #0
 8002274:	d14b      	bne.n	800230e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d021      	beq.n	80022d4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ff47 	bl	8001128 <LL_ADC_REG_IsTriggerSourceSWStart>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d032      	beq.n	8002306 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d12b      	bne.n	8002306 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d11f      	bne.n	8002306 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022d2:	e018      	b.n	8002306 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d111      	bne.n	8002306 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7fe fb80 	bl	8000a0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800230c:	e00e      	b.n	800232c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff fad2 	bl	80018c4 <HAL_ADC_ErrorCallback>
}
 8002320:	e004      	b.n	800232c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002340:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7ff fab4 	bl	80018b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236e:	f043 0204 	orr.w	r2, r3, #4
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7ff faa4 	bl	80018c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	@ (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	@ (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	@ 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff8e 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff29 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff40 	bl	80023cc <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff90 	bl	8002478 <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5f 	bl	8002424 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff33 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffa4 	bl	80024e0 <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e08d      	b.n	80026d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b47      	ldr	r3, [pc, #284]	@ (80026dc <HAL_DMA_Init+0x138>)
 80025be:	429a      	cmp	r2, r3
 80025c0:	d80f      	bhi.n	80025e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b45      	ldr	r3, [pc, #276]	@ (80026e0 <HAL_DMA_Init+0x13c>)
 80025ca:	4413      	add	r3, r2
 80025cc:	4a45      	ldr	r2, [pc, #276]	@ (80026e4 <HAL_DMA_Init+0x140>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	009a      	lsls	r2, r3, #2
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a42      	ldr	r2, [pc, #264]	@ (80026e8 <HAL_DMA_Init+0x144>)
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40
 80025e0:	e00e      	b.n	8002600 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b40      	ldr	r3, [pc, #256]	@ (80026ec <HAL_DMA_Init+0x148>)
 80025ea:	4413      	add	r3, r2
 80025ec:	4a3d      	ldr	r2, [pc, #244]	@ (80026e4 <HAL_DMA_Init+0x140>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	009a      	lsls	r2, r3, #2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a3c      	ldr	r2, [pc, #240]	@ (80026f0 <HAL_DMA_Init+0x14c>)
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800261a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9b6 	bl	80029c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002660:	d102      	bne.n	8002668 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800267c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d010      	beq.n	80026a8 <HAL_DMA_Init+0x104>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b04      	cmp	r3, #4
 800268c:	d80c      	bhi.n	80026a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f9d6 	bl	8002a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	e008      	b.n	80026ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40020407 	.word	0x40020407
 80026e0:	bffdfff8 	.word	0xbffdfff8
 80026e4:	cccccccd 	.word	0xcccccccd
 80026e8:	40020000 	.word	0x40020000
 80026ec:	bffdfbf8 	.word	0xbffdfbf8
 80026f0:	40020400 	.word	0x40020400

080026f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Start_IT+0x20>
 8002710:	2302      	movs	r3, #2
 8002712:	e066      	b.n	80027e2 <HAL_DMA_Start_IT+0xee>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d155      	bne.n	80027d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f8fb 	bl	8002948 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 020e 	orr.w	r2, r2, #14
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e00f      	b.n	800278c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0204 	bic.w	r2, r2, #4
 800277a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 020a 	orr.w	r2, r2, #10
 800278a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e005      	b.n	80027e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
 80027de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2204      	movs	r2, #4
 800280c:	409a      	lsls	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d026      	beq.n	8002864 <HAL_DMA_IRQHandler+0x7a>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d021      	beq.n	8002864 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d107      	bne.n	800283e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0204 	bic.w	r2, r2, #4
 800283c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	f003 021f 	and.w	r2, r3, #31
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	2104      	movs	r1, #4
 800284c:	fa01 f202 	lsl.w	r2, r1, r2
 8002850:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	2b00      	cmp	r3, #0
 8002858:	d071      	beq.n	800293e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002862:	e06c      	b.n	800293e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	2202      	movs	r2, #2
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d02e      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d029      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10b      	bne.n	80028a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 020a 	bic.w	r2, r2, #10
 800289e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	2102      	movs	r1, #2
 80028b6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d038      	beq.n	800293e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028d4:	e033      	b.n	800293e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	2208      	movs	r2, #8
 80028e0:	409a      	lsls	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d02a      	beq.n	8002940 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d025      	beq.n	8002940 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 020e 	bic.w	r2, r2, #14
 8002902:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f202 	lsl.w	r2, r1, r2
 8002916:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800293e:	bf00      	nop
 8002940:	bf00      	nop
}
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800295e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002970:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	f003 021f 	and.w	r2, r3, #31
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	2101      	movs	r1, #1
 8002980:	fa01 f202 	lsl.w	r2, r1, r2
 8002984:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b10      	cmp	r3, #16
 8002994:	d108      	bne.n	80029a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029a6:	e007      	b.n	80029b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d802      	bhi.n	80029de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80029d8:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e001      	b.n	80029e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80029e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	3b08      	subs	r3, #8
 80029ee:	4a12      	ldr	r2, [pc, #72]	@ (8002a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	009a      	lsls	r2, r3, #2
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002a0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2201      	movs	r2, #1
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40020407 	.word	0x40020407
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020820 	.word	0x40020820
 8002a38:	cccccccd 	.word	0xcccccccd
 8002a3c:	40020880 	.word	0x40020880

08002a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a08      	ldr	r2, [pc, #32]	@ (8002a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a62:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	1000823f 	.word	0x1000823f
 8002a84:	40020940 	.word	0x40020940

08002a88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e147      	b.n	8002d2a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe f930 	bl	8000d14 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0210 	bic.w	r2, r2, #16
 8002ac2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac4:	f7fe fa52 	bl	8000f6c <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002aca:	e012      	b.n	8002af2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002acc:	f7fe fa4e 	bl	8000f6c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b0a      	cmp	r3, #10
 8002ad8:	d90b      	bls.n	8002af2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e11b      	b.n	8002d2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d0e5      	beq.n	8002acc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699a      	ldr	r2, [r3, #24]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b10:	f7fe fa2c 	bl	8000f6c <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b16:	e012      	b.n	8002b3e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b18:	f7fe fa28 	bl	8000f6c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b0a      	cmp	r3, #10
 8002b24:	d90b      	bls.n	8002b3e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0f5      	b.n	8002d2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0e5      	beq.n	8002b18 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0202 	orr.w	r2, r2, #2
 8002b5a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a74      	ldr	r2, [pc, #464]	@ (8002d34 <HAL_FDCAN_Init+0x2ac>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d103      	bne.n	8002b6e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002b66:	4a74      	ldr	r2, [pc, #464]	@ (8002d38 <HAL_FDCAN_Init+0x2b0>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7c1b      	ldrb	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d108      	bne.n	8002b88 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b84:	619a      	str	r2, [r3, #24]
 8002b86:	e007      	b.n	8002b98 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b96:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7c5b      	ldrb	r3, [r3, #17]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d108      	bne.n	8002bb2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bae:	619a      	str	r2, [r3, #24]
 8002bb0:	e007      	b.n	8002bc2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bc0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7c9b      	ldrb	r3, [r3, #18]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d108      	bne.n	8002bdc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002bd8:	619a      	str	r2, [r3, #24]
 8002bda:	e007      	b.n	8002bec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002bea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002c10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0210 	bic.w	r2, r2, #16
 8002c20:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0204 	orr.w	r2, r2, #4
 8002c38:	619a      	str	r2, [r3, #24]
 8002c3a:	e02c      	b.n	8002c96 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d028      	beq.n	8002c96 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d01c      	beq.n	8002c86 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c5a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0210 	orr.w	r2, r2, #16
 8002c6a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d110      	bne.n	8002c96 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0220 	orr.w	r2, r2, #32
 8002c82:	619a      	str	r2, [r3, #24]
 8002c84:	e007      	b.n	8002c96 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ca6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002cae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002cbe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cc0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cca:	d115      	bne.n	8002cf8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cda:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ce4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	3b01      	subs	r3, #1
 8002cee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002cf4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cf6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f966 	bl	8002fe0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40006400 	.word	0x40006400
 8002d38:	40006500 	.word	0x40006500

08002d3c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d110      	bne.n	8002d72 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e006      	b.n	8002d80 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d76:	f043 0204 	orr.w	r2, r3, #4
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d12c      	bne.n	8002dfe <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e023      	b.n	8002e0c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f962 	bl	80030a4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2101      	movs	r1, #1
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dec:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002df0:	2201      	movs	r2, #1
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	409a      	lsls	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e006      	b.n	8002e0c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e02:	f043 0208 	orr.w	r2, r3, #8
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e26:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d003      	beq.n	8002e36 <HAL_FDCAN_ActivateNotification+0x22>
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	f040 80c8 	bne.w	8002fc6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d03b      	beq.n	8002eca <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d031      	beq.n	8002eca <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d027      	beq.n	8002eca <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d01d      	beq.n	8002eca <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d013      	beq.n	8002eca <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d004      	beq.n	8002eb6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00c      	beq.n	8002eda <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d13b      	bne.n	8002f66 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d131      	bne.n	8002f66 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d127      	bne.n	8002f66 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11d      	bne.n	8002f66 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d113      	bne.n	8002f66 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00c      	beq.n	8002f76 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0202 	orr.w	r2, r2, #2
 8002f74:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e006      	b.n	8002fd4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fca:	f043 0202 	orr.w	r2, r3, #2
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
  }
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800309c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002fea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80030a0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d103      	bne.n	8002ffe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002ffc:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800300c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003014:	041a      	lsls	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003032:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303a:	061a      	lsls	r2, r3, #24
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e005      	b.n	8003080 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3304      	adds	r3, #4
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d3f3      	bcc.n	8003074 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	4000a400 	.word	0x4000a400
 80030a0:	40006800 	.word	0x40006800

080030a4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	@ 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80030c2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e00a      	b.n	80030e6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80030d8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80030de:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030e4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80030f0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80030f6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80030fc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	3304      	adds	r3, #4
 8003124:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	3304      	adds	r3, #4
 8003130:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e020      	b.n	800317a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3303      	adds	r3, #3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3302      	adds	r3, #2
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	440b      	add	r3, r1
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003150:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	3301      	adds	r3, #1
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	440b      	add	r3, r1
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800315e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	440a      	add	r2, r1
 8003166:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003168:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	3304      	adds	r3, #4
 8003172:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3304      	adds	r3, #4
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	4a06      	ldr	r2, [pc, #24]	@ (8003198 <FDCAN_CopyMessageToRAM+0xf4>)
 8003180:	5cd3      	ldrb	r3, [r2, r3]
 8003182:	461a      	mov	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	4293      	cmp	r3, r2
 8003188:	d3d6      	bcc.n	8003138 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800318a:	bf00      	nop
 800318c:	bf00      	nop
 800318e:	3724      	adds	r7, #36	@ 0x24
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	080072b8 	.word	0x080072b8

0800319c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031aa:	e15a      	b.n	8003462 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 814c 	beq.w	800345c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d005      	beq.n	80031dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d130      	bne.n	800323e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003212:	2201      	movs	r2, #1
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 0201 	and.w	r2, r3, #1
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b03      	cmp	r3, #3
 8003248:	d017      	beq.n	800327a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d123      	bne.n	80032ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	08da      	lsrs	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3208      	adds	r2, #8
 800328e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003292:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	08da      	lsrs	r2, r3, #3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3208      	adds	r2, #8
 80032c8:	6939      	ldr	r1, [r7, #16]
 80032ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	2203      	movs	r2, #3
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0203 	and.w	r2, r3, #3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80a6 	beq.w	800345c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003310:	4b5b      	ldr	r3, [pc, #364]	@ (8003480 <HAL_GPIO_Init+0x2e4>)
 8003312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003314:	4a5a      	ldr	r2, [pc, #360]	@ (8003480 <HAL_GPIO_Init+0x2e4>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6613      	str	r3, [r2, #96]	@ 0x60
 800331c:	4b58      	ldr	r3, [pc, #352]	@ (8003480 <HAL_GPIO_Init+0x2e4>)
 800331e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003328:	4a56      	ldr	r2, [pc, #344]	@ (8003484 <HAL_GPIO_Init+0x2e8>)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3302      	adds	r3, #2
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	220f      	movs	r2, #15
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003352:	d01f      	beq.n	8003394 <HAL_GPIO_Init+0x1f8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a4c      	ldr	r2, [pc, #304]	@ (8003488 <HAL_GPIO_Init+0x2ec>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d019      	beq.n	8003390 <HAL_GPIO_Init+0x1f4>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a4b      	ldr	r2, [pc, #300]	@ (800348c <HAL_GPIO_Init+0x2f0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <HAL_GPIO_Init+0x1f0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a4a      	ldr	r2, [pc, #296]	@ (8003490 <HAL_GPIO_Init+0x2f4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00d      	beq.n	8003388 <HAL_GPIO_Init+0x1ec>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a49      	ldr	r2, [pc, #292]	@ (8003494 <HAL_GPIO_Init+0x2f8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d007      	beq.n	8003384 <HAL_GPIO_Init+0x1e8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a48      	ldr	r2, [pc, #288]	@ (8003498 <HAL_GPIO_Init+0x2fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_GPIO_Init+0x1e4>
 800337c:	2305      	movs	r3, #5
 800337e:	e00a      	b.n	8003396 <HAL_GPIO_Init+0x1fa>
 8003380:	2306      	movs	r3, #6
 8003382:	e008      	b.n	8003396 <HAL_GPIO_Init+0x1fa>
 8003384:	2304      	movs	r3, #4
 8003386:	e006      	b.n	8003396 <HAL_GPIO_Init+0x1fa>
 8003388:	2303      	movs	r3, #3
 800338a:	e004      	b.n	8003396 <HAL_GPIO_Init+0x1fa>
 800338c:	2302      	movs	r3, #2
 800338e:	e002      	b.n	8003396 <HAL_GPIO_Init+0x1fa>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_GPIO_Init+0x1fa>
 8003394:	2300      	movs	r3, #0
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	f002 0203 	and.w	r2, r2, #3
 800339c:	0092      	lsls	r2, r2, #2
 800339e:	4093      	lsls	r3, r2
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a6:	4937      	ldr	r1, [pc, #220]	@ (8003484 <HAL_GPIO_Init+0x2e8>)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	3302      	adds	r3, #2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033b4:	4b39      	ldr	r3, [pc, #228]	@ (800349c <HAL_GPIO_Init+0x300>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	43db      	mvns	r3, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033d8:	4a30      	ldr	r2, [pc, #192]	@ (800349c <HAL_GPIO_Init+0x300>)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033de:	4b2f      	ldr	r3, [pc, #188]	@ (800349c <HAL_GPIO_Init+0x300>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003402:	4a26      	ldr	r2, [pc, #152]	@ (800349c <HAL_GPIO_Init+0x300>)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003408:	4b24      	ldr	r3, [pc, #144]	@ (800349c <HAL_GPIO_Init+0x300>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800342c:	4a1b      	ldr	r2, [pc, #108]	@ (800349c <HAL_GPIO_Init+0x300>)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003432:	4b1a      	ldr	r3, [pc, #104]	@ (800349c <HAL_GPIO_Init+0x300>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003456:	4a11      	ldr	r2, [pc, #68]	@ (800349c <HAL_GPIO_Init+0x300>)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	3301      	adds	r3, #1
 8003460:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	f47f ae9d 	bne.w	80031ac <HAL_GPIO_Init+0x10>
  }
}
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40021000 	.word	0x40021000
 8003484:	40010000 	.word	0x40010000
 8003488:	48000400 	.word	0x48000400
 800348c:	48000800 	.word	0x48000800
 8003490:	48000c00 	.word	0x48000c00
 8003494:	48001000 	.word	0x48001000
 8003498:	48001400 	.word	0x48001400
 800349c:	40010400 	.word	0x40010400

080034a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d141      	bne.n	8003532 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ae:	4b4b      	ldr	r3, [pc, #300]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ba:	d131      	bne.n	8003520 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034bc:	4b47      	ldr	r3, [pc, #284]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034c2:	4a46      	ldr	r2, [pc, #280]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034cc:	4b43      	ldr	r3, [pc, #268]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034d4:	4a41      	ldr	r2, [pc, #260]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034dc:	4b40      	ldr	r3, [pc, #256]	@ (80035e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2232      	movs	r2, #50	@ 0x32
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	4a3f      	ldr	r2, [pc, #252]	@ (80035e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	0c9b      	lsrs	r3, r3, #18
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034f2:	e002      	b.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fa:	4b38      	ldr	r3, [pc, #224]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003506:	d102      	bne.n	800350e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f2      	bne.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800350e:	4b33      	ldr	r3, [pc, #204]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800351a:	d158      	bne.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e057      	b.n	80035d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003520:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003526:	4a2d      	ldr	r2, [pc, #180]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800352c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003530:	e04d      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003538:	d141      	bne.n	80035be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800353a:	4b28      	ldr	r3, [pc, #160]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003546:	d131      	bne.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003548:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800354e:	4a23      	ldr	r2, [pc, #140]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003554:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003558:	4b20      	ldr	r3, [pc, #128]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003560:	4a1e      	ldr	r2, [pc, #120]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003566:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003568:	4b1d      	ldr	r3, [pc, #116]	@ (80035e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2232      	movs	r2, #50	@ 0x32
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	4a1c      	ldr	r2, [pc, #112]	@ (80035e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	0c9b      	lsrs	r3, r3, #18
 800357a:	3301      	adds	r3, #1
 800357c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800357e:	e002      	b.n	8003586 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3b01      	subs	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003586:	4b15      	ldr	r3, [pc, #84]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003592:	d102      	bne.n	800359a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f2      	bne.n	8003580 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800359a:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a6:	d112      	bne.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e011      	b.n	80035d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035ac:	4b0b      	ldr	r3, [pc, #44]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035b2:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80035bc:	e007      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035be:	4b07      	ldr	r3, [pc, #28]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035c6:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40007000 	.word	0x40007000
 80035e0:	20000000 	.word	0x20000000
 80035e4:	431bde83 	.word	0x431bde83

080035e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a04      	ldr	r2, [pc, #16]	@ (8003604 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035f6:	6093      	str	r3, [r2, #8]
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40007000 	.word	0x40007000

08003608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e2fe      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d075      	beq.n	8003712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003626:	4b97      	ldr	r3, [pc, #604]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003630:	4b94      	ldr	r3, [pc, #592]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b0c      	cmp	r3, #12
 800363e:	d102      	bne.n	8003646 <HAL_RCC_OscConfig+0x3e>
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d002      	beq.n	800364c <HAL_RCC_OscConfig+0x44>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d10b      	bne.n	8003664 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	4b8d      	ldr	r3, [pc, #564]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d05b      	beq.n	8003710 <HAL_RCC_OscConfig+0x108>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d157      	bne.n	8003710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e2d9      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366c:	d106      	bne.n	800367c <HAL_RCC_OscConfig+0x74>
 800366e:	4b85      	ldr	r3, [pc, #532]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a84      	ldr	r2, [pc, #528]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e01d      	b.n	80036b8 <HAL_RCC_OscConfig+0xb0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x98>
 8003686:	4b7f      	ldr	r3, [pc, #508]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7e      	ldr	r2, [pc, #504]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b7c      	ldr	r3, [pc, #496]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7b      	ldr	r2, [pc, #492]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0xb0>
 80036a0:	4b78      	ldr	r3, [pc, #480]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a77      	ldr	r2, [pc, #476]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b75      	ldr	r3, [pc, #468]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a74      	ldr	r2, [pc, #464]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fd fc54 	bl	8000f6c <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fd fc50 	bl	8000f6c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	@ 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e29e      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036da:	4b6a      	ldr	r3, [pc, #424]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0xc0>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fd fc40 	bl	8000f6c <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fd fc3c 	bl	8000f6c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e28a      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003702:	4b60      	ldr	r3, [pc, #384]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0xe8>
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d075      	beq.n	800380a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371e:	4b59      	ldr	r3, [pc, #356]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003728:	4b56      	ldr	r3, [pc, #344]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	d102      	bne.n	800373e <HAL_RCC_OscConfig+0x136>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d002      	beq.n	8003744 <HAL_RCC_OscConfig+0x13c>
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d11f      	bne.n	8003784 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003744:	4b4f      	ldr	r3, [pc, #316]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_OscConfig+0x154>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e25d      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375c:	4b49      	ldr	r3, [pc, #292]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	4946      	ldr	r1, [pc, #280]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003770:	4b45      	ldr	r3, [pc, #276]	@ (8003888 <HAL_RCC_OscConfig+0x280>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7fd fbad 	bl	8000ed4 <HAL_InitTick>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d043      	beq.n	8003808 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e249      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d023      	beq.n	80037d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800378c:	4b3d      	ldr	r3, [pc, #244]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a3c      	ldr	r2, [pc, #240]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fd fbe8 	bl	8000f6c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a0:	f7fd fbe4 	bl	8000f6c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e232      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b2:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037be:	4b31      	ldr	r3, [pc, #196]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	061b      	lsls	r3, r3, #24
 80037cc:	492d      	ldr	r1, [pc, #180]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]
 80037d2:	e01a      	b.n	800380a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80037da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd fbc4 	bl	8000f6c <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e8:	f7fd fbc0 	bl	8000f6c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e20e      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037fa:	4b22      	ldr	r3, [pc, #136]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x1e0>
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003808:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d041      	beq.n	800389a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01c      	beq.n	8003858 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	4b19      	ldr	r3, [pc, #100]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003824:	4a17      	ldr	r2, [pc, #92]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382e:	f7fd fb9d 	bl	8000f6c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003836:	f7fd fb99 	bl	8000f6c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e1e7      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003848:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 800384a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ef      	beq.n	8003836 <HAL_RCC_OscConfig+0x22e>
 8003856:	e020      	b.n	800389a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003858:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 800385a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385e:	4a09      	ldr	r2, [pc, #36]	@ (8003884 <HAL_RCC_OscConfig+0x27c>)
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003868:	f7fd fb80 	bl	8000f6c <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800386e:	e00d      	b.n	800388c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003870:	f7fd fb7c 	bl	8000f6c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d906      	bls.n	800388c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1ca      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800388c:	4b8c      	ldr	r3, [pc, #560]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 800388e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ea      	bne.n	8003870 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80a6 	beq.w	80039f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ac:	4b84      	ldr	r3, [pc, #528]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_OscConfig+0x2b4>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x2b6>
 80038bc:	2300      	movs	r3, #0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ce:	4b7c      	ldr	r3, [pc, #496]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038da:	2301      	movs	r3, #1
 80038dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038de:	4b79      	ldr	r3, [pc, #484]	@ (8003ac4 <HAL_RCC_OscConfig+0x4bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d118      	bne.n	800391c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ea:	4b76      	ldr	r3, [pc, #472]	@ (8003ac4 <HAL_RCC_OscConfig+0x4bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a75      	ldr	r2, [pc, #468]	@ (8003ac4 <HAL_RCC_OscConfig+0x4bc>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f6:	f7fd fb39 	bl	8000f6c <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fe:	f7fd fb35 	bl	8000f6c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e183      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003910:	4b6c      	ldr	r3, [pc, #432]	@ (8003ac4 <HAL_RCC_OscConfig+0x4bc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d108      	bne.n	8003936 <HAL_RCC_OscConfig+0x32e>
 8003924:	4b66      	ldr	r3, [pc, #408]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392a:	4a65      	ldr	r2, [pc, #404]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003934:	e024      	b.n	8003980 <HAL_RCC_OscConfig+0x378>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d110      	bne.n	8003960 <HAL_RCC_OscConfig+0x358>
 800393e:	4b60      	ldr	r3, [pc, #384]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003944:	4a5e      	ldr	r2, [pc, #376]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003946:	f043 0304 	orr.w	r3, r3, #4
 800394a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800394e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003954:	4a5a      	ldr	r2, [pc, #360]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800395e:	e00f      	b.n	8003980 <HAL_RCC_OscConfig+0x378>
 8003960:	4b57      	ldr	r3, [pc, #348]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003966:	4a56      	ldr	r2, [pc, #344]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003970:	4b53      	ldr	r3, [pc, #332]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003976:	4a52      	ldr	r2, [pc, #328]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d016      	beq.n	80039b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd faf0 	bl	8000f6c <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fd faec 	bl	8000f6c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e138      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a6:	4b46      	ldr	r3, [pc, #280]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ed      	beq.n	8003990 <HAL_RCC_OscConfig+0x388>
 80039b4:	e015      	b.n	80039e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fd fad9 	bl	8000f6c <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fd fad5 	bl	8000f6c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e121      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ed      	bne.n	80039be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039e2:	7ffb      	ldrb	r3, [r7, #31]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e8:	4b35      	ldr	r3, [pc, #212]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ec:	4a34      	ldr	r2, [pc, #208]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 80039ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d03c      	beq.n	8003a7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01c      	beq.n	8003a42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a08:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fd faa8 	bl	8000f6c <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a20:	f7fd faa4 	bl	8000f6c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e0f2      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a32:	4b23      	ldr	r3, [pc, #140]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ef      	beq.n	8003a20 <HAL_RCC_OscConfig+0x418>
 8003a40:	e01b      	b.n	8003a7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a42:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a52:	f7fd fa8b 	bl	8000f6c <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a5a:	f7fd fa87 	bl	8000f6c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e0d5      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1ef      	bne.n	8003a5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80c9 	beq.w	8003c16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a84:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	f000 8083 	beq.w	8003b98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d15e      	bne.n	8003b58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a08      	ldr	r2, [pc, #32]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b8>)
 8003aa0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fd fa61 	bl	8000f6c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aac:	e00c      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aae:	f7fd fa5d 	bl	8000f6c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d905      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e0ab      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac8:	4b55      	ldr	r3, [pc, #340]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ec      	bne.n	8003aae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad4:	4b52      	ldr	r3, [pc, #328]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	4b52      	ldr	r3, [pc, #328]	@ (8003c24 <HAL_RCC_OscConfig+0x61c>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6a11      	ldr	r1, [r2, #32]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ae4:	3a01      	subs	r2, #1
 8003ae6:	0112      	lsls	r2, r2, #4
 8003ae8:	4311      	orrs	r1, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003aee:	0212      	lsls	r2, r2, #8
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003af6:	0852      	lsrs	r2, r2, #1
 8003af8:	3a01      	subs	r2, #1
 8003afa:	0552      	lsls	r2, r2, #21
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b02:	0852      	lsrs	r2, r2, #1
 8003b04:	3a01      	subs	r2, #1
 8003b06:	0652      	lsls	r2, r2, #25
 8003b08:	4311      	orrs	r1, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b0e:	06d2      	lsls	r2, r2, #27
 8003b10:	430a      	orrs	r2, r1
 8003b12:	4943      	ldr	r1, [pc, #268]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b18:	4b41      	ldr	r3, [pc, #260]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a40      	ldr	r2, [pc, #256]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b24:	4b3e      	ldr	r3, [pc, #248]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4a3d      	ldr	r2, [pc, #244]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd fa1c 	bl	8000f6c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fd fa18 	bl	8000f6c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e066      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b4a:	4b35      	ldr	r3, [pc, #212]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x530>
 8003b56:	e05e      	b.n	8003c16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b58:	4b31      	ldr	r3, [pc, #196]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a30      	ldr	r2, [pc, #192]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fd fa02 	bl	8000f6c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fd f9fe 	bl	8000f6c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e04c      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7e:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b8a:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	4924      	ldr	r1, [pc, #144]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003b90:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <HAL_RCC_OscConfig+0x620>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	60cb      	str	r3, [r1, #12]
 8003b96:	e03e      	b.n	8003c16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e039      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c20 <HAL_RCC_OscConfig+0x618>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 0203 	and.w	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d12c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d123      	bne.n	8003c12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d11b      	bne.n	8003c12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d113      	bne.n	8003c12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	019f800c 	.word	0x019f800c
 8003c28:	feeefffc 	.word	0xfeeefffc

08003c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e11e      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c44:	4b91      	ldr	r3, [pc, #580]	@ (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d910      	bls.n	8003c74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b8e      	ldr	r3, [pc, #568]	@ (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 020f 	bic.w	r2, r3, #15
 8003c5a:	498c      	ldr	r1, [pc, #560]	@ (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b8a      	ldr	r3, [pc, #552]	@ (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e106      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d073      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d129      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c88:	4b81      	ldr	r3, [pc, #516]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0f4      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c98:	f000 f966 	bl	8003f68 <RCC_GetSysClockFreqFromPLLSource>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4a7c      	ldr	r2, [pc, #496]	@ (8003e94 <HAL_RCC_ClockConfig+0x268>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d93f      	bls.n	8003d26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d033      	beq.n	8003d26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d12f      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cc6:	4b72      	ldr	r3, [pc, #456]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cce:	4a70      	ldr	r2, [pc, #448]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cd6:	2380      	movs	r3, #128	@ 0x80
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e024      	b.n	8003d26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0c6      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf4:	4b66      	ldr	r3, [pc, #408]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0be      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d04:	f000 f8ce 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4a61      	ldr	r2, [pc, #388]	@ (8003e94 <HAL_RCC_ClockConfig+0x268>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d909      	bls.n	8003d26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d12:	4b5f      	ldr	r3, [pc, #380]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d1a:	4a5d      	ldr	r2, [pc, #372]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d26:	4b5a      	ldr	r3, [pc, #360]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 0203 	bic.w	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4957      	ldr	r1, [pc, #348]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d38:	f7fd f918 	bl	8000f6c <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d40:	f7fd f914 	bl	8000f6c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e095      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d56:	4b4e      	ldr	r3, [pc, #312]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 020c 	and.w	r2, r3, #12
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d1eb      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d023      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d80:	4b43      	ldr	r3, [pc, #268]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a42      	ldr	r2, [pc, #264]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d98:	4b3d      	ldr	r3, [pc, #244]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003da0:	4a3b      	ldr	r2, [pc, #236]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003da2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003da6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b39      	ldr	r3, [pc, #228]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4936      	ldr	r1, [pc, #216]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
 8003dba:	e008      	b.n	8003dce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b80      	cmp	r3, #128	@ 0x80
 8003dc0:	d105      	bne.n	8003dce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003dc2:	4b33      	ldr	r3, [pc, #204]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	4a32      	ldr	r2, [pc, #200]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003dc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dcc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dce:	4b2f      	ldr	r3, [pc, #188]	@ (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d21d      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f023 020f 	bic.w	r2, r3, #15
 8003de4:	4929      	ldr	r1, [pc, #164]	@ (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dec:	f7fd f8be 	bl	8000f6c <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fd f8ba 	bl	8000f6c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e03b      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b20      	ldr	r3, [pc, #128]	@ (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1ed      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4917      	ldr	r1, [pc, #92]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e42:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490f      	ldr	r1, [pc, #60]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e56:	f000 f825 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490c      	ldr	r1, [pc, #48]	@ (8003e98 <HAL_RCC_ClockConfig+0x26c>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	4a0a      	ldr	r2, [pc, #40]	@ (8003e9c <HAL_RCC_ClockConfig+0x270>)
 8003e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <HAL_RCC_ClockConfig+0x274>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd f82a 	bl	8000ed4 <HAL_InitTick>
 8003e80:	4603      	mov	r3, r0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40021000 	.word	0x40021000
 8003e94:	04c4b400 	.word	0x04c4b400
 8003e98:	080072a8 	.word	0x080072a8
 8003e9c:	20000000 	.word	0x20000000
 8003ea0:	20000004 	.word	0x20000004

08003ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d102      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	e047      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ebc:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d102      	bne.n	8003ece <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ec8:	4b26      	ldr	r3, [pc, #152]	@ (8003f64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	e03e      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ece:	4b23      	ldr	r3, [pc, #140]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	d136      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eda:	4b20      	ldr	r3, [pc, #128]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	3301      	adds	r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d10c      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	4a16      	ldr	r2, [pc, #88]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f02:	68d2      	ldr	r2, [r2, #12]
 8003f04:	0a12      	lsrs	r2, r2, #8
 8003f06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	617b      	str	r3, [r7, #20]
      break;
 8003f10:	e00c      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f12:	4a13      	ldr	r2, [pc, #76]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	4a10      	ldr	r2, [pc, #64]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f1c:	68d2      	ldr	r2, [r2, #12]
 8003f1e:	0a12      	lsrs	r2, r2, #8
 8003f20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]
      break;
 8003f2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	0e5b      	lsrs	r3, r3, #25
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	3301      	adds	r3, #1
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e001      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f4c:	693b      	ldr	r3, [r7, #16]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	016e3600 	.word	0x016e3600

08003f68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f78:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	3301      	adds	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d10c      	bne.n	8003fa6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f8c:	4a17      	ldr	r2, [pc, #92]	@ (8003fec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	4a14      	ldr	r2, [pc, #80]	@ (8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f96:	68d2      	ldr	r2, [r2, #12]
 8003f98:	0a12      	lsrs	r2, r2, #8
 8003f9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	617b      	str	r3, [r7, #20]
    break;
 8003fa4:	e00c      	b.n	8003fc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fa6:	4a12      	ldr	r2, [pc, #72]	@ (8003ff0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fae:	4a0e      	ldr	r2, [pc, #56]	@ (8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fb0:	68d2      	ldr	r2, [r2, #12]
 8003fb2:	0a12      	lsrs	r2, r2, #8
 8003fb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]
    break;
 8003fbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fc0:	4b09      	ldr	r3, [pc, #36]	@ (8003fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	0e5b      	lsrs	r3, r3, #25
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fda:	687b      	ldr	r3, [r7, #4]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	016e3600 	.word	0x016e3600
 8003ff0:	00f42400 	.word	0x00f42400

08003ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004000:	2300      	movs	r3, #0
 8004002:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8098 	beq.w	8004142 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004016:	4b43      	ldr	r3, [pc, #268]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10d      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	4b40      	ldr	r3, [pc, #256]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004026:	4a3f      	ldr	r2, [pc, #252]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402c:	6593      	str	r3, [r2, #88]	@ 0x58
 800402e:	4b3d      	ldr	r3, [pc, #244]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403a:	2301      	movs	r3, #1
 800403c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800403e:	4b3a      	ldr	r3, [pc, #232]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a39      	ldr	r2, [pc, #228]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004048:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404a:	f7fc ff8f 	bl	8000f6c <HAL_GetTick>
 800404e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004050:	e009      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fc ff8b 	bl	8000f6c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d902      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	74fb      	strb	r3, [r7, #19]
        break;
 8004064:	e005      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004066:	4b30      	ldr	r3, [pc, #192]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ef      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d159      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004078:	4b2a      	ldr	r3, [pc, #168]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004082:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01e      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	429a      	cmp	r2, r3
 8004092:	d019      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004094:	4b23      	ldr	r3, [pc, #140]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a0:	4b20      	ldr	r3, [pc, #128]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c0:	4a18      	ldr	r2, [pc, #96]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fc ff4b 	bl	8000f6c <HAL_GetTick>
 80040d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d8:	e00b      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fc ff47 	bl	8000f6c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d902      	bls.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	74fb      	strb	r3, [r7, #19]
            break;
 80040f0:	e006      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ec      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004106:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004114:	4903      	ldr	r1, [pc, #12]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800411c:	e008      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	74bb      	strb	r3, [r7, #18]
 8004122:	e005      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004124:	40021000 	.word	0x40021000
 8004128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004130:	7c7b      	ldrb	r3, [r7, #17]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d105      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004136:	4ba7      	ldr	r3, [pc, #668]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	4aa6      	ldr	r2, [pc, #664]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004140:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800414e:	4ba1      	ldr	r3, [pc, #644]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	f023 0203 	bic.w	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	499d      	ldr	r1, [pc, #628]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004170:	4b98      	ldr	r3, [pc, #608]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f023 020c 	bic.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4995      	ldr	r1, [pc, #596]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004192:	4b90      	ldr	r3, [pc, #576]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004198:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	498c      	ldr	r1, [pc, #560]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b4:	4b87      	ldr	r3, [pc, #540]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	4984      	ldr	r1, [pc, #528]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041d6:	4b7f      	ldr	r3, [pc, #508]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	497b      	ldr	r1, [pc, #492]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f8:	4b76      	ldr	r3, [pc, #472]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	4973      	ldr	r1, [pc, #460]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800421a:	4b6e      	ldr	r3, [pc, #440]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004220:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	496a      	ldr	r1, [pc, #424]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800423c:	4b65      	ldr	r3, [pc, #404]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	4962      	ldr	r1, [pc, #392]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800425e:	4b5d      	ldr	r3, [pc, #372]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	4959      	ldr	r1, [pc, #356]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004280:	4b54      	ldr	r3, [pc, #336]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004286:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	4951      	ldr	r1, [pc, #324]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d015      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a2:	4b4c      	ldr	r3, [pc, #304]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	4948      	ldr	r1, [pc, #288]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c0:	d105      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c2:	4b44      	ldr	r3, [pc, #272]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a43      	ldr	r2, [pc, #268]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042cc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d015      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042da:	4b3e      	ldr	r3, [pc, #248]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e8:	493a      	ldr	r1, [pc, #232]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042f8:	d105      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042fa:	4b36      	ldr	r3, [pc, #216]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	4a35      	ldr	r2, [pc, #212]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004300:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004304:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d015      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004312:	4b30      	ldr	r3, [pc, #192]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004318:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004320:	492c      	ldr	r1, [pc, #176]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004330:	d105      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004332:	4b28      	ldr	r3, [pc, #160]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4a27      	ldr	r2, [pc, #156]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004338:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800433c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d015      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800434a:	4b22      	ldr	r3, [pc, #136]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004350:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004358:	491e      	ldr	r1, [pc, #120]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004368:	d105      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800436a:	4b1a      	ldr	r3, [pc, #104]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4a19      	ldr	r2, [pc, #100]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004374:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d015      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004382:	4b14      	ldr	r3, [pc, #80]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004390:	4910      	ldr	r1, [pc, #64]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043a0:	d105      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a2:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	4a0b      	ldr	r2, [pc, #44]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d018      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043ba:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	4902      	ldr	r1, [pc, #8]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	e001      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80043d4:	40021000 	.word	0x40021000
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043de:	d105      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043e0:	4b21      	ldr	r3, [pc, #132]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a20      	ldr	r2, [pc, #128]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d015      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	4918      	ldr	r1, [pc, #96]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004416:	d105      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004418:	4b13      	ldr	r3, [pc, #76]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a12      	ldr	r2, [pc, #72]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800441e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004422:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d015      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004430:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004432:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004436:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443e:	490a      	ldr	r1, [pc, #40]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800444e:	d105      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004450:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4a04      	ldr	r2, [pc, #16]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800445a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800445c:	7cbb      	ldrb	r3, [r7, #18]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000

0800446c <__NVIC_SetPriority>:
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	6039      	str	r1, [r7, #0]
 8004476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	2b00      	cmp	r3, #0
 800447e:	db0a      	blt.n	8004496 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	490c      	ldr	r1, [pc, #48]	@ (80044b8 <__NVIC_SetPriority+0x4c>)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	0112      	lsls	r2, r2, #4
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	440b      	add	r3, r1
 8004490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004494:	e00a      	b.n	80044ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4908      	ldr	r1, [pc, #32]	@ (80044bc <__NVIC_SetPriority+0x50>)
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	3b04      	subs	r3, #4
 80044a4:	0112      	lsls	r2, r2, #4
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	440b      	add	r3, r1
 80044aa:	761a      	strb	r2, [r3, #24]
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000e100 	.word	0xe000e100
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80044c4:	2100      	movs	r1, #0
 80044c6:	f06f 0004 	mvn.w	r0, #4
 80044ca:	f7ff ffcf 	bl	800446c <__NVIC_SetPriority>
#endif
}
 80044ce:	bf00      	nop
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044da:	f3ef 8305 	mrs	r3, IPSR
 80044de:	603b      	str	r3, [r7, #0]
  return(result);
 80044e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044e6:	f06f 0305 	mvn.w	r3, #5
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	e00c      	b.n	8004508 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <osKernelInitialize+0x44>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044f6:	4b08      	ldr	r3, [pc, #32]	@ (8004518 <osKernelInitialize+0x44>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	e002      	b.n	8004508 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004502:	f04f 33ff 	mov.w	r3, #4294967295
 8004506:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004508:	687b      	ldr	r3, [r7, #4]
}
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	200004d8 	.word	0x200004d8

0800451c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004522:	f3ef 8305 	mrs	r3, IPSR
 8004526:	603b      	str	r3, [r7, #0]
  return(result);
 8004528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <osKernelStart+0x1a>
    stat = osErrorISR;
 800452e:	f06f 0305 	mvn.w	r3, #5
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	e010      	b.n	8004558 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004536:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <osKernelStart+0x48>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d109      	bne.n	8004552 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800453e:	f7ff ffbf 	bl	80044c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004542:	4b08      	ldr	r3, [pc, #32]	@ (8004564 <osKernelStart+0x48>)
 8004544:	2202      	movs	r2, #2
 8004546:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004548:	f001 f87a 	bl	8005640 <vTaskStartScheduler>
      stat = osOK;
 800454c:	2300      	movs	r3, #0
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	e002      	b.n	8004558 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004552:	f04f 33ff 	mov.w	r3, #4294967295
 8004556:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004558:	687b      	ldr	r3, [r7, #4]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	200004d8 	.word	0x200004d8

08004568 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b08e      	sub	sp, #56	@ 0x38
 800456c:	af04      	add	r7, sp, #16
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004578:	f3ef 8305 	mrs	r3, IPSR
 800457c:	617b      	str	r3, [r7, #20]
  return(result);
 800457e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004580:	2b00      	cmp	r3, #0
 8004582:	d17e      	bne.n	8004682 <osThreadNew+0x11a>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d07b      	beq.n	8004682 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800458a:	2380      	movs	r3, #128	@ 0x80
 800458c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800458e:	2318      	movs	r3, #24
 8004590:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004596:	f04f 33ff 	mov.w	r3, #4294967295
 800459a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d045      	beq.n	800462e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <osThreadNew+0x48>
        name = attr->name;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <osThreadNew+0x6e>
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b38      	cmp	r3, #56	@ 0x38
 80045c8:	d805      	bhi.n	80045d6 <osThreadNew+0x6e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <osThreadNew+0x72>
        return (NULL);
 80045d6:	2300      	movs	r3, #0
 80045d8:	e054      	b.n	8004684 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00e      	beq.n	8004610 <osThreadNew+0xa8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b5b      	cmp	r3, #91	@ 0x5b
 80045f8:	d90a      	bls.n	8004610 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d006      	beq.n	8004610 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <osThreadNew+0xa8>
        mem = 1;
 800460a:	2301      	movs	r3, #1
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	e010      	b.n	8004632 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10c      	bne.n	8004632 <osThreadNew+0xca>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d108      	bne.n	8004632 <osThreadNew+0xca>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <osThreadNew+0xca>
          mem = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	e001      	b.n	8004632 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d110      	bne.n	800465a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004640:	9202      	str	r2, [sp, #8]
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	6a3a      	ldr	r2, [r7, #32]
 800464c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 fe1a 	bl	8005288 <xTaskCreateStatic>
 8004654:	4603      	mov	r3, r0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e013      	b.n	8004682 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d110      	bne.n	8004682 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	b29a      	uxth	r2, r3
 8004664:	f107 0310 	add.w	r3, r7, #16
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fe68 	bl	8005348 <xTaskCreate>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d001      	beq.n	8004682 <osThreadNew+0x11a>
            hTask = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004682:	693b      	ldr	r3, [r7, #16]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3728      	adds	r7, #40	@ 0x28
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004694:	f3ef 8305 	mrs	r3, IPSR
 8004698:	60bb      	str	r3, [r7, #8]
  return(result);
 800469a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <osDelay+0x1c>
    stat = osErrorISR;
 80046a0:	f06f 0305 	mvn.w	r3, #5
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e007      	b.n	80046b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 ff8e 	bl	80055d4 <vTaskDelay>
    }
  }

  return (stat);
 80046b8:	68fb      	ldr	r3, [r7, #12]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a07      	ldr	r2, [pc, #28]	@ (80046f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80046d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4a06      	ldr	r2, [pc, #24]	@ (80046f4 <vApplicationGetIdleTaskMemory+0x30>)
 80046da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2280      	movs	r2, #128	@ 0x80
 80046e0:	601a      	str	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	200004dc 	.word	0x200004dc
 80046f4:	20000538 	.word	0x20000538

080046f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4a07      	ldr	r2, [pc, #28]	@ (8004724 <vApplicationGetTimerTaskMemory+0x2c>)
 8004708:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4a06      	ldr	r2, [pc, #24]	@ (8004728 <vApplicationGetTimerTaskMemory+0x30>)
 800470e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004716:	601a      	str	r2, [r3, #0]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	20000738 	.word	0x20000738
 8004728:	20000794 	.word	0x20000794

0800472c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f103 0208 	add.w	r2, r3, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f04f 32ff 	mov.w	r2, #4294967295
 8004744:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f103 0208 	add.w	r2, r3, #8
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f103 0208 	add.w	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	601a      	str	r2, [r3, #0]
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d103      	bne.n	80047ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e00c      	b.n	8004808 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3308      	adds	r3, #8
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e002      	b.n	80047fc <vListInsert+0x2e>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	d2f6      	bcs.n	80047f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6892      	ldr	r2, [r2, #8]
 8004856:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6852      	ldr	r2, [r2, #4]
 8004860:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d103      	bne.n	8004874 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	1e5a      	subs	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048c0:	f002 f962 	bl	8006b88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048cc:	68f9      	ldr	r1, [r7, #12]
 80048ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f0:	3b01      	subs	r3, #1
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	441a      	add	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	22ff      	movs	r2, #255	@ 0xff
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	22ff      	movs	r2, #255	@ 0xff
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d114      	bne.n	8004940 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01a      	beq.n	8004954 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3310      	adds	r3, #16
 8004922:	4618      	mov	r0, r3
 8004924:	f001 f91a 	bl	8005b5c <xTaskRemoveFromEventList>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d012      	beq.n	8004954 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800492e:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <xQueueGenericReset+0xd0>)
 8004930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	e009      	b.n	8004954 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3310      	adds	r3, #16
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fef1 	bl	800472c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3324      	adds	r3, #36	@ 0x24
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff feec 	bl	800472c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004954:	f002 f94a 	bl	8006bec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004958:	2301      	movs	r3, #1
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08e      	sub	sp, #56	@ 0x38
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	e7fd      	b.n	8004990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <xQueueGenericCreateStatic+0x56>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <xQueueGenericCreateStatic+0x5a>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <xQueueGenericCreateStatic+0x5c>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10b      	bne.n	80049e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	623b      	str	r3, [r7, #32]
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	e7fd      	b.n	80049dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <xQueueGenericCreateStatic+0x84>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <xQueueGenericCreateStatic+0x88>
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <xQueueGenericCreateStatic+0x8a>
 80049f0:	2300      	movs	r3, #0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	61fb      	str	r3, [r7, #28]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a0e:	2350      	movs	r3, #80	@ 0x50
 8004a10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b50      	cmp	r3, #80	@ 0x50
 8004a16:	d00b      	beq.n	8004a30 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	61bb      	str	r3, [r7, #24]
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00d      	beq.n	8004a58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f805 	bl	8004a62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3730      	adds	r7, #48	@ 0x30
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e002      	b.n	8004a84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a90:	2101      	movs	r1, #1
 8004a92:	69b8      	ldr	r0, [r7, #24]
 8004a94:	f7ff fefe 	bl	8004894 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08e      	sub	sp, #56	@ 0x38
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10b      	bne.n	8004adc <xQueueGenericSend+0x34>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	e7fd      	b.n	8004ad8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <xQueueGenericSend+0x42>
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <xQueueGenericSend+0x46>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <xQueueGenericSend+0x48>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <xQueueGenericSend+0x64>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b06:	bf00      	nop
 8004b08:	bf00      	nop
 8004b0a:	e7fd      	b.n	8004b08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d103      	bne.n	8004b1a <xQueueGenericSend+0x72>
 8004b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <xQueueGenericSend+0x76>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <xQueueGenericSend+0x78>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <xQueueGenericSend+0x94>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	623b      	str	r3, [r7, #32]
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	e7fd      	b.n	8004b38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b3c:	f001 f9de 	bl	8005efc <xTaskGetSchedulerState>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <xQueueGenericSend+0xa4>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <xQueueGenericSend+0xa8>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <xQueueGenericSend+0xaa>
 8004b50:	2300      	movs	r3, #0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <xQueueGenericSend+0xc6>
	__asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	61fb      	str	r3, [r7, #28]
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	e7fd      	b.n	8004b6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b6e:	f002 f80b 	bl	8006b88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <xQueueGenericSend+0xdc>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d129      	bne.n	8004bd8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b8a:	f000 fa0f 	bl	8004fac <prvCopyDataToQueue>
 8004b8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d010      	beq.n	8004bba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	3324      	adds	r3, #36	@ 0x24
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 ffdd 	bl	8005b5c <xTaskRemoveFromEventList>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d013      	beq.n	8004bd0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ca8 <xQueueGenericSend+0x200>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	e00a      	b.n	8004bd0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bc0:	4b39      	ldr	r3, [pc, #228]	@ (8004ca8 <xQueueGenericSend+0x200>)
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bd0:	f002 f80c 	bl	8006bec <vPortExitCritical>
				return pdPASS;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e063      	b.n	8004ca0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bde:	f002 f805 	bl	8006bec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e05c      	b.n	8004ca0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bec:	f107 0314 	add.w	r3, r7, #20
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 f817 	bl	8005c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bfa:	f001 fff7 	bl	8006bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bfe:	f000 fd87 	bl	8005710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c02:	f001 ffc1 	bl	8006b88 <vPortEnterCritical>
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d103      	bne.n	8004c1c <xQueueGenericSend+0x174>
 8004c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c22:	b25b      	sxtb	r3, r3
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d103      	bne.n	8004c32 <xQueueGenericSend+0x18a>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c32:	f001 ffdb 	bl	8006bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c36:	1d3a      	adds	r2, r7, #4
 8004c38:	f107 0314 	add.w	r3, r7, #20
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 f806 	bl	8005c50 <xTaskCheckForTimeOut>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d124      	bne.n	8004c94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c4c:	f000 faa6 	bl	800519c <prvIsQueueFull>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d018      	beq.n	8004c88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c58:	3310      	adds	r3, #16
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 ff2a 	bl	8005ab8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c66:	f000 fa31 	bl	80050cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c6a:	f000 fd5f 	bl	800572c <xTaskResumeAll>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f47f af7c 	bne.w	8004b6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca8 <xQueueGenericSend+0x200>)
 8004c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	e772      	b.n	8004b6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c8a:	f000 fa1f 	bl	80050cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c8e:	f000 fd4d 	bl	800572c <xTaskResumeAll>
 8004c92:	e76c      	b.n	8004b6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c96:	f000 fa19 	bl	80050cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c9a:	f000 fd47 	bl	800572c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3738      	adds	r7, #56	@ 0x38
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b090      	sub	sp, #64	@ 0x40
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10b      	bne.n	8004cdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	e7fd      	b.n	8004cd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <xQueueGenericSendFromISR+0x3e>
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <xQueueGenericSendFromISR+0x42>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <xQueueGenericSendFromISR+0x44>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	e7fd      	b.n	8004d08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d103      	bne.n	8004d1a <xQueueGenericSendFromISR+0x6e>
 8004d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <xQueueGenericSendFromISR+0x72>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <xQueueGenericSendFromISR+0x74>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10b      	bne.n	8004d3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	623b      	str	r3, [r7, #32]
}
 8004d36:	bf00      	nop
 8004d38:	bf00      	nop
 8004d3a:	e7fd      	b.n	8004d38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d3c:	f002 f804 	bl	8006d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d40:	f3ef 8211 	mrs	r2, BASEPRI
 8004d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	61fa      	str	r2, [r7, #28]
 8004d56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d302      	bcc.n	8004d6e <xQueueGenericSendFromISR+0xc2>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d12f      	bne.n	8004dce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d84:	f000 f912 	bl	8004fac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d112      	bne.n	8004db8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d016      	beq.n	8004dc8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9c:	3324      	adds	r3, #36	@ 0x24
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fedc 	bl	8005b5c <xTaskRemoveFromEventList>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00e      	beq.n	8004dc8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00b      	beq.n	8004dc8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	e007      	b.n	8004dc8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004db8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	b25a      	sxtb	r2, r3
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004dcc:	e001      	b.n	8004dd2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ddc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3740      	adds	r7, #64	@ 0x40
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08c      	sub	sp, #48	@ 0x30
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10b      	bne.n	8004e1a <xQueueReceive+0x32>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	623b      	str	r3, [r7, #32]
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop
 8004e18:	e7fd      	b.n	8004e16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d103      	bne.n	8004e28 <xQueueReceive+0x40>
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <xQueueReceive+0x44>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <xQueueReceive+0x46>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10b      	bne.n	8004e4a <xQueueReceive+0x62>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	61fb      	str	r3, [r7, #28]
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	e7fd      	b.n	8004e46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e4a:	f001 f857 	bl	8005efc <xTaskGetSchedulerState>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <xQueueReceive+0x72>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <xQueueReceive+0x76>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <xQueueReceive+0x78>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <xQueueReceive+0x94>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	61bb      	str	r3, [r7, #24]
}
 8004e76:	bf00      	nop
 8004e78:	bf00      	nop
 8004e7a:	e7fd      	b.n	8004e78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e7c:	f001 fe84 	bl	8006b88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01f      	beq.n	8004ecc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e90:	f000 f8f6 	bl	8005080 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	1e5a      	subs	r2, r3, #1
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00f      	beq.n	8004ec4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea6:	3310      	adds	r3, #16
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fe57 	bl	8005b5c <xTaskRemoveFromEventList>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8004fa8 <xQueueReceive+0x1c0>)
 8004eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ec4:	f001 fe92 	bl	8006bec <vPortExitCritical>
				return pdPASS;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e069      	b.n	8004fa0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ed2:	f001 fe8b 	bl	8006bec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e062      	b.n	8004fa0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ee0:	f107 0310 	add.w	r3, r7, #16
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fe9d 	bl	8005c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eea:	2301      	movs	r3, #1
 8004eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eee:	f001 fe7d 	bl	8006bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ef2:	f000 fc0d 	bl	8005710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ef6:	f001 fe47 	bl	8006b88 <vPortEnterCritical>
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d103      	bne.n	8004f10 <xQueueReceive+0x128>
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f16:	b25b      	sxtb	r3, r3
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d103      	bne.n	8004f26 <xQueueReceive+0x13e>
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f26:	f001 fe61 	bl	8006bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f2a:	1d3a      	adds	r2, r7, #4
 8004f2c:	f107 0310 	add.w	r3, r7, #16
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fe8c 	bl	8005c50 <xTaskCheckForTimeOut>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d123      	bne.n	8004f86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f40:	f000 f916 	bl	8005170 <prvIsQueueEmpty>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d017      	beq.n	8004f7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	3324      	adds	r3, #36	@ 0x24
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fdb0 	bl	8005ab8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f5a:	f000 f8b7 	bl	80050cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f5e:	f000 fbe5 	bl	800572c <xTaskResumeAll>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d189      	bne.n	8004e7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f68:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa8 <xQueueReceive+0x1c0>)
 8004f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	e780      	b.n	8004e7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f7c:	f000 f8a6 	bl	80050cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f80:	f000 fbd4 	bl	800572c <xTaskResumeAll>
 8004f84:	e77a      	b.n	8004e7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f88:	f000 f8a0 	bl	80050cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f8c:	f000 fbce 	bl	800572c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f92:	f000 f8ed 	bl	8005170 <prvIsQueueEmpty>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f43f af6f 	beq.w	8004e7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3730      	adds	r7, #48	@ 0x30
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d14d      	bne.n	800506e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 ffae 	bl	8005f38 <xTaskPriorityDisinherit>
 8004fdc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	e043      	b.n	800506e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d119      	bne.n	8005020 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6858      	ldr	r0, [r3, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	f002 f902 	bl	8007200 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	441a      	add	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	d32b      	bcc.n	800506e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	605a      	str	r2, [r3, #4]
 800501e:	e026      	b.n	800506e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68d8      	ldr	r0, [r3, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005028:	461a      	mov	r2, r3
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	f002 f8e8 	bl	8007200 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	425b      	negs	r3, r3
 800503a:	441a      	add	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d207      	bcs.n	800505c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005054:	425b      	negs	r3, r3
 8005056:	441a      	add	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d105      	bne.n	800506e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	3b01      	subs	r3, #1
 800506c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005076:	697b      	ldr	r3, [r7, #20]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d018      	beq.n	80050c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	441a      	add	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d303      	bcc.n	80050b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68d9      	ldr	r1, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	461a      	mov	r2, r3
 80050be:	6838      	ldr	r0, [r7, #0]
 80050c0:	f002 f89e 	bl	8007200 <memcpy>
	}
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050d4:	f001 fd58 	bl	8006b88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050e0:	e011      	b.n	8005106 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d012      	beq.n	8005110 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3324      	adds	r3, #36	@ 0x24
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fd34 	bl	8005b5c <xTaskRemoveFromEventList>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050fa:	f000 fe0d 	bl	8005d18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	3b01      	subs	r3, #1
 8005102:	b2db      	uxtb	r3, r3
 8005104:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	dce9      	bgt.n	80050e2 <prvUnlockQueue+0x16>
 800510e:	e000      	b.n	8005112 <prvUnlockQueue+0x46>
					break;
 8005110:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	22ff      	movs	r2, #255	@ 0xff
 8005116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800511a:	f001 fd67 	bl	8006bec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800511e:	f001 fd33 	bl	8006b88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005128:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800512a:	e011      	b.n	8005150 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d012      	beq.n	800515a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3310      	adds	r3, #16
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fd0f 	bl	8005b5c <xTaskRemoveFromEventList>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005144:	f000 fde8 	bl	8005d18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005148:	7bbb      	ldrb	r3, [r7, #14]
 800514a:	3b01      	subs	r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005154:	2b00      	cmp	r3, #0
 8005156:	dce9      	bgt.n	800512c <prvUnlockQueue+0x60>
 8005158:	e000      	b.n	800515c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800515a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	22ff      	movs	r2, #255	@ 0xff
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005164:	f001 fd42 	bl	8006bec <vPortExitCritical>
}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005178:	f001 fd06 	bl	8006b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e001      	b.n	800518e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800518e:	f001 fd2d 	bl	8006bec <vPortExitCritical>

	return xReturn;
 8005192:	68fb      	ldr	r3, [r7, #12]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051a4:	f001 fcf0 	bl	8006b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d102      	bne.n	80051ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051b4:	2301      	movs	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e001      	b.n	80051be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051be:	f001 fd15 	bl	8006bec <vPortExitCritical>

	return xReturn;
 80051c2:	68fb      	ldr	r3, [r7, #12]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e014      	b.n	8005206 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051dc:	4a0f      	ldr	r2, [pc, #60]	@ (800521c <vQueueAddToRegistry+0x50>)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051e8:	490c      	ldr	r1, [pc, #48]	@ (800521c <vQueueAddToRegistry+0x50>)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051f2:	4a0a      	ldr	r2, [pc, #40]	@ (800521c <vQueueAddToRegistry+0x50>)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4413      	add	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051fe:	e006      	b.n	800520e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b07      	cmp	r3, #7
 800520a:	d9e7      	bls.n	80051dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000b94 	.word	0x20000b94

08005220 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005230:	f001 fcaa 	bl	8006b88 <vPortEnterCritical>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800523a:	b25b      	sxtb	r3, r3
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d103      	bne.n	800524a <vQueueWaitForMessageRestricted+0x2a>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005250:	b25b      	sxtb	r3, r3
 8005252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005256:	d103      	bne.n	8005260 <vQueueWaitForMessageRestricted+0x40>
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005260:	f001 fcc4 	bl	8006bec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	3324      	adds	r3, #36	@ 0x24
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fc45 	bl	8005b04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f7ff ff26 	bl	80050cc <prvUnlockQueue>
	}
 8005280:	bf00      	nop
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08e      	sub	sp, #56	@ 0x38
 800528c:	af04      	add	r7, sp, #16
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10b      	bne.n	80052b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	623b      	str	r3, [r7, #32]
}
 80052ae:	bf00      	nop
 80052b0:	bf00      	nop
 80052b2:	e7fd      	b.n	80052b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10b      	bne.n	80052d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	61fb      	str	r3, [r7, #28]
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	e7fd      	b.n	80052ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052d2:	235c      	movs	r3, #92	@ 0x5c
 80052d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80052da:	d00b      	beq.n	80052f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61bb      	str	r3, [r7, #24]
}
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	e7fd      	b.n	80052f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01e      	beq.n	800533a <xTaskCreateStatic+0xb2>
 80052fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01b      	beq.n	800533a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005304:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800530a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005314:	2300      	movs	r3, #0
 8005316:	9303      	str	r3, [sp, #12]
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	9302      	str	r3, [sp, #8]
 800531c:	f107 0314 	add.w	r3, r7, #20
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f850 	bl	80053d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005334:	f000 f8de 	bl	80054f4 <prvAddNewTaskToReadyList>
 8005338:	e001      	b.n	800533e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800533e:	697b      	ldr	r3, [r7, #20]
	}
 8005340:	4618      	mov	r0, r3
 8005342:	3728      	adds	r7, #40	@ 0x28
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08c      	sub	sp, #48	@ 0x30
 800534c:	af04      	add	r7, sp, #16
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4618      	mov	r0, r3
 800535e:	f001 fd35 	bl	8006dcc <pvPortMalloc>
 8005362:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00e      	beq.n	8005388 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800536a:	205c      	movs	r0, #92	@ 0x5c
 800536c:	f001 fd2e 	bl	8006dcc <pvPortMalloc>
 8005370:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	631a      	str	r2, [r3, #48]	@ 0x30
 800537e:	e005      	b.n	800538c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005380:	6978      	ldr	r0, [r7, #20]
 8005382:	f001 fdf1 	bl	8006f68 <vPortFree>
 8005386:	e001      	b.n	800538c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d017      	beq.n	80053c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	2300      	movs	r3, #0
 800539e:	9303      	str	r3, [sp, #12]
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	9302      	str	r3, [sp, #8]
 80053a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f80e 	bl	80053d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053b6:	69f8      	ldr	r0, [r7, #28]
 80053b8:	f000 f89c 	bl	80054f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053bc:	2301      	movs	r3, #1
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	e002      	b.n	80053c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053c2:	f04f 33ff 	mov.w	r3, #4294967295
 80053c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053c8:	69bb      	ldr	r3, [r7, #24]
	}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b088      	sub	sp, #32
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	461a      	mov	r2, r3
 80053ea:	21a5      	movs	r1, #165	@ 0xa5
 80053ec:	f001 fedc 	bl	80071a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053fa:	3b01      	subs	r3, #1
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	f023 0307 	bic.w	r3, r3, #7
 8005408:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	617b      	str	r3, [r7, #20]
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01f      	beq.n	8005472 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	e012      	b.n	800545e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	7819      	ldrb	r1, [r3, #0]
 8005440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	3334      	adds	r3, #52	@ 0x34
 8005448:	460a      	mov	r2, r1
 800544a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d006      	beq.n	8005466 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	3301      	adds	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2b0f      	cmp	r3, #15
 8005462:	d9e9      	bls.n	8005438 <prvInitialiseNewTask+0x66>
 8005464:	e000      	b.n	8005468 <prvInitialiseNewTask+0x96>
			{
				break;
 8005466:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005470:	e003      	b.n	800547a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	2b37      	cmp	r3, #55	@ 0x37
 800547e:	d901      	bls.n	8005484 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005480:	2337      	movs	r3, #55	@ 0x37
 8005482:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005488:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800548e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	2200      	movs	r2, #0
 8005494:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff f966 	bl	800476c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a2:	3318      	adds	r3, #24
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff f961 	bl	800476c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	2200      	movs	r2, #0
 80054c4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	68f9      	ldr	r1, [r7, #12]
 80054d2:	69b8      	ldr	r0, [r7, #24]
 80054d4:	f001 fa2a 	bl	800692c <pxPortInitialiseStack>
 80054d8:	4602      	mov	r2, r0
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ea:	bf00      	nop
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054fc:	f001 fb44 	bl	8006b88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005500:	4b2d      	ldr	r3, [pc, #180]	@ (80055b8 <prvAddNewTaskToReadyList+0xc4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	4a2c      	ldr	r2, [pc, #176]	@ (80055b8 <prvAddNewTaskToReadyList+0xc4>)
 8005508:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800550a:	4b2c      	ldr	r3, [pc, #176]	@ (80055bc <prvAddNewTaskToReadyList+0xc8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005512:	4a2a      	ldr	r2, [pc, #168]	@ (80055bc <prvAddNewTaskToReadyList+0xc8>)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005518:	4b27      	ldr	r3, [pc, #156]	@ (80055b8 <prvAddNewTaskToReadyList+0xc4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d110      	bne.n	8005542 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005520:	f000 fc1e 	bl	8005d60 <prvInitialiseTaskLists>
 8005524:	e00d      	b.n	8005542 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005526:	4b26      	ldr	r3, [pc, #152]	@ (80055c0 <prvAddNewTaskToReadyList+0xcc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800552e:	4b23      	ldr	r3, [pc, #140]	@ (80055bc <prvAddNewTaskToReadyList+0xc8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	429a      	cmp	r2, r3
 800553a:	d802      	bhi.n	8005542 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800553c:	4a1f      	ldr	r2, [pc, #124]	@ (80055bc <prvAddNewTaskToReadyList+0xc8>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005542:	4b20      	ldr	r3, [pc, #128]	@ (80055c4 <prvAddNewTaskToReadyList+0xd0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3301      	adds	r3, #1
 8005548:	4a1e      	ldr	r2, [pc, #120]	@ (80055c4 <prvAddNewTaskToReadyList+0xd0>)
 800554a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800554c:	4b1d      	ldr	r3, [pc, #116]	@ (80055c4 <prvAddNewTaskToReadyList+0xd0>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005558:	4b1b      	ldr	r3, [pc, #108]	@ (80055c8 <prvAddNewTaskToReadyList+0xd4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d903      	bls.n	8005568 <prvAddNewTaskToReadyList+0x74>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	4a18      	ldr	r2, [pc, #96]	@ (80055c8 <prvAddNewTaskToReadyList+0xd4>)
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4a15      	ldr	r2, [pc, #84]	@ (80055cc <prvAddNewTaskToReadyList+0xd8>)
 8005576:	441a      	add	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f7ff f901 	bl	8004786 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005584:	f001 fb32 	bl	8006bec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005588:	4b0d      	ldr	r3, [pc, #52]	@ (80055c0 <prvAddNewTaskToReadyList+0xcc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00e      	beq.n	80055ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005590:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <prvAddNewTaskToReadyList+0xc8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	429a      	cmp	r2, r3
 800559c:	d207      	bcs.n	80055ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800559e:	4b0c      	ldr	r3, [pc, #48]	@ (80055d0 <prvAddNewTaskToReadyList+0xdc>)
 80055a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	200010a8 	.word	0x200010a8
 80055bc:	20000bd4 	.word	0x20000bd4
 80055c0:	200010b4 	.word	0x200010b4
 80055c4:	200010c4 	.word	0x200010c4
 80055c8:	200010b0 	.word	0x200010b0
 80055cc:	20000bd8 	.word	0x20000bd8
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d018      	beq.n	8005618 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055e6:	4b14      	ldr	r3, [pc, #80]	@ (8005638 <vTaskDelay+0x64>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00b      	beq.n	8005606 <vTaskDelay+0x32>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	60bb      	str	r3, [r7, #8]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005606:	f000 f883 	bl	8005710 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800560a:	2100      	movs	r1, #0
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fddf 	bl	80061d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005612:	f000 f88b 	bl	800572c <xTaskResumeAll>
 8005616:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800561e:	4b07      	ldr	r3, [pc, #28]	@ (800563c <vTaskDelay+0x68>)
 8005620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200010d0 	.word	0x200010d0
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08a      	sub	sp, #40	@ 0x28
 8005644:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800564e:	463a      	mov	r2, r7
 8005650:	1d39      	adds	r1, r7, #4
 8005652:	f107 0308 	add.w	r3, r7, #8
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff f834 	bl	80046c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	9202      	str	r2, [sp, #8]
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	2300      	movs	r3, #0
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	2300      	movs	r3, #0
 800566c:	460a      	mov	r2, r1
 800566e:	4922      	ldr	r1, [pc, #136]	@ (80056f8 <vTaskStartScheduler+0xb8>)
 8005670:	4822      	ldr	r0, [pc, #136]	@ (80056fc <vTaskStartScheduler+0xbc>)
 8005672:	f7ff fe09 	bl	8005288 <xTaskCreateStatic>
 8005676:	4603      	mov	r3, r0
 8005678:	4a21      	ldr	r2, [pc, #132]	@ (8005700 <vTaskStartScheduler+0xc0>)
 800567a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800567c:	4b20      	ldr	r3, [pc, #128]	@ (8005700 <vTaskStartScheduler+0xc0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005684:	2301      	movs	r3, #1
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	e001      	b.n	800568e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d102      	bne.n	800569a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005694:	f000 fdf0 	bl	8006278 <xTimerCreateTimerTask>
 8005698:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d116      	bne.n	80056ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	613b      	str	r3, [r7, #16]
}
 80056b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056b4:	4b13      	ldr	r3, [pc, #76]	@ (8005704 <vTaskStartScheduler+0xc4>)
 80056b6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056bc:	4b12      	ldr	r3, [pc, #72]	@ (8005708 <vTaskStartScheduler+0xc8>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056c2:	4b12      	ldr	r3, [pc, #72]	@ (800570c <vTaskStartScheduler+0xcc>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056c8:	f001 f9ba 	bl	8006a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056cc:	e00f      	b.n	80056ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d10b      	bne.n	80056ee <vTaskStartScheduler+0xae>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	60fb      	str	r3, [r7, #12]
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	e7fd      	b.n	80056ea <vTaskStartScheduler+0xaa>
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	08007248 	.word	0x08007248
 80056fc:	08005d31 	.word	0x08005d31
 8005700:	200010cc 	.word	0x200010cc
 8005704:	200010c8 	.word	0x200010c8
 8005708:	200010b4 	.word	0x200010b4
 800570c:	200010ac 	.word	0x200010ac

08005710 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005714:	4b04      	ldr	r3, [pc, #16]	@ (8005728 <vTaskSuspendAll+0x18>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3301      	adds	r3, #1
 800571a:	4a03      	ldr	r2, [pc, #12]	@ (8005728 <vTaskSuspendAll+0x18>)
 800571c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800571e:	bf00      	nop
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	200010d0 	.word	0x200010d0

0800572c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800573a:	4b42      	ldr	r3, [pc, #264]	@ (8005844 <xTaskResumeAll+0x118>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10b      	bne.n	800575a <xTaskResumeAll+0x2e>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	603b      	str	r3, [r7, #0]
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	e7fd      	b.n	8005756 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800575a:	f001 fa15 	bl	8006b88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800575e:	4b39      	ldr	r3, [pc, #228]	@ (8005844 <xTaskResumeAll+0x118>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3b01      	subs	r3, #1
 8005764:	4a37      	ldr	r2, [pc, #220]	@ (8005844 <xTaskResumeAll+0x118>)
 8005766:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005768:	4b36      	ldr	r3, [pc, #216]	@ (8005844 <xTaskResumeAll+0x118>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d162      	bne.n	8005836 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005770:	4b35      	ldr	r3, [pc, #212]	@ (8005848 <xTaskResumeAll+0x11c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d05e      	beq.n	8005836 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005778:	e02f      	b.n	80057da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577a:	4b34      	ldr	r3, [pc, #208]	@ (800584c <xTaskResumeAll+0x120>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3318      	adds	r3, #24
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff f85a 	bl	8004840 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3304      	adds	r3, #4
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff f855 	bl	8004840 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579a:	4b2d      	ldr	r3, [pc, #180]	@ (8005850 <xTaskResumeAll+0x124>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d903      	bls.n	80057aa <xTaskResumeAll+0x7e>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005850 <xTaskResumeAll+0x124>)
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4a27      	ldr	r2, [pc, #156]	@ (8005854 <xTaskResumeAll+0x128>)
 80057b8:	441a      	add	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3304      	adds	r3, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f7fe ffe0 	bl	8004786 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ca:	4b23      	ldr	r3, [pc, #140]	@ (8005858 <xTaskResumeAll+0x12c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80057d4:	4b21      	ldr	r3, [pc, #132]	@ (800585c <xTaskResumeAll+0x130>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057da:	4b1c      	ldr	r3, [pc, #112]	@ (800584c <xTaskResumeAll+0x120>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1cb      	bne.n	800577a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057e8:	f000 fb58 	bl	8005e9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005860 <xTaskResumeAll+0x134>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d010      	beq.n	800581a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057f8:	f000 f846 	bl	8005888 <xTaskIncrementTick>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005802:	4b16      	ldr	r3, [pc, #88]	@ (800585c <xTaskResumeAll+0x130>)
 8005804:	2201      	movs	r2, #1
 8005806:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3b01      	subs	r3, #1
 800580c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f1      	bne.n	80057f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005814:	4b12      	ldr	r3, [pc, #72]	@ (8005860 <xTaskResumeAll+0x134>)
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800581a:	4b10      	ldr	r3, [pc, #64]	@ (800585c <xTaskResumeAll+0x130>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d009      	beq.n	8005836 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005822:	2301      	movs	r3, #1
 8005824:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005826:	4b0f      	ldr	r3, [pc, #60]	@ (8005864 <xTaskResumeAll+0x138>)
 8005828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005836:	f001 f9d9 	bl	8006bec <vPortExitCritical>

	return xAlreadyYielded;
 800583a:	68bb      	ldr	r3, [r7, #8]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	200010d0 	.word	0x200010d0
 8005848:	200010a8 	.word	0x200010a8
 800584c:	20001068 	.word	0x20001068
 8005850:	200010b0 	.word	0x200010b0
 8005854:	20000bd8 	.word	0x20000bd8
 8005858:	20000bd4 	.word	0x20000bd4
 800585c:	200010bc 	.word	0x200010bc
 8005860:	200010b8 	.word	0x200010b8
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800586e:	4b05      	ldr	r3, [pc, #20]	@ (8005884 <xTaskGetTickCount+0x1c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005874:	687b      	ldr	r3, [r7, #4]
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	200010ac 	.word	0x200010ac

08005888 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005892:	4b4f      	ldr	r3, [pc, #316]	@ (80059d0 <xTaskIncrementTick+0x148>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f040 8090 	bne.w	80059bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800589c:	4b4d      	ldr	r3, [pc, #308]	@ (80059d4 <xTaskIncrementTick+0x14c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058a4:	4a4b      	ldr	r2, [pc, #300]	@ (80059d4 <xTaskIncrementTick+0x14c>)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d121      	bne.n	80058f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80058b0:	4b49      	ldr	r3, [pc, #292]	@ (80059d8 <xTaskIncrementTick+0x150>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	603b      	str	r3, [r7, #0]
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	e7fd      	b.n	80058ce <xTaskIncrementTick+0x46>
 80058d2:	4b41      	ldr	r3, [pc, #260]	@ (80059d8 <xTaskIncrementTick+0x150>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	4b40      	ldr	r3, [pc, #256]	@ (80059dc <xTaskIncrementTick+0x154>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3e      	ldr	r2, [pc, #248]	@ (80059d8 <xTaskIncrementTick+0x150>)
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4a3e      	ldr	r2, [pc, #248]	@ (80059dc <xTaskIncrementTick+0x154>)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	4b3e      	ldr	r3, [pc, #248]	@ (80059e0 <xTaskIncrementTick+0x158>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a3c      	ldr	r2, [pc, #240]	@ (80059e0 <xTaskIncrementTick+0x158>)
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	f000 fad4 	bl	8005e9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058f4:	4b3b      	ldr	r3, [pc, #236]	@ (80059e4 <xTaskIncrementTick+0x15c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d349      	bcc.n	8005992 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058fe:	4b36      	ldr	r3, [pc, #216]	@ (80059d8 <xTaskIncrementTick+0x150>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005908:	4b36      	ldr	r3, [pc, #216]	@ (80059e4 <xTaskIncrementTick+0x15c>)
 800590a:	f04f 32ff 	mov.w	r2, #4294967295
 800590e:	601a      	str	r2, [r3, #0]
					break;
 8005910:	e03f      	b.n	8005992 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005912:	4b31      	ldr	r3, [pc, #196]	@ (80059d8 <xTaskIncrementTick+0x150>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d203      	bcs.n	8005932 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800592a:	4a2e      	ldr	r2, [pc, #184]	@ (80059e4 <xTaskIncrementTick+0x15c>)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005930:	e02f      	b.n	8005992 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	3304      	adds	r3, #4
 8005936:	4618      	mov	r0, r3
 8005938:	f7fe ff82 	bl	8004840 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	3318      	adds	r3, #24
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe ff79 	bl	8004840 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005952:	4b25      	ldr	r3, [pc, #148]	@ (80059e8 <xTaskIncrementTick+0x160>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d903      	bls.n	8005962 <xTaskIncrementTick+0xda>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	4a22      	ldr	r2, [pc, #136]	@ (80059e8 <xTaskIncrementTick+0x160>)
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4a1f      	ldr	r2, [pc, #124]	@ (80059ec <xTaskIncrementTick+0x164>)
 8005970:	441a      	add	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3304      	adds	r3, #4
 8005976:	4619      	mov	r1, r3
 8005978:	4610      	mov	r0, r2
 800597a:	f7fe ff04 	bl	8004786 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005982:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <xTaskIncrementTick+0x168>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	429a      	cmp	r2, r3
 800598a:	d3b8      	bcc.n	80058fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005990:	e7b5      	b.n	80058fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005992:	4b17      	ldr	r3, [pc, #92]	@ (80059f0 <xTaskIncrementTick+0x168>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005998:	4914      	ldr	r1, [pc, #80]	@ (80059ec <xTaskIncrementTick+0x164>)
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d901      	bls.n	80059ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80059aa:	2301      	movs	r3, #1
 80059ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059ae:	4b11      	ldr	r3, [pc, #68]	@ (80059f4 <xTaskIncrementTick+0x16c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d007      	beq.n	80059c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80059b6:	2301      	movs	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e004      	b.n	80059c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059bc:	4b0e      	ldr	r3, [pc, #56]	@ (80059f8 <xTaskIncrementTick+0x170>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	4a0d      	ldr	r2, [pc, #52]	@ (80059f8 <xTaskIncrementTick+0x170>)
 80059c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059c6:	697b      	ldr	r3, [r7, #20]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	200010d0 	.word	0x200010d0
 80059d4:	200010ac 	.word	0x200010ac
 80059d8:	20001060 	.word	0x20001060
 80059dc:	20001064 	.word	0x20001064
 80059e0:	200010c0 	.word	0x200010c0
 80059e4:	200010c8 	.word	0x200010c8
 80059e8:	200010b0 	.word	0x200010b0
 80059ec:	20000bd8 	.word	0x20000bd8
 80059f0:	20000bd4 	.word	0x20000bd4
 80059f4:	200010bc 	.word	0x200010bc
 80059f8:	200010b8 	.word	0x200010b8

080059fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a02:	4b28      	ldr	r3, [pc, #160]	@ (8005aa4 <vTaskSwitchContext+0xa8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a0a:	4b27      	ldr	r3, [pc, #156]	@ (8005aa8 <vTaskSwitchContext+0xac>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a10:	e042      	b.n	8005a98 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005a12:	4b25      	ldr	r3, [pc, #148]	@ (8005aa8 <vTaskSwitchContext+0xac>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a18:	4b24      	ldr	r3, [pc, #144]	@ (8005aac <vTaskSwitchContext+0xb0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e011      	b.n	8005a44 <vTaskSwitchContext+0x48>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <vTaskSwitchContext+0x42>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	607b      	str	r3, [r7, #4]
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	e7fd      	b.n	8005a3a <vTaskSwitchContext+0x3e>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	491a      	ldr	r1, [pc, #104]	@ (8005ab0 <vTaskSwitchContext+0xb4>)
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0e3      	beq.n	8005a20 <vTaskSwitchContext+0x24>
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a13      	ldr	r2, [pc, #76]	@ (8005ab0 <vTaskSwitchContext+0xb4>)
 8005a64:	4413      	add	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d104      	bne.n	8005a88 <vTaskSwitchContext+0x8c>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	605a      	str	r2, [r3, #4]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	4a09      	ldr	r2, [pc, #36]	@ (8005ab4 <vTaskSwitchContext+0xb8>)
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	4a06      	ldr	r2, [pc, #24]	@ (8005aac <vTaskSwitchContext+0xb0>)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6013      	str	r3, [r2, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	200010d0 	.word	0x200010d0
 8005aa8:	200010bc 	.word	0x200010bc
 8005aac:	200010b0 	.word	0x200010b0
 8005ab0:	20000bd8 	.word	0x20000bd8
 8005ab4:	20000bd4 	.word	0x20000bd4

08005ab8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10b      	bne.n	8005ae0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	60fb      	str	r3, [r7, #12]
}
 8005ada:	bf00      	nop
 8005adc:	bf00      	nop
 8005ade:	e7fd      	b.n	8005adc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ae0:	4b07      	ldr	r3, [pc, #28]	@ (8005b00 <vTaskPlaceOnEventList+0x48>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3318      	adds	r3, #24
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7fe fe70 	bl	80047ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005aee:	2101      	movs	r1, #1
 8005af0:	6838      	ldr	r0, [r7, #0]
 8005af2:	f000 fb6d 	bl	80061d0 <prvAddCurrentTaskToDelayedList>
}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000bd4 	.word	0x20000bd4

08005b04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	617b      	str	r3, [r7, #20]
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	e7fd      	b.n	8005b2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b58 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3318      	adds	r3, #24
 8005b34:	4619      	mov	r1, r3
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7fe fe25 	bl	8004786 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
 8005b46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	68b8      	ldr	r0, [r7, #8]
 8005b4c:	f000 fb40 	bl	80061d0 <prvAddCurrentTaskToDelayedList>
	}
 8005b50:	bf00      	nop
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000bd4 	.word	0x20000bd4

08005b5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10b      	bne.n	8005b8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60fb      	str	r3, [r7, #12]
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	e7fd      	b.n	8005b86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	3318      	adds	r3, #24
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fe56 	bl	8004840 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b94:	4b1d      	ldr	r3, [pc, #116]	@ (8005c0c <xTaskRemoveFromEventList+0xb0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11d      	bne.n	8005bd8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fe fe4d 	bl	8004840 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005baa:	4b19      	ldr	r3, [pc, #100]	@ (8005c10 <xTaskRemoveFromEventList+0xb4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d903      	bls.n	8005bba <xTaskRemoveFromEventList+0x5e>
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	4a16      	ldr	r2, [pc, #88]	@ (8005c10 <xTaskRemoveFromEventList+0xb4>)
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4a13      	ldr	r2, [pc, #76]	@ (8005c14 <xTaskRemoveFromEventList+0xb8>)
 8005bc8:	441a      	add	r2, r3
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7fe fdd8 	bl	8004786 <vListInsertEnd>
 8005bd6:	e005      	b.n	8005be4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	3318      	adds	r3, #24
 8005bdc:	4619      	mov	r1, r3
 8005bde:	480e      	ldr	r0, [pc, #56]	@ (8005c18 <xTaskRemoveFromEventList+0xbc>)
 8005be0:	f7fe fdd1 	bl	8004786 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be8:	4b0c      	ldr	r3, [pc, #48]	@ (8005c1c <xTaskRemoveFromEventList+0xc0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d905      	bls.n	8005bfe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <xTaskRemoveFromEventList+0xc4>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	e001      	b.n	8005c02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c02:	697b      	ldr	r3, [r7, #20]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200010d0 	.word	0x200010d0
 8005c10:	200010b0 	.word	0x200010b0
 8005c14:	20000bd8 	.word	0x20000bd8
 8005c18:	20001068 	.word	0x20001068
 8005c1c:	20000bd4 	.word	0x20000bd4
 8005c20:	200010bc 	.word	0x200010bc

08005c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c2c:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <vTaskInternalSetTimeOutState+0x24>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c34:	4b05      	ldr	r3, [pc, #20]	@ (8005c4c <vTaskInternalSetTimeOutState+0x28>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	605a      	str	r2, [r3, #4]
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	200010c0 	.word	0x200010c0
 8005c4c:	200010ac 	.word	0x200010ac

08005c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	613b      	str	r3, [r7, #16]
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10b      	bne.n	8005c96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60fb      	str	r3, [r7, #12]
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	e7fd      	b.n	8005c92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005c96:	f000 ff77 	bl	8006b88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005d10 <xTaskCheckForTimeOut+0xc0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb2:	d102      	bne.n	8005cba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	e023      	b.n	8005d02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	4b15      	ldr	r3, [pc, #84]	@ (8005d14 <xTaskCheckForTimeOut+0xc4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d007      	beq.n	8005cd6 <xTaskCheckForTimeOut+0x86>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d302      	bcc.n	8005cd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	e015      	b.n	8005d02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d20b      	bcs.n	8005cf8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	1ad2      	subs	r2, r2, r3
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff ff99 	bl	8005c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	e004      	b.n	8005d02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d02:	f000 ff73 	bl	8006bec <vPortExitCritical>

	return xReturn;
 8005d06:	69fb      	ldr	r3, [r7, #28]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	200010ac 	.word	0x200010ac
 8005d14:	200010c0 	.word	0x200010c0

08005d18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d1c:	4b03      	ldr	r3, [pc, #12]	@ (8005d2c <vTaskMissedYield+0x14>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
}
 8005d22:	bf00      	nop
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	200010bc 	.word	0x200010bc

08005d30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d38:	f000 f852 	bl	8005de0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d3c:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <prvIdleTask+0x28>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d9f9      	bls.n	8005d38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d44:	4b05      	ldr	r3, [pc, #20]	@ (8005d5c <prvIdleTask+0x2c>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d54:	e7f0      	b.n	8005d38 <prvIdleTask+0x8>
 8005d56:	bf00      	nop
 8005d58:	20000bd8 	.word	0x20000bd8
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d66:	2300      	movs	r3, #0
 8005d68:	607b      	str	r3, [r7, #4]
 8005d6a:	e00c      	b.n	8005d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4a12      	ldr	r2, [pc, #72]	@ (8005dc0 <prvInitialiseTaskLists+0x60>)
 8005d78:	4413      	add	r3, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fe fcd6 	bl	800472c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3301      	adds	r3, #1
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b37      	cmp	r3, #55	@ 0x37
 8005d8a:	d9ef      	bls.n	8005d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d8c:	480d      	ldr	r0, [pc, #52]	@ (8005dc4 <prvInitialiseTaskLists+0x64>)
 8005d8e:	f7fe fccd 	bl	800472c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d92:	480d      	ldr	r0, [pc, #52]	@ (8005dc8 <prvInitialiseTaskLists+0x68>)
 8005d94:	f7fe fcca 	bl	800472c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d98:	480c      	ldr	r0, [pc, #48]	@ (8005dcc <prvInitialiseTaskLists+0x6c>)
 8005d9a:	f7fe fcc7 	bl	800472c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d9e:	480c      	ldr	r0, [pc, #48]	@ (8005dd0 <prvInitialiseTaskLists+0x70>)
 8005da0:	f7fe fcc4 	bl	800472c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005da4:	480b      	ldr	r0, [pc, #44]	@ (8005dd4 <prvInitialiseTaskLists+0x74>)
 8005da6:	f7fe fcc1 	bl	800472c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005daa:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd8 <prvInitialiseTaskLists+0x78>)
 8005dac:	4a05      	ldr	r2, [pc, #20]	@ (8005dc4 <prvInitialiseTaskLists+0x64>)
 8005dae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005db0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <prvInitialiseTaskLists+0x7c>)
 8005db2:	4a05      	ldr	r2, [pc, #20]	@ (8005dc8 <prvInitialiseTaskLists+0x68>)
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000bd8 	.word	0x20000bd8
 8005dc4:	20001038 	.word	0x20001038
 8005dc8:	2000104c 	.word	0x2000104c
 8005dcc:	20001068 	.word	0x20001068
 8005dd0:	2000107c 	.word	0x2000107c
 8005dd4:	20001094 	.word	0x20001094
 8005dd8:	20001060 	.word	0x20001060
 8005ddc:	20001064 	.word	0x20001064

08005de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de6:	e019      	b.n	8005e1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005de8:	f000 fece 	bl	8006b88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dec:	4b10      	ldr	r3, [pc, #64]	@ (8005e30 <prvCheckTasksWaitingTermination+0x50>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fd21 	bl	8004840 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005e34 <prvCheckTasksWaitingTermination+0x54>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	4a0b      	ldr	r2, [pc, #44]	@ (8005e34 <prvCheckTasksWaitingTermination+0x54>)
 8005e06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e08:	4b0b      	ldr	r3, [pc, #44]	@ (8005e38 <prvCheckTasksWaitingTermination+0x58>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e38 <prvCheckTasksWaitingTermination+0x58>)
 8005e10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e12:	f000 feeb 	bl	8006bec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f810 	bl	8005e3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e1c:	4b06      	ldr	r3, [pc, #24]	@ (8005e38 <prvCheckTasksWaitingTermination+0x58>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e1      	bne.n	8005de8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	2000107c 	.word	0x2000107c
 8005e34:	200010a8 	.word	0x200010a8
 8005e38:	20001090 	.word	0x20001090

08005e3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d108      	bne.n	8005e60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 f888 	bl	8006f68 <vPortFree>
				vPortFree( pxTCB );
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 f885 	bl	8006f68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e5e:	e019      	b.n	8005e94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d103      	bne.n	8005e72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 f87c 	bl	8006f68 <vPortFree>
	}
 8005e70:	e010      	b.n	8005e94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d00b      	beq.n	8005e94 <prvDeleteTCB+0x58>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	60fb      	str	r3, [r7, #12]
}
 8005e8e:	bf00      	nop
 8005e90:	bf00      	nop
 8005e92:	e7fd      	b.n	8005e90 <prvDeleteTCB+0x54>
	}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed4 <prvResetNextTaskUnblockTime+0x38>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d104      	bne.n	8005eb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8005eae:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eb4:	e008      	b.n	8005ec8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb6:	4b07      	ldr	r3, [pc, #28]	@ (8005ed4 <prvResetNextTaskUnblockTime+0x38>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4a04      	ldr	r2, [pc, #16]	@ (8005ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ec6:	6013      	str	r3, [r2, #0]
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20001060 	.word	0x20001060
 8005ed8:	200010c8 	.word	0x200010c8

08005edc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005ee2:	4b05      	ldr	r3, [pc, #20]	@ (8005ef8 <xTaskGetCurrentTaskHandle+0x1c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005ee8:	687b      	ldr	r3, [r7, #4]
	}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20000bd4 	.word	0x20000bd4

08005efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f02:	4b0b      	ldr	r3, [pc, #44]	@ (8005f30 <xTaskGetSchedulerState+0x34>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	e008      	b.n	8005f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f10:	4b08      	ldr	r3, [pc, #32]	@ (8005f34 <xTaskGetSchedulerState+0x38>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f18:	2302      	movs	r3, #2
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	e001      	b.n	8005f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f22:	687b      	ldr	r3, [r7, #4]
	}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	200010b4 	.word	0x200010b4
 8005f34:	200010d0 	.word	0x200010d0

08005f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d058      	beq.n	8006000 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800600c <xTaskPriorityDisinherit+0xd4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d00b      	beq.n	8005f70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	e7fd      	b.n	8005f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10b      	bne.n	8005f90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60bb      	str	r3, [r7, #8]
}
 8005f8a:	bf00      	nop
 8005f8c:	bf00      	nop
 8005f8e:	e7fd      	b.n	8005f8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f94:	1e5a      	subs	r2, r3, #1
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d02c      	beq.n	8006000 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d128      	bne.n	8006000 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fc44 	bl	8004840 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006010 <xTaskPriorityDisinherit+0xd8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d903      	bls.n	8005fe0 <xTaskPriorityDisinherit+0xa8>
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8006010 <xTaskPriorityDisinherit+0xd8>)
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4a09      	ldr	r2, [pc, #36]	@ (8006014 <xTaskPriorityDisinherit+0xdc>)
 8005fee:	441a      	add	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f7fe fbc5 	bl	8004786 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006000:	697b      	ldr	r3, [r7, #20]
	}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000bd4 	.word	0x20000bd4
 8006010:	200010b0 	.word	0x200010b0
 8006014:	20000bd8 	.word	0x20000bd8

08006018 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006022:	f000 fdb1 	bl	8006b88 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006026:	4b1e      	ldr	r3, [pc, #120]	@ (80060a0 <ulTaskNotifyTake+0x88>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602c:	2b00      	cmp	r3, #0
 800602e:	d113      	bne.n	8006058 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006030:	4b1b      	ldr	r3, [pc, #108]	@ (80060a0 <ulTaskNotifyTake+0x88>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006040:	2101      	movs	r1, #1
 8006042:	6838      	ldr	r0, [r7, #0]
 8006044:	f000 f8c4 	bl	80061d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006048:	4b16      	ldr	r3, [pc, #88]	@ (80060a4 <ulTaskNotifyTake+0x8c>)
 800604a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006058:	f000 fdc8 	bl	8006bec <vPortExitCritical>

		taskENTER_CRITICAL();
 800605c:	f000 fd94 	bl	8006b88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006060:	4b0f      	ldr	r3, [pc, #60]	@ (80060a0 <ulTaskNotifyTake+0x88>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006066:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d004      	beq.n	800607e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006074:	4b0a      	ldr	r3, [pc, #40]	@ (80060a0 <ulTaskNotifyTake+0x88>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2200      	movs	r2, #0
 800607a:	655a      	str	r2, [r3, #84]	@ 0x54
 800607c:	e004      	b.n	8006088 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800607e:	4b08      	ldr	r3, [pc, #32]	@ (80060a0 <ulTaskNotifyTake+0x88>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	3a01      	subs	r2, #1
 8006086:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006088:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <ulTaskNotifyTake+0x88>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8006092:	f000 fdab 	bl	8006bec <vPortExitCritical>

		return ulReturn;
 8006096:	68fb      	ldr	r3, [r7, #12]
	}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000bd4 	.word	0x20000bd4
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	@ 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10b      	bne.n	80060d0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	61bb      	str	r3, [r7, #24]
}
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	e7fd      	b.n	80060cc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060d0:	f000 fe3a 	bl	8006d48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 80060d8:	f3ef 8211 	mrs	r2, BASEPRI
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	617a      	str	r2, [r7, #20]
 80060ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060f0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060f2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80060fa:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800610e:	7ffb      	ldrb	r3, [r7, #31]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d147      	bne.n	80061a4 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	60fb      	str	r3, [r7, #12]
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	e7fd      	b.n	8006130 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006134:	4b20      	ldr	r3, [pc, #128]	@ (80061b8 <vTaskNotifyGiveFromISR+0x110>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d11d      	bne.n	8006178 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	3304      	adds	r3, #4
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fb7d 	bl	8004840 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614a:	4b1c      	ldr	r3, [pc, #112]	@ (80061bc <vTaskNotifyGiveFromISR+0x114>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d903      	bls.n	800615a <vTaskNotifyGiveFromISR+0xb2>
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006156:	4a19      	ldr	r2, [pc, #100]	@ (80061bc <vTaskNotifyGiveFromISR+0x114>)
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <vTaskNotifyGiveFromISR+0x118>)
 8006168:	441a      	add	r2, r3
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f7fe fb08 	bl	8004786 <vListInsertEnd>
 8006176:	e005      	b.n	8006184 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	3318      	adds	r3, #24
 800617c:	4619      	mov	r1, r3
 800617e:	4811      	ldr	r0, [pc, #68]	@ (80061c4 <vTaskNotifyGiveFromISR+0x11c>)
 8006180:	f7fe fb01 	bl	8004786 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006188:	4b0f      	ldr	r3, [pc, #60]	@ (80061c8 <vTaskNotifyGiveFromISR+0x120>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	429a      	cmp	r2, r3
 8006190:	d908      	bls.n	80061a4 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2201      	movs	r2, #1
 800619c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800619e:	4b0b      	ldr	r3, [pc, #44]	@ (80061cc <vTaskNotifyGiveFromISR+0x124>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f383 8811 	msr	BASEPRI, r3
}
 80061ae:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80061b0:	bf00      	nop
 80061b2:	3728      	adds	r7, #40	@ 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	200010d0 	.word	0x200010d0
 80061bc:	200010b0 	.word	0x200010b0
 80061c0:	20000bd8 	.word	0x20000bd8
 80061c4:	20001068 	.word	0x20001068
 80061c8:	20000bd4 	.word	0x20000bd4
 80061cc:	200010bc 	.word	0x200010bc

080061d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061da:	4b21      	ldr	r3, [pc, #132]	@ (8006260 <prvAddCurrentTaskToDelayedList+0x90>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e0:	4b20      	ldr	r3, [pc, #128]	@ (8006264 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fb2a 	bl	8004840 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d10a      	bne.n	800620a <prvAddCurrentTaskToDelayedList+0x3a>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006264 <prvAddCurrentTaskToDelayedList+0x94>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3304      	adds	r3, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4819      	ldr	r0, [pc, #100]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x98>)
 8006204:	f7fe fabf 	bl	8004786 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006208:	e026      	b.n	8006258 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4413      	add	r3, r2
 8006210:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006212:	4b14      	ldr	r3, [pc, #80]	@ (8006264 <prvAddCurrentTaskToDelayedList+0x94>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	429a      	cmp	r2, r3
 8006220:	d209      	bcs.n	8006236 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006222:	4b12      	ldr	r3, [pc, #72]	@ (800626c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b0f      	ldr	r3, [pc, #60]	@ (8006264 <prvAddCurrentTaskToDelayedList+0x94>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f7fe facd 	bl	80047ce <vListInsert>
}
 8006234:	e010      	b.n	8006258 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006236:	4b0e      	ldr	r3, [pc, #56]	@ (8006270 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b0a      	ldr	r3, [pc, #40]	@ (8006264 <prvAddCurrentTaskToDelayedList+0x94>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f7fe fac3 	bl	80047ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006248:	4b0a      	ldr	r3, [pc, #40]	@ (8006274 <prvAddCurrentTaskToDelayedList+0xa4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	d202      	bcs.n	8006258 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006252:	4a08      	ldr	r2, [pc, #32]	@ (8006274 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	6013      	str	r3, [r2, #0]
}
 8006258:	bf00      	nop
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	200010ac 	.word	0x200010ac
 8006264:	20000bd4 	.word	0x20000bd4
 8006268:	20001094 	.word	0x20001094
 800626c:	20001064 	.word	0x20001064
 8006270:	20001060 	.word	0x20001060
 8006274:	200010c8 	.word	0x200010c8

08006278 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	@ 0x28
 800627c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006282:	f000 fb13 	bl	80068ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006286:	4b1d      	ldr	r3, [pc, #116]	@ (80062fc <xTimerCreateTimerTask+0x84>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d021      	beq.n	80062d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006296:	1d3a      	adds	r2, r7, #4
 8006298:	f107 0108 	add.w	r1, r7, #8
 800629c:	f107 030c 	add.w	r3, r7, #12
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fe fa29 	bl	80046f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	9202      	str	r2, [sp, #8]
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	2302      	movs	r3, #2
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2300      	movs	r3, #0
 80062b6:	460a      	mov	r2, r1
 80062b8:	4911      	ldr	r1, [pc, #68]	@ (8006300 <xTimerCreateTimerTask+0x88>)
 80062ba:	4812      	ldr	r0, [pc, #72]	@ (8006304 <xTimerCreateTimerTask+0x8c>)
 80062bc:	f7fe ffe4 	bl	8005288 <xTaskCreateStatic>
 80062c0:	4603      	mov	r3, r0
 80062c2:	4a11      	ldr	r2, [pc, #68]	@ (8006308 <xTimerCreateTimerTask+0x90>)
 80062c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062c6:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <xTimerCreateTimerTask+0x90>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062ce:	2301      	movs	r3, #1
 80062d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10b      	bne.n	80062f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	613b      	str	r3, [r7, #16]
}
 80062ea:	bf00      	nop
 80062ec:	bf00      	nop
 80062ee:	e7fd      	b.n	80062ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062f0:	697b      	ldr	r3, [r7, #20]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20001104 	.word	0x20001104
 8006300:	08007250 	.word	0x08007250
 8006304:	08006445 	.word	0x08006445
 8006308:	20001108 	.word	0x20001108

0800630c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	@ 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800631a:	2300      	movs	r3, #0
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <xTimerGenericCommand+0x30>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	623b      	str	r3, [r7, #32]
}
 8006336:	bf00      	nop
 8006338:	bf00      	nop
 800633a:	e7fd      	b.n	8006338 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800633c:	4b19      	ldr	r3, [pc, #100]	@ (80063a4 <xTimerGenericCommand+0x98>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d02a      	beq.n	800639a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b05      	cmp	r3, #5
 8006354:	dc18      	bgt.n	8006388 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006356:	f7ff fdd1 	bl	8005efc <xTaskGetSchedulerState>
 800635a:	4603      	mov	r3, r0
 800635c:	2b02      	cmp	r3, #2
 800635e:	d109      	bne.n	8006374 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006360:	4b10      	ldr	r3, [pc, #64]	@ (80063a4 <xTimerGenericCommand+0x98>)
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	f107 0110 	add.w	r1, r7, #16
 8006368:	2300      	movs	r3, #0
 800636a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800636c:	f7fe fb9c 	bl	8004aa8 <xQueueGenericSend>
 8006370:	6278      	str	r0, [r7, #36]	@ 0x24
 8006372:	e012      	b.n	800639a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006374:	4b0b      	ldr	r3, [pc, #44]	@ (80063a4 <xTimerGenericCommand+0x98>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	f107 0110 	add.w	r1, r7, #16
 800637c:	2300      	movs	r3, #0
 800637e:	2200      	movs	r2, #0
 8006380:	f7fe fb92 	bl	8004aa8 <xQueueGenericSend>
 8006384:	6278      	str	r0, [r7, #36]	@ 0x24
 8006386:	e008      	b.n	800639a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006388:	4b06      	ldr	r3, [pc, #24]	@ (80063a4 <xTimerGenericCommand+0x98>)
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	f107 0110 	add.w	r1, r7, #16
 8006390:	2300      	movs	r3, #0
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	f7fe fc8a 	bl	8004cac <xQueueGenericSendFromISR>
 8006398:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800639c:	4618      	mov	r0, r3
 800639e:	3728      	adds	r7, #40	@ 0x28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20001104 	.word	0x20001104

080063a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b2:	4b23      	ldr	r3, [pc, #140]	@ (8006440 <prvProcessExpiredTimer+0x98>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	3304      	adds	r3, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe fa3d 	bl	8004840 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d023      	beq.n	800641c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	18d1      	adds	r1, r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	6978      	ldr	r0, [r7, #20]
 80063e2:	f000 f8d5 	bl	8006590 <prvInsertTimerInActiveList>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d020      	beq.n	800642e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063ec:	2300      	movs	r3, #0
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	2300      	movs	r3, #0
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	2100      	movs	r1, #0
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	f7ff ff88 	bl	800630c <xTimerGenericCommand>
 80063fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d114      	bne.n	800642e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	60fb      	str	r3, [r7, #12]
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006422:	f023 0301 	bic.w	r3, r3, #1
 8006426:	b2da      	uxtb	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	6978      	ldr	r0, [r7, #20]
 8006434:	4798      	blx	r3
}
 8006436:	bf00      	nop
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	200010fc 	.word	0x200010fc

08006444 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800644c:	f107 0308 	add.w	r3, r7, #8
 8006450:	4618      	mov	r0, r3
 8006452:	f000 f859 	bl	8006508 <prvGetNextExpireTime>
 8006456:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4619      	mov	r1, r3
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f805 	bl	800646c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006462:	f000 f8d7 	bl	8006614 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006466:	bf00      	nop
 8006468:	e7f0      	b.n	800644c <prvTimerTask+0x8>
	...

0800646c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006476:	f7ff f94b 	bl	8005710 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800647a:	f107 0308 	add.w	r3, r7, #8
 800647e:	4618      	mov	r0, r3
 8006480:	f000 f866 	bl	8006550 <prvSampleTimeNow>
 8006484:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d130      	bne.n	80064ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <prvProcessTimerOrBlockTask+0x3c>
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	429a      	cmp	r2, r3
 8006498:	d806      	bhi.n	80064a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800649a:	f7ff f947 	bl	800572c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff ff81 	bl	80063a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064a6:	e024      	b.n	80064f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d008      	beq.n	80064c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064ae:	4b13      	ldr	r3, [pc, #76]	@ (80064fc <prvProcessTimerOrBlockTask+0x90>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <prvProcessTimerOrBlockTask+0x50>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <prvProcessTimerOrBlockTask+0x52>
 80064bc:	2300      	movs	r3, #0
 80064be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006500 <prvProcessTimerOrBlockTask+0x94>)
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	4619      	mov	r1, r3
 80064ce:	f7fe fea7 	bl	8005220 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064d2:	f7ff f92b 	bl	800572c <xTaskResumeAll>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064dc:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <prvProcessTimerOrBlockTask+0x98>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	f3bf 8f6f 	isb	sy
}
 80064ec:	e001      	b.n	80064f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064ee:	f7ff f91d 	bl	800572c <xTaskResumeAll>
}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20001100 	.word	0x20001100
 8006500:	20001104 	.word	0x20001104
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006510:	4b0e      	ldr	r3, [pc, #56]	@ (800654c <prvGetNextExpireTime+0x44>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <prvGetNextExpireTime+0x16>
 800651a:	2201      	movs	r2, #1
 800651c:	e000      	b.n	8006520 <prvGetNextExpireTime+0x18>
 800651e:	2200      	movs	r2, #0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d105      	bne.n	8006538 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800652c:	4b07      	ldr	r3, [pc, #28]	@ (800654c <prvGetNextExpireTime+0x44>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e001      	b.n	800653c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800653c:	68fb      	ldr	r3, [r7, #12]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	200010fc 	.word	0x200010fc

08006550 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006558:	f7ff f986 	bl	8005868 <xTaskGetTickCount>
 800655c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800655e:	4b0b      	ldr	r3, [pc, #44]	@ (800658c <prvSampleTimeNow+0x3c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	429a      	cmp	r2, r3
 8006566:	d205      	bcs.n	8006574 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006568:	f000 f93a 	bl	80067e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	e002      	b.n	800657a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800657a:	4a04      	ldr	r2, [pc, #16]	@ (800658c <prvSampleTimeNow+0x3c>)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006580:	68fb      	ldr	r3, [r7, #12]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	2000110c 	.word	0x2000110c

08006590 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d812      	bhi.n	80065dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e01b      	b.n	8006602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065ca:	4b10      	ldr	r3, [pc, #64]	@ (800660c <prvInsertTimerInActiveList+0x7c>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f7fe f8fa 	bl	80047ce <vListInsert>
 80065da:	e012      	b.n	8006602 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d206      	bcs.n	80065f2 <prvInsertTimerInActiveList+0x62>
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d302      	bcc.n	80065f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065ec:	2301      	movs	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e007      	b.n	8006602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065f2:	4b07      	ldr	r3, [pc, #28]	@ (8006610 <prvInsertTimerInActiveList+0x80>)
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	4610      	mov	r0, r2
 80065fe:	f7fe f8e6 	bl	80047ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006602:	697b      	ldr	r3, [r7, #20]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20001100 	.word	0x20001100
 8006610:	200010fc 	.word	0x200010fc

08006614 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08e      	sub	sp, #56	@ 0x38
 8006618:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800661a:	e0ce      	b.n	80067ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	da19      	bge.n	8006656 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006622:	1d3b      	adds	r3, r7, #4
 8006624:	3304      	adds	r3, #4
 8006626:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10b      	bne.n	8006646 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	61fb      	str	r3, [r7, #28]
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800664c:	6850      	ldr	r0, [r2, #4]
 800664e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006650:	6892      	ldr	r2, [r2, #8]
 8006652:	4611      	mov	r1, r2
 8006654:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f2c0 80ae 	blt.w	80067ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d004      	beq.n	8006674 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800666a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666c:	3304      	adds	r3, #4
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe f8e6 	bl	8004840 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006674:	463b      	mov	r3, r7
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff ff6a 	bl	8006550 <prvSampleTimeNow>
 800667c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b09      	cmp	r3, #9
 8006682:	f200 8097 	bhi.w	80067b4 <prvProcessReceivedCommands+0x1a0>
 8006686:	a201      	add	r2, pc, #4	@ (adr r2, 800668c <prvProcessReceivedCommands+0x78>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	080066b5 	.word	0x080066b5
 8006690:	080066b5 	.word	0x080066b5
 8006694:	080066b5 	.word	0x080066b5
 8006698:	0800672b 	.word	0x0800672b
 800669c:	0800673f 	.word	0x0800673f
 80066a0:	0800678b 	.word	0x0800678b
 80066a4:	080066b5 	.word	0x080066b5
 80066a8:	080066b5 	.word	0x080066b5
 80066ac:	0800672b 	.word	0x0800672b
 80066b0:	0800673f 	.word	0x0800673f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	18d1      	adds	r1, r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d4:	f7ff ff5c 	bl	8006590 <prvInsertTimerInActiveList>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d06c      	beq.n	80067b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d061      	beq.n	80067b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	441a      	add	r2, r3
 80066fc:	2300      	movs	r3, #0
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	2300      	movs	r3, #0
 8006702:	2100      	movs	r1, #0
 8006704:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006706:	f7ff fe01 	bl	800630c <xTimerGenericCommand>
 800670a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d152      	bne.n	80067b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	61bb      	str	r3, [r7, #24]
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop
 8006728:	e7fd      	b.n	8006726 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800673c:	e03d      	b.n	80067ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800673e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006740:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	b2da      	uxtb	r2, r3
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10b      	bne.n	8006776 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	617b      	str	r3, [r7, #20]
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	e7fd      	b.n	8006772 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	18d1      	adds	r1, r2, r3
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006784:	f7ff ff04 	bl	8006590 <prvInsertTimerInActiveList>
					break;
 8006788:	e017      	b.n	80067ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800678a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d103      	bne.n	80067a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800679a:	f000 fbe5 	bl	8006f68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800679e:	e00c      	b.n	80067ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067a6:	f023 0301 	bic.w	r3, r3, #1
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80067b2:	e002      	b.n	80067ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80067b4:	bf00      	nop
 80067b6:	e000      	b.n	80067ba <prvProcessReceivedCommands+0x1a6>
					break;
 80067b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067ba:	4b08      	ldr	r3, [pc, #32]	@ (80067dc <prvProcessReceivedCommands+0x1c8>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	1d39      	adds	r1, r7, #4
 80067c0:	2200      	movs	r2, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fb10 	bl	8004de8 <xQueueReceive>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f47f af26 	bne.w	800661c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	3730      	adds	r7, #48	@ 0x30
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20001104 	.word	0x20001104

080067e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067e6:	e049      	b.n	800687c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067e8:	4b2e      	ldr	r3, [pc, #184]	@ (80068a4 <prvSwitchTimerLists+0xc4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f2:	4b2c      	ldr	r3, [pc, #176]	@ (80068a4 <prvSwitchTimerLists+0xc4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3304      	adds	r3, #4
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe f81d 	bl	8004840 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d02f      	beq.n	800687c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	429a      	cmp	r2, r3
 800682c:	d90e      	bls.n	800684c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800683a:	4b1a      	ldr	r3, [pc, #104]	@ (80068a4 <prvSwitchTimerLists+0xc4>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3304      	adds	r3, #4
 8006842:	4619      	mov	r1, r3
 8006844:	4610      	mov	r0, r2
 8006846:	f7fd ffc2 	bl	80047ce <vListInsert>
 800684a:	e017      	b.n	800687c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800684c:	2300      	movs	r3, #0
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	2300      	movs	r3, #0
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	2100      	movs	r1, #0
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff fd58 	bl	800630c <xTimerGenericCommand>
 800685c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	603b      	str	r3, [r7, #0]
}
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	e7fd      	b.n	8006878 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800687c:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <prvSwitchTimerLists+0xc4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1b0      	bne.n	80067e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006886:	4b07      	ldr	r3, [pc, #28]	@ (80068a4 <prvSwitchTimerLists+0xc4>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800688c:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <prvSwitchTimerLists+0xc8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a04      	ldr	r2, [pc, #16]	@ (80068a4 <prvSwitchTimerLists+0xc4>)
 8006892:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006894:	4a04      	ldr	r2, [pc, #16]	@ (80068a8 <prvSwitchTimerLists+0xc8>)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	6013      	str	r3, [r2, #0]
}
 800689a:	bf00      	nop
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	200010fc 	.word	0x200010fc
 80068a8:	20001100 	.word	0x20001100

080068ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068b2:	f000 f969 	bl	8006b88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068b6:	4b15      	ldr	r3, [pc, #84]	@ (800690c <prvCheckForValidListAndQueue+0x60>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d120      	bne.n	8006900 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068be:	4814      	ldr	r0, [pc, #80]	@ (8006910 <prvCheckForValidListAndQueue+0x64>)
 80068c0:	f7fd ff34 	bl	800472c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068c4:	4813      	ldr	r0, [pc, #76]	@ (8006914 <prvCheckForValidListAndQueue+0x68>)
 80068c6:	f7fd ff31 	bl	800472c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068ca:	4b13      	ldr	r3, [pc, #76]	@ (8006918 <prvCheckForValidListAndQueue+0x6c>)
 80068cc:	4a10      	ldr	r2, [pc, #64]	@ (8006910 <prvCheckForValidListAndQueue+0x64>)
 80068ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068d0:	4b12      	ldr	r3, [pc, #72]	@ (800691c <prvCheckForValidListAndQueue+0x70>)
 80068d2:	4a10      	ldr	r2, [pc, #64]	@ (8006914 <prvCheckForValidListAndQueue+0x68>)
 80068d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068d6:	2300      	movs	r3, #0
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	4b11      	ldr	r3, [pc, #68]	@ (8006920 <prvCheckForValidListAndQueue+0x74>)
 80068dc:	4a11      	ldr	r2, [pc, #68]	@ (8006924 <prvCheckForValidListAndQueue+0x78>)
 80068de:	2110      	movs	r1, #16
 80068e0:	200a      	movs	r0, #10
 80068e2:	f7fe f841 	bl	8004968 <xQueueGenericCreateStatic>
 80068e6:	4603      	mov	r3, r0
 80068e8:	4a08      	ldr	r2, [pc, #32]	@ (800690c <prvCheckForValidListAndQueue+0x60>)
 80068ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068ec:	4b07      	ldr	r3, [pc, #28]	@ (800690c <prvCheckForValidListAndQueue+0x60>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068f4:	4b05      	ldr	r3, [pc, #20]	@ (800690c <prvCheckForValidListAndQueue+0x60>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	490b      	ldr	r1, [pc, #44]	@ (8006928 <prvCheckForValidListAndQueue+0x7c>)
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fc66 	bl	80051cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006900:	f000 f974 	bl	8006bec <vPortExitCritical>
}
 8006904:	bf00      	nop
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20001104 	.word	0x20001104
 8006910:	200010d4 	.word	0x200010d4
 8006914:	200010e8 	.word	0x200010e8
 8006918:	200010fc 	.word	0x200010fc
 800691c:	20001100 	.word	0x20001100
 8006920:	200011b0 	.word	0x200011b0
 8006924:	20001110 	.word	0x20001110
 8006928:	08007258 	.word	0x08007258

0800692c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3b04      	subs	r3, #4
 800693c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3b04      	subs	r3, #4
 800694a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f023 0201 	bic.w	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3b04      	subs	r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800695c:	4a0c      	ldr	r2, [pc, #48]	@ (8006990 <pxPortInitialiseStack+0x64>)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3b14      	subs	r3, #20
 8006966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3b04      	subs	r3, #4
 8006972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f06f 0202 	mvn.w	r2, #2
 800697a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3b20      	subs	r3, #32
 8006980:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006982:	68fb      	ldr	r3, [r7, #12]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	08006995 	.word	0x08006995

08006994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800699e:	4b13      	ldr	r3, [pc, #76]	@ (80069ec <prvTaskExitError+0x58>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a6:	d00b      	beq.n	80069c0 <prvTaskExitError+0x2c>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	60fb      	str	r3, [r7, #12]
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	e7fd      	b.n	80069bc <prvTaskExitError+0x28>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	60bb      	str	r3, [r7, #8]
}
 80069d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069d4:	bf00      	nop
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0fc      	beq.n	80069d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069dc:	bf00      	nop
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	2000000c 	.word	0x2000000c

080069f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069f0:	4b07      	ldr	r3, [pc, #28]	@ (8006a10 <pxCurrentTCBConst2>)
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	6808      	ldr	r0, [r1, #0]
 80069f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	f380 8809 	msr	PSP, r0
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f04f 0000 	mov.w	r0, #0
 8006a06:	f380 8811 	msr	BASEPRI, r0
 8006a0a:	4770      	bx	lr
 8006a0c:	f3af 8000 	nop.w

08006a10 <pxCurrentTCBConst2>:
 8006a10:	20000bd4 	.word	0x20000bd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop

08006a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a18:	4808      	ldr	r0, [pc, #32]	@ (8006a3c <prvPortStartFirstTask+0x24>)
 8006a1a:	6800      	ldr	r0, [r0, #0]
 8006a1c:	6800      	ldr	r0, [r0, #0]
 8006a1e:	f380 8808 	msr	MSP, r0
 8006a22:	f04f 0000 	mov.w	r0, #0
 8006a26:	f380 8814 	msr	CONTROL, r0
 8006a2a:	b662      	cpsie	i
 8006a2c:	b661      	cpsie	f
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	df00      	svc	0
 8006a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a3a:	bf00      	nop
 8006a3c:	e000ed08 	.word	0xe000ed08

08006a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a46:	4b47      	ldr	r3, [pc, #284]	@ (8006b64 <xPortStartScheduler+0x124>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a47      	ldr	r2, [pc, #284]	@ (8006b68 <xPortStartScheduler+0x128>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d10b      	bne.n	8006a68 <xPortStartScheduler+0x28>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	60fb      	str	r3, [r7, #12]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a68:	4b3e      	ldr	r3, [pc, #248]	@ (8006b64 <xPortStartScheduler+0x124>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b6c <xPortStartScheduler+0x12c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d10b      	bne.n	8006a8a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	613b      	str	r3, [r7, #16]
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	e7fd      	b.n	8006a86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a8a:	4b39      	ldr	r3, [pc, #228]	@ (8006b70 <xPortStartScheduler+0x130>)
 8006a8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	22ff      	movs	r2, #255	@ 0xff
 8006a9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	4b31      	ldr	r3, [pc, #196]	@ (8006b74 <xPortStartScheduler+0x134>)
 8006ab0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ab2:	4b31      	ldr	r3, [pc, #196]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006ab4:	2207      	movs	r2, #7
 8006ab6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ab8:	e009      	b.n	8006ace <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006aba:	4b2f      	ldr	r3, [pc, #188]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006ac2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad6:	2b80      	cmp	r3, #128	@ 0x80
 8006ad8:	d0ef      	beq.n	8006aba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ada:	4b27      	ldr	r3, [pc, #156]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f1c3 0307 	rsb	r3, r3, #7
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d00b      	beq.n	8006afe <xPortStartScheduler+0xbe>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60bb      	str	r3, [r7, #8]
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	e7fd      	b.n	8006afa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006afe:	4b1e      	ldr	r3, [pc, #120]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	4a1c      	ldr	r2, [pc, #112]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006b06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b08:	4b1b      	ldr	r3, [pc, #108]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b10:	4a19      	ldr	r2, [pc, #100]	@ (8006b78 <xPortStartScheduler+0x138>)
 8006b12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b1c:	4b17      	ldr	r3, [pc, #92]	@ (8006b7c <xPortStartScheduler+0x13c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a16      	ldr	r2, [pc, #88]	@ (8006b7c <xPortStartScheduler+0x13c>)
 8006b22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b28:	4b14      	ldr	r3, [pc, #80]	@ (8006b7c <xPortStartScheduler+0x13c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a13      	ldr	r2, [pc, #76]	@ (8006b7c <xPortStartScheduler+0x13c>)
 8006b2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b34:	f000 f8da 	bl	8006cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b38:	4b11      	ldr	r3, [pc, #68]	@ (8006b80 <xPortStartScheduler+0x140>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b3e:	f000 f8f9 	bl	8006d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b42:	4b10      	ldr	r3, [pc, #64]	@ (8006b84 <xPortStartScheduler+0x144>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a0f      	ldr	r2, [pc, #60]	@ (8006b84 <xPortStartScheduler+0x144>)
 8006b48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b4e:	f7ff ff63 	bl	8006a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b52:	f7fe ff53 	bl	80059fc <vTaskSwitchContext>
	prvTaskExitError();
 8006b56:	f7ff ff1d 	bl	8006994 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	e000ed00 	.word	0xe000ed00
 8006b68:	410fc271 	.word	0x410fc271
 8006b6c:	410fc270 	.word	0x410fc270
 8006b70:	e000e400 	.word	0xe000e400
 8006b74:	20001200 	.word	0x20001200
 8006b78:	20001204 	.word	0x20001204
 8006b7c:	e000ed20 	.word	0xe000ed20
 8006b80:	2000000c 	.word	0x2000000c
 8006b84:	e000ef34 	.word	0xe000ef34

08006b88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	607b      	str	r3, [r7, #4]
}
 8006ba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ba2:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <vPortEnterCritical+0x5c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8006be4 <vPortEnterCritical+0x5c>)
 8006baa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bac:	4b0d      	ldr	r3, [pc, #52]	@ (8006be4 <vPortEnterCritical+0x5c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d110      	bne.n	8006bd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006be8 <vPortEnterCritical+0x60>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	603b      	str	r3, [r7, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <vPortEnterCritical+0x4a>
	}
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	2000000c 	.word	0x2000000c
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bf2:	4b12      	ldr	r3, [pc, #72]	@ (8006c3c <vPortExitCritical+0x50>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10b      	bne.n	8006c12 <vPortExitCritical+0x26>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	607b      	str	r3, [r7, #4]
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	e7fd      	b.n	8006c0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c12:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <vPortExitCritical+0x50>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	4a08      	ldr	r2, [pc, #32]	@ (8006c3c <vPortExitCritical+0x50>)
 8006c1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c1c:	4b07      	ldr	r3, [pc, #28]	@ (8006c3c <vPortExitCritical+0x50>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <vPortExitCritical+0x44>
 8006c24:	2300      	movs	r3, #0
 8006c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f383 8811 	msr	BASEPRI, r3
}
 8006c2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	2000000c 	.word	0x2000000c

08006c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c40:	f3ef 8009 	mrs	r0, PSP
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	4b15      	ldr	r3, [pc, #84]	@ (8006ca0 <pxCurrentTCBConst>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	f01e 0f10 	tst.w	lr, #16
 8006c50:	bf08      	it	eq
 8006c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5a:	6010      	str	r0, [r2, #0]
 8006c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c64:	f380 8811 	msr	BASEPRI, r0
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f7fe fec4 	bl	80059fc <vTaskSwitchContext>
 8006c74:	f04f 0000 	mov.w	r0, #0
 8006c78:	f380 8811 	msr	BASEPRI, r0
 8006c7c:	bc09      	pop	{r0, r3}
 8006c7e:	6819      	ldr	r1, [r3, #0]
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c86:	f01e 0f10 	tst.w	lr, #16
 8006c8a:	bf08      	it	eq
 8006c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c90:	f380 8809 	msr	PSP, r0
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w

08006ca0 <pxCurrentTCBConst>:
 8006ca0:	20000bd4 	.word	0x20000bd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	607b      	str	r3, [r7, #4]
}
 8006cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cc2:	f7fe fde1 	bl	8005888 <xTaskIncrementTick>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ccc:	4b06      	ldr	r3, [pc, #24]	@ (8006ce8 <xPortSysTickHandler+0x40>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f383 8811 	msr	BASEPRI, r3
}
 8006cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d20 <vPortSetupTimerInterrupt+0x34>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d24 <vPortSetupTimerInterrupt+0x38>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d28 <vPortSetupTimerInterrupt+0x3c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a0a      	ldr	r2, [pc, #40]	@ (8006d2c <vPortSetupTimerInterrupt+0x40>)
 8006d02:	fba2 2303 	umull	r2, r3, r2, r3
 8006d06:	099b      	lsrs	r3, r3, #6
 8006d08:	4a09      	ldr	r2, [pc, #36]	@ (8006d30 <vPortSetupTimerInterrupt+0x44>)
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d0e:	4b04      	ldr	r3, [pc, #16]	@ (8006d20 <vPortSetupTimerInterrupt+0x34>)
 8006d10:	2207      	movs	r2, #7
 8006d12:	601a      	str	r2, [r3, #0]
}
 8006d14:	bf00      	nop
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	e000e010 	.word	0xe000e010
 8006d24:	e000e018 	.word	0xe000e018
 8006d28:	20000000 	.word	0x20000000
 8006d2c:	10624dd3 	.word	0x10624dd3
 8006d30:	e000e014 	.word	0xe000e014

08006d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d44 <vPortEnableVFP+0x10>
 8006d38:	6801      	ldr	r1, [r0, #0]
 8006d3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d3e:	6001      	str	r1, [r0, #0]
 8006d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d42:	bf00      	nop
 8006d44:	e000ed88 	.word	0xe000ed88

08006d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d4e:	f3ef 8305 	mrs	r3, IPSR
 8006d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b0f      	cmp	r3, #15
 8006d58:	d915      	bls.n	8006d86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d5a:	4a18      	ldr	r2, [pc, #96]	@ (8006dbc <vPortValidateInterruptPriority+0x74>)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d64:	4b16      	ldr	r3, [pc, #88]	@ (8006dc0 <vPortValidateInterruptPriority+0x78>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	7afa      	ldrb	r2, [r7, #11]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d20b      	bcs.n	8006d86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	607b      	str	r3, [r7, #4]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d86:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc4 <vPortValidateInterruptPriority+0x7c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc8 <vPortValidateInterruptPriority+0x80>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d90b      	bls.n	8006dae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	603b      	str	r3, [r7, #0]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <vPortValidateInterruptPriority+0x62>
	}
 8006dae:	bf00      	nop
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	e000e3f0 	.word	0xe000e3f0
 8006dc0:	20001200 	.word	0x20001200
 8006dc4:	e000ed0c 	.word	0xe000ed0c
 8006dc8:	20001204 	.word	0x20001204

08006dcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	@ 0x28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006dd8:	f7fe fc9a 	bl	8005710 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8006f50 <pvPortMalloc+0x184>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006de4:	f000 f924 	bl	8007030 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006de8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f54 <pvPortMalloc+0x188>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f040 8095 	bne.w	8006f20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01e      	beq.n	8006e3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4413      	add	r3, r2
 8006e02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d015      	beq.n	8006e3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	3308      	adds	r3, #8
 8006e16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <pvPortMalloc+0x6e>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	617b      	str	r3, [r7, #20]
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	e7fd      	b.n	8006e36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d06f      	beq.n	8006f20 <pvPortMalloc+0x154>
 8006e40:	4b45      	ldr	r3, [pc, #276]	@ (8006f58 <pvPortMalloc+0x18c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d86a      	bhi.n	8006f20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e4a:	4b44      	ldr	r3, [pc, #272]	@ (8006f5c <pvPortMalloc+0x190>)
 8006e4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e4e:	4b43      	ldr	r3, [pc, #268]	@ (8006f5c <pvPortMalloc+0x190>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e54:	e004      	b.n	8006e60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d903      	bls.n	8006e72 <pvPortMalloc+0xa6>
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f1      	bne.n	8006e56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e72:	4b37      	ldr	r3, [pc, #220]	@ (8006f50 <pvPortMalloc+0x184>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d051      	beq.n	8006f20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2208      	movs	r2, #8
 8006e82:	4413      	add	r3, r2
 8006e84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	1ad2      	subs	r2, r2, r3
 8006e96:	2308      	movs	r3, #8
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d920      	bls.n	8006ee0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <pvPortMalloc+0xfc>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	613b      	str	r3, [r7, #16]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	1ad2      	subs	r2, r2, r3
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eda:	69b8      	ldr	r0, [r7, #24]
 8006edc:	f000 f90a 	bl	80070f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f58 <pvPortMalloc+0x18c>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	4a1b      	ldr	r2, [pc, #108]	@ (8006f58 <pvPortMalloc+0x18c>)
 8006eec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eee:	4b1a      	ldr	r3, [pc, #104]	@ (8006f58 <pvPortMalloc+0x18c>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f60 <pvPortMalloc+0x194>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d203      	bcs.n	8006f02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006efa:	4b17      	ldr	r3, [pc, #92]	@ (8006f58 <pvPortMalloc+0x18c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a18      	ldr	r2, [pc, #96]	@ (8006f60 <pvPortMalloc+0x194>)
 8006f00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	4b13      	ldr	r3, [pc, #76]	@ (8006f54 <pvPortMalloc+0x188>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f16:	4b13      	ldr	r3, [pc, #76]	@ (8006f64 <pvPortMalloc+0x198>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	4a11      	ldr	r2, [pc, #68]	@ (8006f64 <pvPortMalloc+0x198>)
 8006f1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f20:	f7fe fc04 	bl	800572c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f003 0307 	and.w	r3, r3, #7
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <pvPortMalloc+0x17a>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	60fb      	str	r3, [r7, #12]
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	e7fd      	b.n	8006f42 <pvPortMalloc+0x176>
	return pvReturn;
 8006f46:	69fb      	ldr	r3, [r7, #28]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3728      	adds	r7, #40	@ 0x28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20001e10 	.word	0x20001e10
 8006f54:	20001e24 	.word	0x20001e24
 8006f58:	20001e14 	.word	0x20001e14
 8006f5c:	20001e08 	.word	0x20001e08
 8006f60:	20001e18 	.word	0x20001e18
 8006f64:	20001e1c 	.word	0x20001e1c

08006f68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d04f      	beq.n	800701a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f7a:	2308      	movs	r3, #8
 8006f7c:	425b      	negs	r3, r3
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4413      	add	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	4b25      	ldr	r3, [pc, #148]	@ (8007024 <vPortFree+0xbc>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <vPortFree+0x46>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	60fb      	str	r3, [r7, #12]
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	e7fd      	b.n	8006faa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <vPortFree+0x66>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	60bb      	str	r3, [r7, #8]
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	e7fd      	b.n	8006fca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	4b14      	ldr	r3, [pc, #80]	@ (8007024 <vPortFree+0xbc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01e      	beq.n	800701a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d11a      	bne.n	800701a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8007024 <vPortFree+0xbc>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	43db      	mvns	r3, r3
 8006fee:	401a      	ands	r2, r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ff4:	f7fe fb8c 	bl	8005710 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <vPortFree+0xc0>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4413      	add	r3, r2
 8007002:	4a09      	ldr	r2, [pc, #36]	@ (8007028 <vPortFree+0xc0>)
 8007004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007006:	6938      	ldr	r0, [r7, #16]
 8007008:	f000 f874 	bl	80070f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800700c:	4b07      	ldr	r3, [pc, #28]	@ (800702c <vPortFree+0xc4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3301      	adds	r3, #1
 8007012:	4a06      	ldr	r2, [pc, #24]	@ (800702c <vPortFree+0xc4>)
 8007014:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007016:	f7fe fb89 	bl	800572c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800701a:	bf00      	nop
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20001e24 	.word	0x20001e24
 8007028:	20001e14 	.word	0x20001e14
 800702c:	20001e20 	.word	0x20001e20

08007030 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007036:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800703a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800703c:	4b27      	ldr	r3, [pc, #156]	@ (80070dc <prvHeapInit+0xac>)
 800703e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00c      	beq.n	8007064 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3307      	adds	r3, #7
 800704e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	4a1f      	ldr	r2, [pc, #124]	@ (80070dc <prvHeapInit+0xac>)
 8007060:	4413      	add	r3, r2
 8007062:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007068:	4a1d      	ldr	r2, [pc, #116]	@ (80070e0 <prvHeapInit+0xb0>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800706e:	4b1c      	ldr	r3, [pc, #112]	@ (80070e0 <prvHeapInit+0xb0>)
 8007070:	2200      	movs	r2, #0
 8007072:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	4413      	add	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800707c:	2208      	movs	r2, #8
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1a9b      	subs	r3, r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0307 	bic.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a15      	ldr	r2, [pc, #84]	@ (80070e4 <prvHeapInit+0xb4>)
 8007090:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007092:	4b14      	ldr	r3, [pc, #80]	@ (80070e4 <prvHeapInit+0xb4>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800709a:	4b12      	ldr	r3, [pc, #72]	@ (80070e4 <prvHeapInit+0xb4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070b0:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <prvHeapInit+0xb4>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4a0a      	ldr	r2, [pc, #40]	@ (80070e8 <prvHeapInit+0xb8>)
 80070be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4a09      	ldr	r2, [pc, #36]	@ (80070ec <prvHeapInit+0xbc>)
 80070c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070c8:	4b09      	ldr	r3, [pc, #36]	@ (80070f0 <prvHeapInit+0xc0>)
 80070ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80070ce:	601a      	str	r2, [r3, #0]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	20001208 	.word	0x20001208
 80070e0:	20001e08 	.word	0x20001e08
 80070e4:	20001e10 	.word	0x20001e10
 80070e8:	20001e18 	.word	0x20001e18
 80070ec:	20001e14 	.word	0x20001e14
 80070f0:	20001e24 	.word	0x20001e24

080070f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070fc:	4b28      	ldr	r3, [pc, #160]	@ (80071a0 <prvInsertBlockIntoFreeList+0xac>)
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e002      	b.n	8007108 <prvInsertBlockIntoFreeList+0x14>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d8f7      	bhi.n	8007102 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	4413      	add	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d108      	bne.n	8007136 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	441a      	add	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	441a      	add	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d118      	bne.n	800717c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	4b15      	ldr	r3, [pc, #84]	@ (80071a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d00d      	beq.n	8007172 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	441a      	add	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e008      	b.n	8007184 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007172:	4b0c      	ldr	r3, [pc, #48]	@ (80071a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e003      	b.n	8007184 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	429a      	cmp	r2, r3
 800718a:	d002      	beq.n	8007192 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	20001e08 	.word	0x20001e08
 80071a4:	20001e10 	.word	0x20001e10

080071a8 <memset>:
 80071a8:	4402      	add	r2, r0
 80071aa:	4603      	mov	r3, r0
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d100      	bne.n	80071b2 <memset+0xa>
 80071b0:	4770      	bx	lr
 80071b2:	f803 1b01 	strb.w	r1, [r3], #1
 80071b6:	e7f9      	b.n	80071ac <memset+0x4>

080071b8 <__libc_init_array>:
 80071b8:	b570      	push	{r4, r5, r6, lr}
 80071ba:	4d0d      	ldr	r5, [pc, #52]	@ (80071f0 <__libc_init_array+0x38>)
 80071bc:	4c0d      	ldr	r4, [pc, #52]	@ (80071f4 <__libc_init_array+0x3c>)
 80071be:	1b64      	subs	r4, r4, r5
 80071c0:	10a4      	asrs	r4, r4, #2
 80071c2:	2600      	movs	r6, #0
 80071c4:	42a6      	cmp	r6, r4
 80071c6:	d109      	bne.n	80071dc <__libc_init_array+0x24>
 80071c8:	4d0b      	ldr	r5, [pc, #44]	@ (80071f8 <__libc_init_array+0x40>)
 80071ca:	4c0c      	ldr	r4, [pc, #48]	@ (80071fc <__libc_init_array+0x44>)
 80071cc:	f000 f826 	bl	800721c <_init>
 80071d0:	1b64      	subs	r4, r4, r5
 80071d2:	10a4      	asrs	r4, r4, #2
 80071d4:	2600      	movs	r6, #0
 80071d6:	42a6      	cmp	r6, r4
 80071d8:	d105      	bne.n	80071e6 <__libc_init_array+0x2e>
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e0:	4798      	blx	r3
 80071e2:	3601      	adds	r6, #1
 80071e4:	e7ee      	b.n	80071c4 <__libc_init_array+0xc>
 80071e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ea:	4798      	blx	r3
 80071ec:	3601      	adds	r6, #1
 80071ee:	e7f2      	b.n	80071d6 <__libc_init_array+0x1e>
 80071f0:	080072c8 	.word	0x080072c8
 80071f4:	080072c8 	.word	0x080072c8
 80071f8:	080072c8 	.word	0x080072c8
 80071fc:	080072cc 	.word	0x080072cc

08007200 <memcpy>:
 8007200:	440a      	add	r2, r1
 8007202:	4291      	cmp	r1, r2
 8007204:	f100 33ff 	add.w	r3, r0, #4294967295
 8007208:	d100      	bne.n	800720c <memcpy+0xc>
 800720a:	4770      	bx	lr
 800720c:	b510      	push	{r4, lr}
 800720e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007216:	4291      	cmp	r1, r2
 8007218:	d1f9      	bne.n	800720e <memcpy+0xe>
 800721a:	bd10      	pop	{r4, pc}

0800721c <_init>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr

08007228 <_fini>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	bf00      	nop
 800722c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722e:	bc08      	pop	{r3}
 8007230:	469e      	mov	lr, r3
 8007232:	4770      	bx	lr
