
TMS_SLAVE_AMP_226.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080071c4  080071c4  000081c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007258  08007258  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007258  08007258  00009010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007258  08007258  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007258  08007258  00008258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800725c  0800725c  0000825c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007260  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b58  20000010  08007270  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b68  08007270  00009b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e73  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c9  00000000  00000000  0001eeb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00022280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f12  00000000  00000000  00023668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003316  00000000  00000000  0002457a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cfa  00000000  00000000  00027890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc0fc  00000000  00000000  0003c58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118686  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  001186cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0011da00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080071ac 	.word	0x080071ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080071ac 	.word	0x080071ac

08000220 <sendTemperatureToMaster0>:

extern FDCAN_HandleTypeDef hfdcan1;
uint8_t FDCAN1TxData[8];
FDCAN_TxHeaderTypeDef FDCAN1TxHeader;

void sendTemperatureToMaster0(float buffer[]){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000228:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <sendTemperatureToMaster0+0x3c>)
 800022a:	2208      	movs	r2, #8
 800022c:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst0;
 800022e:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <sendTemperatureToMaster0+0x3c>)
 8000230:	2210      	movs	r2, #16
 8000232:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	461a      	mov	r2, r3
 800023a:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <sendTemperatureToMaster0+0x40>)
 800023c:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	3304      	adds	r3, #4
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	461a      	mov	r2, r3
 8000246:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <sendTemperatureToMaster0+0x40>)
 8000248:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 800024a:	4a05      	ldr	r2, [pc, #20]	@ (8000260 <sendTemperatureToMaster0+0x40>)
 800024c:	4903      	ldr	r1, [pc, #12]	@ (800025c <sendTemperatureToMaster0+0x3c>)
 800024e:	4805      	ldr	r0, [pc, #20]	@ (8000264 <sendTemperatureToMaster0+0x44>)
 8000250:	f002 fd5e 	bl	8002d10 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000034 	.word	0x20000034
 8000260:	2000002c 	.word	0x2000002c
 8000264:	20000124 	.word	0x20000124

08000268 <sendTemperatureToMaster1>:

void sendTemperatureToMaster1(float buffer[]){
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <sendTemperatureToMaster1+0x3c>)
 8000272:	2208      	movs	r2, #8
 8000274:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst1;
 8000276:	4b0b      	ldr	r3, [pc, #44]	@ (80002a4 <sendTemperatureToMaster1+0x3c>)
 8000278:	2211      	movs	r2, #17
 800027a:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <sendTemperatureToMaster1+0x40>)
 8000284:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3304      	adds	r3, #4
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <sendTemperatureToMaster1+0x40>)
 8000290:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 8000292:	4a05      	ldr	r2, [pc, #20]	@ (80002a8 <sendTemperatureToMaster1+0x40>)
 8000294:	4903      	ldr	r1, [pc, #12]	@ (80002a4 <sendTemperatureToMaster1+0x3c>)
 8000296:	4805      	ldr	r0, [pc, #20]	@ (80002ac <sendTemperatureToMaster1+0x44>)
 8000298:	f002 fd3a 	bl	8002d10 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000034 	.word	0x20000034
 80002a8:	2000002c 	.word	0x2000002c
 80002ac:	20000124 	.word	0x20000124

080002b0 <sendTemperatureToMaster2>:

void sendTemperatureToMaster2(float buffer[]){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <sendTemperatureToMaster2+0x3c>)
 80002ba:	2208      	movs	r2, #8
 80002bc:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst2;
 80002be:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <sendTemperatureToMaster2+0x3c>)
 80002c0:	2212      	movs	r2, #18
 80002c2:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <sendTemperatureToMaster2+0x40>)
 80002cc:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3304      	adds	r3, #4
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <sendTemperatureToMaster2+0x40>)
 80002d8:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 80002da:	4a05      	ldr	r2, [pc, #20]	@ (80002f0 <sendTemperatureToMaster2+0x40>)
 80002dc:	4903      	ldr	r1, [pc, #12]	@ (80002ec <sendTemperatureToMaster2+0x3c>)
 80002de:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <sendTemperatureToMaster2+0x44>)
 80002e0:	f002 fd16 	bl	8002d10 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000034 	.word	0x20000034
 80002f0:	2000002c 	.word	0x2000002c
 80002f4:	20000124 	.word	0x20000124

080002f8 <sendTemperatureToMaster3>:

void sendTemperatureToMaster3(float buffer[]){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000300:	4b0c      	ldr	r3, [pc, #48]	@ (8000334 <sendTemperatureToMaster3+0x3c>)
 8000302:	2208      	movs	r2, #8
 8000304:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst3;
 8000306:	4b0b      	ldr	r3, [pc, #44]	@ (8000334 <sendTemperatureToMaster3+0x3c>)
 8000308:	2213      	movs	r2, #19
 800030a:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <sendTemperatureToMaster3+0x40>)
 8000314:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3304      	adds	r3, #4
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	461a      	mov	r2, r3
 800031e:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <sendTemperatureToMaster3+0x40>)
 8000320:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 8000322:	4a05      	ldr	r2, [pc, #20]	@ (8000338 <sendTemperatureToMaster3+0x40>)
 8000324:	4903      	ldr	r1, [pc, #12]	@ (8000334 <sendTemperatureToMaster3+0x3c>)
 8000326:	4805      	ldr	r0, [pc, #20]	@ (800033c <sendTemperatureToMaster3+0x44>)
 8000328:	f002 fcf2 	bl	8002d10 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000034 	.word	0x20000034
 8000338:	2000002c 	.word	0x2000002c
 800033c:	20000124 	.word	0x20000124

08000340 <sendTemperatureToMaster4>:

void sendTemperatureToMaster4(float buffer[]){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <sendTemperatureToMaster4+0x3c>)
 800034a:	2208      	movs	r2, #8
 800034c:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst4;
 800034e:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <sendTemperatureToMaster4+0x3c>)
 8000350:	2214      	movs	r2, #20
 8000352:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <sendTemperatureToMaster4+0x40>)
 800035c:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3304      	adds	r3, #4
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <sendTemperatureToMaster4+0x40>)
 8000368:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 800036a:	4a05      	ldr	r2, [pc, #20]	@ (8000380 <sendTemperatureToMaster4+0x40>)
 800036c:	4903      	ldr	r1, [pc, #12]	@ (800037c <sendTemperatureToMaster4+0x3c>)
 800036e:	4805      	ldr	r0, [pc, #20]	@ (8000384 <sendTemperatureToMaster4+0x44>)
 8000370:	f002 fcce 	bl	8002d10 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000034 	.word	0x20000034
 8000380:	2000002c 	.word	0x2000002c
 8000384:	20000124 	.word	0x20000124

08000388 <sendTemperatureToMaster5>:

void sendTemperatureToMaster5(float buffer[]){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000390:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <sendTemperatureToMaster5+0x3c>)
 8000392:	2208      	movs	r2, #8
 8000394:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst5;
 8000396:	4b0b      	ldr	r3, [pc, #44]	@ (80003c4 <sendTemperatureToMaster5+0x3c>)
 8000398:	2215      	movs	r2, #21
 800039a:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <sendTemperatureToMaster5+0x40>)
 80003a4:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3304      	adds	r3, #4
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	461a      	mov	r2, r3
 80003ae:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <sendTemperatureToMaster5+0x40>)
 80003b0:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 80003b2:	4a05      	ldr	r2, [pc, #20]	@ (80003c8 <sendTemperatureToMaster5+0x40>)
 80003b4:	4903      	ldr	r1, [pc, #12]	@ (80003c4 <sendTemperatureToMaster5+0x3c>)
 80003b6:	4805      	ldr	r0, [pc, #20]	@ (80003cc <sendTemperatureToMaster5+0x44>)
 80003b8:	f002 fcaa 	bl	8002d10 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000034 	.word	0x20000034
 80003c8:	2000002c 	.word	0x2000002c
 80003cc:	20000124 	.word	0x20000124

080003d0 <sendTemperatureToMaster6>:

void sendTemperatureToMaster6(float buffer[]){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <sendTemperatureToMaster6+0x3c>)
 80003da:	2208      	movs	r2, #8
 80003dc:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst6;
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <sendTemperatureToMaster6+0x3c>)
 80003e0:	2216      	movs	r2, #22
 80003e2:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <sendTemperatureToMaster6+0x40>)
 80003ec:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3304      	adds	r3, #4
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <sendTemperatureToMaster6+0x40>)
 80003f8:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 80003fa:	4a05      	ldr	r2, [pc, #20]	@ (8000410 <sendTemperatureToMaster6+0x40>)
 80003fc:	4903      	ldr	r1, [pc, #12]	@ (800040c <sendTemperatureToMaster6+0x3c>)
 80003fe:	4805      	ldr	r0, [pc, #20]	@ (8000414 <sendTemperatureToMaster6+0x44>)
 8000400:	f002 fc86 	bl	8002d10 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000034 	.word	0x20000034
 8000410:	2000002c 	.word	0x2000002c
 8000414:	20000124 	.word	0x20000124

08000418 <sendTemperatureToMaster7>:

void sendTemperatureToMaster7(float buffer[]){
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]

	FDCAN1TxHeader.DataLength = 8;
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <sendTemperatureToMaster7+0x3c>)
 8000422:	2208      	movs	r2, #8
 8000424:	60da      	str	r2, [r3, #12]

#ifdef slave1
	FDCAN1TxHeader.Identifier = idSlave1Burst7;
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <sendTemperatureToMaster7+0x3c>)
 8000428:	2217      	movs	r2, #23
 800042a:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	461a      	mov	r2, r3
 8000432:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <sendTemperatureToMaster7+0x40>)
 8000434:	601a      	str	r2, [r3, #0]
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3304      	adds	r3, #4
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	461a      	mov	r2, r3
 800043e:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <sendTemperatureToMaster7+0x40>)
 8000440:	605a      	str	r2, [r3, #4]
	memcpy(&FDCAN1TxData[0], &buffer[0], sizeof(float));
	memcpy(&FDCAN1TxData[4], &buffer[1], sizeof(float));

#endif

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FDCAN1TxHeader,  FDCAN1TxData);
 8000442:	4a05      	ldr	r2, [pc, #20]	@ (8000458 <sendTemperatureToMaster7+0x40>)
 8000444:	4903      	ldr	r1, [pc, #12]	@ (8000454 <sendTemperatureToMaster7+0x3c>)
 8000446:	4805      	ldr	r0, [pc, #20]	@ (800045c <sendTemperatureToMaster7+0x44>)
 8000448:	f002 fc62 	bl	8002d10 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000034 	.word	0x20000034
 8000458:	2000002c 	.word	0x2000002c
 800045c:	20000124 	.word	0x20000124

08000460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000464:	f000 fcdf 	bl	8000e26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000468:	f000 f82a 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046c:	f000 fa54 	bl	8000918 <MX_GPIO_Init>
  MX_DMA_Init();
 8000470:	f000 fa28 	bl	80008c4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000474:	f000 f9d8 	bl	8000828 <MX_FDCAN1_Init>
  MX_ADC2_Init();
 8000478:	f000 f86e 	bl	8000558 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800047c:	f003 ffec 	bl	8004458 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readTemp */
  readTempHandle = osThreadNew(readTempFunction, NULL, &readTemp_attributes);
 8000480:	4a09      	ldr	r2, [pc, #36]	@ (80004a8 <main+0x48>)
 8000482:	2100      	movs	r1, #0
 8000484:	4809      	ldr	r0, [pc, #36]	@ (80004ac <main+0x4c>)
 8000486:	f004 f831 	bl	80044ec <osThreadNew>
 800048a:	4603      	mov	r3, r0
 800048c:	4a08      	ldr	r2, [pc, #32]	@ (80004b0 <main+0x50>)
 800048e:	6013      	str	r3, [r2, #0]

  /* creation of sendCAN */
  sendCANHandle = osThreadNew(sendCANFunction, NULL, &sendCAN_attributes);
 8000490:	4a08      	ldr	r2, [pc, #32]	@ (80004b4 <main+0x54>)
 8000492:	2100      	movs	r1, #0
 8000494:	4808      	ldr	r0, [pc, #32]	@ (80004b8 <main+0x58>)
 8000496:	f004 f829 	bl	80044ec <osThreadNew>
 800049a:	4603      	mov	r3, r0
 800049c:	4a07      	ldr	r2, [pc, #28]	@ (80004bc <main+0x5c>)
 800049e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004a0:	f003 fffe 	bl	80044a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <main+0x44>
 80004a8:	080071f0 	.word	0x080071f0
 80004ac:	080009d5 	.word	0x080009d5
 80004b0:	20000188 	.word	0x20000188
 80004b4:	08007214 	.word	0x08007214
 80004b8:	08000a01 	.word	0x08000a01
 80004bc:	2000018c 	.word	0x2000018c

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b094      	sub	sp, #80	@ 0x50
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0318 	add.w	r3, r7, #24
 80004ca:	2238      	movs	r2, #56	@ 0x38
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f006 fe32 	bl	8007138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004e2:	2000      	movs	r0, #0
 80004e4:	f002 ff9e 	bl	8003424 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e8:	2302      	movs	r3, #2
 80004ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f2:	2340      	movs	r3, #64	@ 0x40
 80004f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f6:	2302      	movs	r3, #2
 80004f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004fa:	2302      	movs	r3, #2
 80004fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80004fe:	2304      	movs	r3, #4
 8000500:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000502:	2355      	movs	r3, #85	@ 0x55
 8000504:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000506:	2302      	movs	r3, #2
 8000508:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800050a:	2302      	movs	r3, #2
 800050c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800050e:	2302      	movs	r3, #2
 8000510:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000512:	f107 0318 	add.w	r3, r7, #24
 8000516:	4618      	mov	r0, r3
 8000518:	f003 f838 	bl	800358c <HAL_RCC_OscConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000522:	f000 fab5 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	230f      	movs	r3, #15
 8000528:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052a:	2303      	movs	r3, #3
 800052c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2104      	movs	r1, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fb36 	bl	8003bb0 <HAL_RCC_ClockConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800054a:	f000 faa1 	bl	8000a90 <Error_Handler>
  }
}
 800054e:	bf00      	nop
 8000550:	3750      	adds	r7, #80	@ 0x50
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	463b      	mov	r3, r7
 8000560:	2220      	movs	r2, #32
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f006 fde7 	bl	8007138 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800056a:	4b9c      	ldr	r3, [pc, #624]	@ (80007dc <MX_ADC2_Init+0x284>)
 800056c:	4a9c      	ldr	r2, [pc, #624]	@ (80007e0 <MX_ADC2_Init+0x288>)
 800056e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000570:	4b9a      	ldr	r3, [pc, #616]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000572:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000576:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000578:	4b98      	ldr	r3, [pc, #608]	@ (80007dc <MX_ADC2_Init+0x284>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057e:	4b97      	ldr	r3, [pc, #604]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000584:	4b95      	ldr	r3, [pc, #596]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058a:	4b94      	ldr	r3, [pc, #592]	@ (80007dc <MX_ADC2_Init+0x284>)
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000590:	4b92      	ldr	r3, [pc, #584]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000592:	2204      	movs	r2, #4
 8000594:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000596:	4b91      	ldr	r3, [pc, #580]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000598:	2200      	movs	r2, #0
 800059a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800059c:	4b8f      	ldr	r3, [pc, #572]	@ (80007dc <MX_ADC2_Init+0x284>)
 800059e:	2201      	movs	r2, #1
 80005a0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 16;
 80005a2:	4b8e      	ldr	r3, [pc, #568]	@ (80007dc <MX_ADC2_Init+0x284>)
 80005a4:	2210      	movs	r2, #16
 80005a6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005a8:	4b8c      	ldr	r3, [pc, #560]	@ (80007dc <MX_ADC2_Init+0x284>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b8a      	ldr	r3, [pc, #552]	@ (80007dc <MX_ADC2_Init+0x284>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b6:	4b89      	ldr	r3, [pc, #548]	@ (80007dc <MX_ADC2_Init+0x284>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005bc:	4b87      	ldr	r3, [pc, #540]	@ (80007dc <MX_ADC2_Init+0x284>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c4:	4b85      	ldr	r3, [pc, #532]	@ (80007dc <MX_ADC2_Init+0x284>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80005ca:	4b84      	ldr	r3, [pc, #528]	@ (80007dc <MX_ADC2_Init+0x284>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005d2:	4882      	ldr	r0, [pc, #520]	@ (80007dc <MX_ADC2_Init+0x284>)
 80005d4:	f000 feb6 	bl	8001344 <HAL_ADC_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80005de:	f000 fa57 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005e2:	4b80      	ldr	r3, [pc, #512]	@ (80007e4 <MX_ADC2_Init+0x28c>)
 80005e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e6:	2306      	movs	r3, #6
 80005e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80005ea:	2307      	movs	r3, #7
 80005ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ee:	237f      	movs	r3, #127	@ 0x7f
 80005f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f2:	2304      	movs	r3, #4
 80005f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	4877      	ldr	r0, [pc, #476]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000600:	f001 f92c 	bl	800185c <HAL_ADC_ConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800060a:	f000 fa41 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800060e:	4b76      	ldr	r3, [pc, #472]	@ (80007e8 <MX_ADC2_Init+0x290>)
 8000610:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000612:	230c      	movs	r3, #12
 8000614:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	4619      	mov	r1, r3
 800061a:	4870      	ldr	r0, [pc, #448]	@ (80007dc <MX_ADC2_Init+0x284>)
 800061c:	f001 f91e 	bl	800185c <HAL_ADC_ConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000626:	f000 fa33 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800062a:	4b70      	ldr	r3, [pc, #448]	@ (80007ec <MX_ADC2_Init+0x294>)
 800062c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800062e:	2312      	movs	r3, #18
 8000630:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000632:	463b      	mov	r3, r7
 8000634:	4619      	mov	r1, r3
 8000636:	4869      	ldr	r0, [pc, #420]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000638:	f001 f910 	bl	800185c <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000642:	f000 fa25 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000646:	4b6a      	ldr	r3, [pc, #424]	@ (80007f0 <MX_ADC2_Init+0x298>)
 8000648:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800064a:	2318      	movs	r3, #24
 800064c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	4619      	mov	r1, r3
 8000652:	4862      	ldr	r0, [pc, #392]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000654:	f001 f902 	bl	800185c <HAL_ADC_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 800065e:	f000 fa17 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000662:	4b64      	ldr	r3, [pc, #400]	@ (80007f4 <MX_ADC2_Init+0x29c>)
 8000664:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	485a      	ldr	r0, [pc, #360]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000672:	f001 f8f3 	bl	800185c <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 800067c:	f000 fa08 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000680:	4b5d      	ldr	r3, [pc, #372]	@ (80007f8 <MX_ADC2_Init+0x2a0>)
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000684:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000688:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	4619      	mov	r1, r3
 800068e:	4853      	ldr	r0, [pc, #332]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000690:	f001 f8e4 	bl	800185c <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 800069a:	f000 f9f9 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800069e:	4b57      	ldr	r3, [pc, #348]	@ (80007fc <MX_ADC2_Init+0x2a4>)
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80006a2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	484b      	ldr	r0, [pc, #300]	@ (80007dc <MX_ADC2_Init+0x284>)
 80006ae:	f001 f8d5 	bl	800185c <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC2_Init+0x164>
  {
    Error_Handler();
 80006b8:	f000 f9ea 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006bc:	4b50      	ldr	r3, [pc, #320]	@ (8000800 <MX_ADC2_Init+0x2a8>)
 80006be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80006c0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80006c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	4844      	ldr	r0, [pc, #272]	@ (80007dc <MX_ADC2_Init+0x284>)
 80006cc:	f001 f8c6 	bl	800185c <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 80006d6:	f000 f9db 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006da:	4b4a      	ldr	r3, [pc, #296]	@ (8000804 <MX_ADC2_Init+0x2ac>)
 80006dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80006de:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80006e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	483c      	ldr	r0, [pc, #240]	@ (80007dc <MX_ADC2_Init+0x284>)
 80006ea:	f001 f8b7 	bl	800185c <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC2_Init+0x1a0>
  {
    Error_Handler();
 80006f4:	f000 f9cc 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006f8:	4b43      	ldr	r3, [pc, #268]	@ (8000808 <MX_ADC2_Init+0x2b0>)
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80006fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000700:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	4619      	mov	r1, r3
 8000706:	4835      	ldr	r0, [pc, #212]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000708:	f001 f8a8 	bl	800185c <HAL_ADC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC2_Init+0x1be>
  {
    Error_Handler();
 8000712:	f000 f9bd 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000716:	4b3d      	ldr	r3, [pc, #244]	@ (800080c <MX_ADC2_Init+0x2b4>)
 8000718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800071a:	f240 2306 	movw	r3, #518	@ 0x206
 800071e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	482d      	ldr	r0, [pc, #180]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000726:	f001 f899 	bl	800185c <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC2_Init+0x1dc>
  {
    Error_Handler();
 8000730:	f000 f9ae 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000734:	4b36      	ldr	r3, [pc, #216]	@ (8000810 <MX_ADC2_Init+0x2b8>)
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000738:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 800073c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4826      	ldr	r0, [pc, #152]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000744:	f001 f88a 	bl	800185c <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC2_Init+0x1fa>
  {
    Error_Handler();
 800074e:	f000 f99f 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000752:	4b30      	ldr	r3, [pc, #192]	@ (8000814 <MX_ADC2_Init+0x2bc>)
 8000754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000756:	f240 2312 	movw	r3, #530	@ 0x212
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	481e      	ldr	r0, [pc, #120]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000762:	f001 f87b 	bl	800185c <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC2_Init+0x218>
  {
    Error_Handler();
 800076c:	f000 f990 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000770:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <MX_ADC2_Init+0x2c0>)
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000774:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8000778:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4817      	ldr	r0, [pc, #92]	@ (80007dc <MX_ADC2_Init+0x284>)
 8000780:	f001 f86c 	bl	800185c <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC2_Init+0x236>
  {
    Error_Handler();
 800078a:	f000 f981 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800078e:	4b23      	ldr	r3, [pc, #140]	@ (800081c <MX_ADC2_Init+0x2c4>)
 8000790:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000792:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000796:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	480f      	ldr	r0, [pc, #60]	@ (80007dc <MX_ADC2_Init+0x284>)
 800079e:	f001 f85d 	bl	800185c <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC2_Init+0x254>
  {
    Error_Handler();
 80007a8:	f000 f972 	bl	8000a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_ADC2_Init+0x2c8>)
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80007b0:	f240 3306 	movw	r3, #774	@ 0x306
 80007b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4808      	ldr	r0, [pc, #32]	@ (80007dc <MX_ADC2_Init+0x284>)
 80007bc:	f001 f84e 	bl	800185c <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC2_Init+0x272>
  {
    Error_Handler();
 80007c6:	f000 f963 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) rawAdcBuffer, numberOfThermistors);
 80007ca:	2210      	movs	r2, #16
 80007cc:	4915      	ldr	r1, [pc, #84]	@ (8000824 <MX_ADC2_Init+0x2cc>)
 80007ce:	4803      	ldr	r0, [pc, #12]	@ (80007dc <MX_ADC2_Init+0x284>)
 80007d0:	f000 ff66 	bl	80016a0 <HAL_ADC_Start_DMA>
  /* USER CODE END ADC2_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000058 	.word	0x20000058
 80007e0:	50000100 	.word	0x50000100
 80007e4:	04300002 	.word	0x04300002
 80007e8:	08600004 	.word	0x08600004
 80007ec:	0c900008 	.word	0x0c900008
 80007f0:	10c00010 	.word	0x10c00010
 80007f4:	14f00020 	.word	0x14f00020
 80007f8:	19200040 	.word	0x19200040
 80007fc:	1d500080 	.word	0x1d500080
 8000800:	21800100 	.word	0x21800100
 8000804:	25b00200 	.word	0x25b00200
 8000808:	2a000400 	.word	0x2a000400
 800080c:	2e300800 	.word	0x2e300800
 8000810:	32601000 	.word	0x32601000
 8000814:	36902000 	.word	0x36902000
 8000818:	3ac04000 	.word	0x3ac04000
 800081c:	3ef08000 	.word	0x3ef08000
 8000820:	47520000 	.word	0x47520000
 8000824:	20000190 	.word	0x20000190

08000828 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800082c:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 800082e:	4a24      	ldr	r2, [pc, #144]	@ (80008c0 <MX_FDCAN1_Init+0x98>)
 8000830:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000832:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000838:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000844:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000850:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000858:	220a      	movs	r2, #10
 800085a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800085c:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 800085e:	2201      	movs	r2, #1
 8000860:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 8000862:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000864:	2216      	movs	r2, #22
 8000866:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 800086a:	220b      	movs	r2, #11
 800086c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000870:	2201      	movs	r2, #1
 8000872:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000876:	2201      	movs	r2, #1
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 800087c:	2201      	movs	r2, #1
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000882:	2201      	movs	r2, #1
 8000884:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000888:	2200      	movs	r2, #0
 800088a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800088c:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000898:	4808      	ldr	r0, [pc, #32]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 800089a:	f002 f8b7 	bl	8002a0c <HAL_FDCAN_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008a4:	f000 f8f4 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2101      	movs	r1, #1
 80008ac:	4803      	ldr	r0, [pc, #12]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 80008ae:	f002 fa73 	bl	8002d98 <HAL_FDCAN_ActivateNotification>
  HAL_FDCAN_Start(&hfdcan1);
 80008b2:	4802      	ldr	r0, [pc, #8]	@ (80008bc <MX_FDCAN1_Init+0x94>)
 80008b4:	f002 fa04 	bl	8002cc0 <HAL_FDCAN_Start>
  /* USER CODE END FDCAN1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000124 	.word	0x20000124
 80008c0:	40006400 	.word	0x40006400

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_DMA_Init+0x50>)
 80008cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008ce:	4a11      	ldr	r2, [pc, #68]	@ (8000914 <MX_DMA_Init+0x50>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_DMA_Init+0x50>)
 80008d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_DMA_Init+0x50>)
 80008e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000914 <MX_DMA_Init+0x50>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_DMA_Init+0x50>)
 80008f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2105      	movs	r1, #5
 80008fe:	200b      	movs	r0, #11
 8000900:	f001 fddd 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000904:	200b      	movs	r0, #11
 8000906:	f001 fdf4 	bl	80024f2 <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_GPIO_Init+0x74>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a1a      	ldr	r2, [pc, #104]	@ (800098c <MX_GPIO_Init+0x74>)
 8000924:	f043 0320 	orr.w	r3, r3, #32
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_GPIO_Init+0x74>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0320 	and.w	r3, r3, #32
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_GPIO_Init+0x74>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a14      	ldr	r2, [pc, #80]	@ (800098c <MX_GPIO_Init+0x74>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_GPIO_Init+0x74>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_GPIO_Init+0x74>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a0e      	ldr	r2, [pc, #56]	@ (800098c <MX_GPIO_Init+0x74>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_GPIO_Init+0x74>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_GPIO_Init+0x74>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4a08      	ldr	r2, [pc, #32]	@ (800098c <MX_GPIO_Init+0x74>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_GPIO_Init+0x74>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(readTempHandle, &xHigherPriorityTaskWoken);
 800099c:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <HAL_ADC_ConvCpltCallback+0x3c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f107 020c 	add.w	r2, r7, #12
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 fb40 	bl	800602c <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d007      	beq.n	80009c2 <HAL_ADC_ConvCpltCallback+0x32>
 80009b2:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <HAL_ADC_ConvCpltCallback+0x40>)
 80009b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	f3bf 8f4f 	dsb	sy
 80009be:	f3bf 8f6f 	isb	sy
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000188 	.word	0x20000188
 80009d0:	e000ed04 	.word	0xe000ed04

080009d4 <readTempFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readTempFunction */
void readTempFunction(void *argument)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	readTempHandle = xTaskGetCurrentTaskHandle();
 80009dc:	f005 fa40 	bl	8005e60 <xTaskGetCurrentTaskHandle>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a06      	ldr	r2, [pc, #24]	@ (80009fc <readTempFunction+0x28>)
 80009e4:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80009e6:	f04f 31ff 	mov.w	r1, #4294967295
 80009ea:	2001      	movs	r0, #1
 80009ec:	f005 fad6 	bl	8005f9c <ulTaskNotifyTake>
	  osDelay(1);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f003 fe0d 	bl	8004610 <osDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80009f6:	bf00      	nop
 80009f8:	e7f5      	b.n	80009e6 <readTempFunction+0x12>
 80009fa:	bf00      	nop
 80009fc:	20000188 	.word	0x20000188

08000a00 <sendCANFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendCANFunction */
void sendCANFunction(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  static int burst = 0;

	  if (burst%3 == 0){
 8000a08:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <sendCANFunction+0x84>)
 8000a0a:	6819      	ldr	r1, [r3, #0]
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <sendCANFunction+0x88>)
 8000a0e:	fb83 3201 	smull	r3, r2, r3, r1
 8000a12:	17cb      	asrs	r3, r1, #31
 8000a14:	1ad2      	subs	r2, r2, r3
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	1aca      	subs	r2, r1, r3
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d109      	bne.n	8000a36 <sendCANFunction+0x36>
		  sendTemperatureToMaster0(filteredTempBuffer);
 8000a22:	481a      	ldr	r0, [pc, #104]	@ (8000a8c <sendCANFunction+0x8c>)
 8000a24:	f7ff fbfc 	bl	8000220 <sendTemperatureToMaster0>
		  sendTemperatureToMaster1(filteredTempBuffer);
 8000a28:	4818      	ldr	r0, [pc, #96]	@ (8000a8c <sendCANFunction+0x8c>)
 8000a2a:	f7ff fc1d 	bl	8000268 <sendTemperatureToMaster1>
		  sendTemperatureToMaster2(filteredTempBuffer);
 8000a2e:	4817      	ldr	r0, [pc, #92]	@ (8000a8c <sendCANFunction+0x8c>)
 8000a30:	f7ff fc3e 	bl	80002b0 <sendTemperatureToMaster2>
 8000a34:	e01c      	b.n	8000a70 <sendCANFunction+0x70>
	  }

	  else if (burst%3 == 1){
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <sendCANFunction+0x84>)
 8000a38:	6819      	ldr	r1, [r3, #0]
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <sendCANFunction+0x88>)
 8000a3c:	fb83 3201 	smull	r3, r2, r3, r1
 8000a40:	17cb      	asrs	r3, r1, #31
 8000a42:	1ad2      	subs	r2, r2, r3
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	1aca      	subs	r2, r1, r3
 8000a4c:	2a01      	cmp	r2, #1
 8000a4e:	d109      	bne.n	8000a64 <sendCANFunction+0x64>
		  sendTemperatureToMaster3(filteredTempBuffer);
 8000a50:	480e      	ldr	r0, [pc, #56]	@ (8000a8c <sendCANFunction+0x8c>)
 8000a52:	f7ff fc51 	bl	80002f8 <sendTemperatureToMaster3>
		  sendTemperatureToMaster4(filteredTempBuffer);
 8000a56:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <sendCANFunction+0x8c>)
 8000a58:	f7ff fc72 	bl	8000340 <sendTemperatureToMaster4>
		  sendTemperatureToMaster5(filteredTempBuffer);
 8000a5c:	480b      	ldr	r0, [pc, #44]	@ (8000a8c <sendCANFunction+0x8c>)
 8000a5e:	f7ff fc93 	bl	8000388 <sendTemperatureToMaster5>
 8000a62:	e005      	b.n	8000a70 <sendCANFunction+0x70>
	  }

	  else{
		  sendTemperatureToMaster6(filteredTempBuffer);
 8000a64:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <sendCANFunction+0x8c>)
 8000a66:	f7ff fcb3 	bl	80003d0 <sendTemperatureToMaster6>
		  sendTemperatureToMaster7(filteredTempBuffer);
 8000a6a:	4808      	ldr	r0, [pc, #32]	@ (8000a8c <sendCANFunction+0x8c>)
 8000a6c:	f7ff fcd4 	bl	8000418 <sendTemperatureToMaster7>
	  }

	  burst++;
 8000a70:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <sendCANFunction+0x84>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a03      	ldr	r2, [pc, #12]	@ (8000a84 <sendCANFunction+0x84>)
 8000a78:	6013      	str	r3, [r2, #0]
	  osDelay(100);
 8000a7a:	2064      	movs	r0, #100	@ 0x64
 8000a7c:	f003 fdc8 	bl	8004610 <osDelay>
  {
 8000a80:	e7c2      	b.n	8000a08 <sendCANFunction+0x8>
 8000a82:	bf00      	nop
 8000a84:	20000210 	.word	0x20000210
 8000a88:	55555556 	.word	0x55555556
 8000a8c:	200001d0 	.word	0x200001d0

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <Error_Handler+0x8>

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_MspInit+0x50>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa6:	4a11      	ldr	r2, [pc, #68]	@ (8000aec <HAL_MspInit+0x50>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_MspInit+0x50>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_MspInit+0x50>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000abe:	4a0b      	ldr	r2, [pc, #44]	@ (8000aec <HAL_MspInit+0x50>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x50>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	f06f 0001 	mvn.w	r0, #1
 8000ada:	f001 fcf0 	bl	80024be <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ade:	f002 fd45 	bl	800356c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0a0      	sub	sp, #128	@ 0x80
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	2250      	movs	r2, #80	@ 0x50
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 fb11 	bl	8007138 <memset>
  if(hadc->Instance==ADC2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a58      	ldr	r2, [pc, #352]	@ (8000c7c <HAL_ADC_MspInit+0x18c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	f040 80a9 	bne.w	8000c74 <HAL_ADC_MspInit+0x184>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b28:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fa20 	bl	8003f78 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000b3e:	f7ff ffa7 	bl	8000a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b42:	4b4f      	ldr	r3, [pc, #316]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a4e      	ldr	r2, [pc, #312]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5a:	4b49      	ldr	r3, [pc, #292]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a48      	ldr	r2, [pc, #288]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b60:	f043 0320 	orr.w	r3, r3, #32
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b46      	ldr	r3, [pc, #280]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0320 	and.w	r3, r3, #32
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b43      	ldr	r3, [pc, #268]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a42      	ldr	r2, [pc, #264]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b40      	ldr	r3, [pc, #256]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4b3a      	ldr	r3, [pc, #232]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b37      	ldr	r3, [pc, #220]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4a36      	ldr	r2, [pc, #216]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b34      	ldr	r3, [pc, #208]	@ (8000c80 <HAL_ADC_MspInit+0x190>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ADC2_IN11
    PB2     ------> ADC2_IN12
    PB11     ------> ADC2_IN14
    PB15     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bc6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	482d      	ldr	r0, [pc, #180]	@ (8000c84 <HAL_ADC_MspInit+0x194>)
 8000bce:	f002 faa7 	bl	8003120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bd2:	233f      	movs	r3, #63	@ 0x3f
 8000bd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bde:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000be2:	4619      	mov	r1, r3
 8000be4:	4828      	ldr	r0, [pc, #160]	@ (8000c88 <HAL_ADC_MspInit+0x198>)
 8000be6:	f002 fa9b 	bl	8003120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000bea:	23f3      	movs	r3, #243	@ 0xf3
 8000bec:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c00:	f002 fa8e 	bl	8003120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_15;
 8000c04:	f648 0304 	movw	r3, #34820	@ 0x8804
 8000c08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c16:	4619      	mov	r1, r3
 8000c18:	481c      	ldr	r0, [pc, #112]	@ (8000c8c <HAL_ADC_MspInit+0x19c>)
 8000c1a:	f002 fa81 	bl	8003120 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c20:	4a1c      	ldr	r2, [pc, #112]	@ (8000c94 <HAL_ADC_MspInit+0x1a4>)
 8000c22:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c26:	2224      	movs	r2, #36	@ 0x24
 8000c28:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c42:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c4a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c4e:	2220      	movs	r2, #32
 8000c50:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c58:	480d      	ldr	r0, [pc, #52]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c5a:	f001 fc65 	bl	8002528 <HAL_DMA_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8000c64:	f7ff ff14 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a09      	ldr	r2, [pc, #36]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c6c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c6e:	4a08      	ldr	r2, [pc, #32]	@ (8000c90 <HAL_ADC_MspInit+0x1a0>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8000c74:	bf00      	nop
 8000c76:	3780      	adds	r7, #128	@ 0x80
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	50000100 	.word	0x50000100
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48001400 	.word	0x48001400
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	48000400 	.word	0x48000400
 8000c90:	200000c4 	.word	0x200000c4
 8000c94:	40020008 	.word	0x40020008

08000c98 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b09e      	sub	sp, #120	@ 0x78
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2250      	movs	r2, #80	@ 0x50
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f006 fa3d 	bl	8007138 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a20      	ldr	r2, [pc, #128]	@ (8000d44 <HAL_FDCAN_MspInit+0xac>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d139      	bne.n	8000d3c <HAL_FDCAN_MspInit+0xa4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ccc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000cce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 f94d 	bl	8003f78 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000ce4:	f7ff fed4 	bl	8000a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ce8:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <HAL_FDCAN_MspInit+0xb0>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cec:	4a16      	ldr	r2, [pc, #88]	@ (8000d48 <HAL_FDCAN_MspInit+0xb0>)
 8000cee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <HAL_FDCAN_MspInit+0xb0>)
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_FDCAN_MspInit+0xb0>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d04:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <HAL_FDCAN_MspInit+0xb0>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_FDCAN_MspInit+0xb0>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d18:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d1c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d2a:	2309      	movs	r3, #9
 8000d2c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d38:	f002 f9f2 	bl	8003120 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3778      	adds	r7, #120	@ 0x78
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40006400 	.word	0x40006400
 8000d48:	40021000 	.word	0x40021000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d86:	f000 f8a1 	bl	8000ecc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d8a:	f005 f879 	bl	8005e80 <xTaskGetSchedulerState>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d001      	beq.n	8000d98 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d94:	f005 ff50 	bl	8006c38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <DMA1_Channel1_IRQHandler+0x10>)
 8000da2:	f001 fce4 	bl	800276e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000c4 	.word	0x200000c4

08000db0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd4:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dd6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd8:	f7ff ffea 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	@ (8000e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <LoopForever+0xe>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e20 <LoopForever+0x16>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f006 f9a1 	bl	8007148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e06:	f7ff fb2b 	bl	8000460 <main>

08000e0a <LoopForever>:

LoopForever:
    b LoopForever
 8000e0a:	e7fe      	b.n	8000e0a <LoopForever>
  ldr   r0, =_estack
 8000e0c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e18:	08007260 	.word	0x08007260
  ldr r2, =_sbss
 8000e1c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e20:	20001b68 	.word	0x20001b68

08000e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC1_2_IRQHandler>

08000e26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f001 fb39 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e36:	200f      	movs	r0, #15
 8000e38:	f000 f80e 	bl	8000e58 <HAL_InitTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	e001      	b.n	8000e4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e48:	f7ff fe28 	bl	8000a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e64:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <HAL_InitTick+0x68>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d022      	beq.n	8000eb2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <HAL_InitTick+0x6c>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <HAL_InitTick+0x68>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fb44 	bl	800250e <HAL_SYSTICK_Config>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d10f      	bne.n	8000eac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	d809      	bhi.n	8000ea6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e92:	2200      	movs	r2, #0
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9a:	f001 fb10 	bl	80024be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <HAL_InitTick+0x70>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e007      	b.n	8000eb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e004      	b.n	8000eb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e001      	b.n	8000eb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <HAL_IncTick+0x1c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <HAL_IncTick+0x20>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a03      	ldr	r2, [pc, #12]	@ (8000ee8 <HAL_IncTick+0x1c>)
 8000edc:	6013      	str	r3, [r2, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	20000214 	.word	0x20000214
 8000eec:	20000008 	.word	0x20000008

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	@ (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000214 	.word	0x20000214

08000f08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	609a      	str	r2, [r3, #8]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	609a      	str	r2, [r3, #8]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3360      	adds	r3, #96	@ 0x60
 8000f82:	461a      	mov	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <LL_ADC_SetOffset+0x44>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fa8:	bf00      	nop
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	03fff000 	.word	0x03fff000

08000fb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3360      	adds	r3, #96	@ 0x60
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3360      	adds	r3, #96	@ 0x60
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	431a      	orrs	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800101a:	b480      	push	{r7}
 800101c:	b087      	sub	sp, #28
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3360      	adds	r3, #96	@ 0x60
 800102a:	461a      	mov	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	431a      	orrs	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001044:	bf00      	nop
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3360      	adds	r3, #96	@ 0x60
 8001060:	461a      	mov	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	431a      	orrs	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	615a      	str	r2, [r3, #20]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b087      	sub	sp, #28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3330      	adds	r3, #48	@ 0x30
 80010e2:	461a      	mov	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	0a1b      	lsrs	r3, r3, #8
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	4413      	add	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	211f      	movs	r1, #31
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	401a      	ands	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	0e9b      	lsrs	r3, r3, #26
 800110a:	f003 011f 	and.w	r1, r3, #31
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	431a      	orrs	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800112a:	b480      	push	{r7}
 800112c:	b087      	sub	sp, #28
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3314      	adds	r3, #20
 800113a:	461a      	mov	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	0e5b      	lsrs	r3, r3, #25
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	4413      	add	r3, r2
 8001148:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	0d1b      	lsrs	r3, r3, #20
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	2107      	movs	r1, #7
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	0d1b      	lsrs	r3, r3, #20
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	431a      	orrs	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001198:	43db      	mvns	r3, r3
 800119a:	401a      	ands	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0318 	and.w	r3, r3, #24
 80011a2:	4908      	ldr	r1, [pc, #32]	@ (80011c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011a4:	40d9      	lsrs	r1, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	400b      	ands	r3, r1
 80011aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ae:	431a      	orrs	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	0007ffff 	.word	0x0007ffff

080011c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 031f 	and.w	r3, r3, #31
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80011f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6093      	str	r3, [r2, #8]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800121c:	d101      	bne.n	8001222 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001240:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001244:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800126c:	d101      	bne.n	8001272 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001290:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <LL_ADC_IsEnabled+0x18>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <LL_ADC_IsEnabled+0x1a>
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012e2:	f043 0204 	orr.w	r2, r3, #4
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b04      	cmp	r3, #4
 8001308:	d101      	bne.n	800130e <LL_ADC_REG_IsConversionOngoing+0x18>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b08      	cmp	r3, #8
 800132e:	d101      	bne.n	8001334 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e19b      	b.n	8001696 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001368:	2b00      	cmp	r3, #0
 800136a:	d109      	bne.n	8001380 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fbbf 	bl	8000af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff3f 	bl	8001208 <LL_ADC_IsDeepPowerDownEnabled>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff25 	bl	80011e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff5a 	bl	8001258 <LL_ADC_IsInternalRegulatorEnabled>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d115      	bne.n	80013d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff3e 	bl	8001230 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013b4:	4b97      	ldr	r3, [pc, #604]	@ (8001614 <HAL_ADC_Init+0x2d0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	4a97      	ldr	r2, [pc, #604]	@ (8001618 <HAL_ADC_Init+0x2d4>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	099b      	lsrs	r3, r3, #6
 80013c2:	3301      	adds	r3, #1
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f9      	bne.n	80013ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff3c 	bl	8001258 <LL_ADC_IsInternalRegulatorEnabled>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10d      	bne.n	8001402 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ea:	f043 0210 	orr.w	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	f043 0201 	orr.w	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff75 	bl	80012f6 <LL_ADC_REG_IsConversionOngoing>
 800140c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 8134 	bne.w	8001684 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 8130 	bne.w	8001684 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800142c:	f043 0202 	orr.w	r2, r3, #2
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff35 	bl	80012a8 <LL_ADC_IsEnabled>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d137      	bne.n	80014b4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800144c:	d004      	beq.n	8001458 <HAL_ADC_Init+0x114>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a72      	ldr	r2, [pc, #456]	@ (800161c <HAL_ADC_Init+0x2d8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d10f      	bne.n	8001478 <HAL_ADC_Init+0x134>
 8001458:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800145c:	f7ff ff24 	bl	80012a8 <LL_ADC_IsEnabled>
 8001460:	4604      	mov	r4, r0
 8001462:	486e      	ldr	r0, [pc, #440]	@ (800161c <HAL_ADC_Init+0x2d8>)
 8001464:	f7ff ff20 	bl	80012a8 <LL_ADC_IsEnabled>
 8001468:	4603      	mov	r3, r0
 800146a:	4323      	orrs	r3, r4
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf0c      	ite	eq
 8001470:	2301      	moveq	r3, #1
 8001472:	2300      	movne	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	e008      	b.n	800148a <HAL_ADC_Init+0x146>
 8001478:	4869      	ldr	r0, [pc, #420]	@ (8001620 <HAL_ADC_Init+0x2dc>)
 800147a:	f7ff ff15 	bl	80012a8 <LL_ADC_IsEnabled>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d012      	beq.n	80014b4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001496:	d004      	beq.n	80014a2 <HAL_ADC_Init+0x15e>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a5f      	ldr	r2, [pc, #380]	@ (800161c <HAL_ADC_Init+0x2d8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Init+0x162>
 80014a2:	4a60      	ldr	r2, [pc, #384]	@ (8001624 <HAL_ADC_Init+0x2e0>)
 80014a4:	e000      	b.n	80014a8 <HAL_ADC_Init+0x164>
 80014a6:	4a60      	ldr	r2, [pc, #384]	@ (8001628 <HAL_ADC_Init+0x2e4>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f7ff fd2a 	bl	8000f08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7f5b      	ldrb	r3, [r3, #29]
 80014b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e6:	3b01      	subs	r3, #1
 80014e8:	045b      	lsls	r3, r3, #17
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001504:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	4b46      	ldr	r3, [pc, #280]	@ (800162c <HAL_ADC_Init+0x2e8>)
 8001514:	4013      	ands	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	430b      	orrs	r3, r1
 800151e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff feee 	bl	800131c <LL_ADC_INJ_IsConversionOngoing>
 8001540:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d17b      	bne.n	8001640 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d178      	bne.n	8001640 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001552:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800155a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800156a:	f023 0302 	bic.w	r3, r3, #2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	69b9      	ldr	r1, [r7, #24]
 8001574:	430b      	orrs	r3, r1
 8001576:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d017      	beq.n	80015b0 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800158e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001598:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800159c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6911      	ldr	r1, [r2, #16]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80015ae:	e013      	b.n	80015d8 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80015be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80015d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015d4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d126      	bne.n	8001630 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015f8:	4311      	orrs	r1, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015fe:	4311      	orrs	r1, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001604:	430a      	orrs	r2, r1
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	e015      	b.n	8001640 <HAL_ADC_Init+0x2fc>
 8001614:	20000000 	.word	0x20000000
 8001618:	053e2d63 	.word	0x053e2d63
 800161c:	50000100 	.word	0x50000100
 8001620:	50000400 	.word	0x50000400
 8001624:	50000300 	.word	0x50000300
 8001628:	50000700 	.word	0x50000700
 800162c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d10c      	bne.n	8001662 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f023 010f 	bic.w	r1, r3, #15
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	1e5a      	subs	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001660:	e007      	b.n	8001672 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 020f 	bic.w	r2, r2, #15
 8001670:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001676:	f023 0303 	bic.w	r3, r3, #3
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001682:	e007      	b.n	8001694 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001688:	f043 0210 	orr.w	r2, r3, #16
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001694:	7ffb      	ldrb	r3, [r7, #31]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	@ 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}
 800169e:	bf00      	nop

080016a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016b4:	d004      	beq.n	80016c0 <HAL_ADC_Start_DMA+0x20>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a57      	ldr	r2, [pc, #348]	@ (8001818 <HAL_ADC_Start_DMA+0x178>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_Start_DMA+0x24>
 80016c0:	4b56      	ldr	r3, [pc, #344]	@ (800181c <HAL_ADC_Start_DMA+0x17c>)
 80016c2:	e000      	b.n	80016c6 <HAL_ADC_Start_DMA+0x26>
 80016c4:	4b56      	ldr	r3, [pc, #344]	@ (8001820 <HAL_ADC_Start_DMA+0x180>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fd7e 	bl	80011c8 <LL_ADC_GetMultimode>
 80016cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fe0f 	bl	80012f6 <LL_ADC_REG_IsConversionOngoing>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 8094 	bne.w	8001808 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_Start_DMA+0x4e>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e08f      	b.n	800180e <HAL_ADC_Start_DMA+0x16e>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001824 <HAL_ADC_Start_DMA+0x184>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d008      	beq.n	8001712 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b05      	cmp	r3, #5
 800170a:	d002      	beq.n	8001712 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b09      	cmp	r3, #9
 8001710:	d173      	bne.n	80017fa <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 fcce 	bl	80020b4 <ADC_Enable>
 8001718:	4603      	mov	r3, r0
 800171a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d166      	bne.n	80017f0 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001726:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a37      	ldr	r2, [pc, #220]	@ (8001818 <HAL_ADC_Start_DMA+0x178>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d002      	beq.n	8001746 <HAL_ADC_Start_DMA+0xa6>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	e001      	b.n	800174a <HAL_ADC_Start_DMA+0xaa>
 8001746:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	4293      	cmp	r3, r2
 8001750:	d002      	beq.n	8001758 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d105      	bne.n	8001764 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001774:	f023 0206 	bic.w	r2, r3, #6
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	661a      	str	r2, [r3, #96]	@ 0x60
 800177c:	e002      	b.n	8001784 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001788:	4a27      	ldr	r2, [pc, #156]	@ (8001828 <HAL_ADC_Start_DMA+0x188>)
 800178a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001790:	4a26      	ldr	r2, [pc, #152]	@ (800182c <HAL_ADC_Start_DMA+0x18c>)
 8001792:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001798:	4a25      	ldr	r2, [pc, #148]	@ (8001830 <HAL_ADC_Start_DMA+0x190>)
 800179a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	221c      	movs	r2, #28
 80017a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0210 	orr.w	r2, r2, #16
 80017ba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3340      	adds	r3, #64	@ 0x40
 80017d6:	4619      	mov	r1, r3
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f000 ff4c 	bl	8002678 <HAL_DMA_Start_IT>
 80017e0:	4603      	mov	r3, r0
 80017e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fd70 	bl	80012ce <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80017ee:	e00d      	b.n	800180c <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80017f8:	e008      	b.n	800180c <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001806:	e001      	b.n	800180c <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001808:	2302      	movs	r3, #2
 800180a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800180c:	7dfb      	ldrb	r3, [r7, #23]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	50000100 	.word	0x50000100
 800181c:	50000300 	.word	0x50000300
 8001820:	50000700 	.word	0x50000700
 8001824:	50000400 	.word	0x50000400
 8001828:	080021e1 	.word	0x080021e1
 800182c:	080022b9 	.word	0x080022b9
 8001830:	080022d5 	.word	0x080022d5

08001834 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0b6      	sub	sp, #216	@ 0xd8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x24>
 800187a:	2302      	movs	r3, #2
 800187c:	f000 bc04 	b.w	8002088 <HAL_ADC_ConfigChannel+0x82c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fd32 	bl	80012f6 <LL_ADC_REG_IsConversionOngoing>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 83e8 	bne.w	800206a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	f7ff fc13 	bl	80010d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fd20 	bl	80012f6 <LL_ADC_REG_IsConversionOngoing>
 80018b6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fd2c 	bl	800131c <LL_ADC_INJ_IsConversionOngoing>
 80018c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 81d9 	bne.w	8001c84 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 81d4 	bne.w	8001c84 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018e4:	d10f      	bne.n	8001906 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff fc1a 	bl	800112a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fbc1 	bl	8001086 <LL_ADC_SetSamplingTimeCommonConfig>
 8001904:	e00e      	b.n	8001924 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	461a      	mov	r2, r3
 8001914:	f7ff fc09 	bl	800112a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fbb1 	bl	8001086 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	08db      	lsrs	r3, r3, #3
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b04      	cmp	r3, #4
 8001944:	d022      	beq.n	800198c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6919      	ldr	r1, [r3, #16]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001956:	f7ff fb0b 	bl	8000f70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6919      	ldr	r1, [r3, #16]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	461a      	mov	r2, r3
 8001968:	f7ff fb57 	bl	800101a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001978:	2b01      	cmp	r3, #1
 800197a:	d102      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x126>
 800197c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001980:	e000      	b.n	8001984 <HAL_ADC_ConfigChannel+0x128>
 8001982:	2300      	movs	r3, #0
 8001984:	461a      	mov	r2, r3
 8001986:	f7ff fb63 	bl	8001050 <LL_ADC_SetOffsetSaturation>
 800198a:	e17b      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fb10 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10a      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x15c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fb05 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	f003 021f 	and.w	r2, r3, #31
 80019b6:	e01e      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x19a>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fafa 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80019e6:	2320      	movs	r3, #32
 80019e8:	e004      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80019ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x1b2>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0e9b      	lsrs	r3, r3, #26
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	e018      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x1e4>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001a32:	2320      	movs	r3, #32
 8001a34:	e004      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001a36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d106      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fac9 	bl	8000fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2101      	movs	r1, #1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff faad 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10a      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x222>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff faa2 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	0e9b      	lsrs	r3, r3, #26
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	e01e      	b.n	8001abc <HAL_ADC_ConfigChannel+0x260>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2101      	movs	r1, #1
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fa97 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001a9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001aa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e004      	b.n	8001aba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001ab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x278>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	e018      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x2aa>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ae0:	fa93 f3a3 	rbit	r3, r3
 8001ae4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001ae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001aec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001af8:	2320      	movs	r3, #32
 8001afa:	e004      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d106      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2101      	movs	r1, #1
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fa66 	bl	8000fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fa4a 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10a      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x2e8>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2102      	movs	r1, #2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fa3f 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	0e9b      	lsrs	r3, r3, #26
 8001b3e:	f003 021f 	and.w	r2, r3, #31
 8001b42:	e01e      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x326>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fa34 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001b62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001b6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001b72:	2320      	movs	r3, #32
 8001b74:	e004      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x33e>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0e9b      	lsrs	r3, r3, #26
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	e016      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x36c>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001bac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001bba:	2320      	movs	r3, #32
 8001bbc:	e004      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001bbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d106      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fa05 	bl	8000fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2103      	movs	r1, #3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f9e9 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10a      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x3aa>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2103      	movs	r1, #3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f9de 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	0e9b      	lsrs	r3, r3, #26
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	e017      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x3da>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff f9d3 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c20:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001c22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	e003      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d105      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x3f2>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	0e9b      	lsrs	r3, r3, #26
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	e011      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x416>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001c66:	2320      	movs	r3, #32
 8001c68:	e003      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d106      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f9b0 	bl	8000fe4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fb0d 	bl	80012a8 <LL_ADC_IsEnabled>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 813d 	bne.w	8001f10 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f7ff fa6c 	bl	8001180 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4aa2      	ldr	r2, [pc, #648]	@ (8001f38 <HAL_ADC_ConfigChannel+0x6dc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	f040 812e 	bne.w	8001f10 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10b      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x480>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	2b09      	cmp	r3, #9
 8001cd2:	bf94      	ite	ls
 8001cd4:	2301      	movls	r3, #1
 8001cd6:	2300      	movhi	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	e019      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x4b4>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001cea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001cee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	e003      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001cf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	bf94      	ite	ls
 8001d0a:	2301      	movls	r3, #1
 8001d0c:	2300      	movhi	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d079      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x4d4>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	3301      	adds	r3, #1
 8001d28:	069b      	lsls	r3, r3, #26
 8001d2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d2e:	e015      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x500>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001d48:	2320      	movs	r3, #32
 8001d4a:	e003      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	069b      	lsls	r3, r3, #26
 8001d58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x520>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	e017      	b.n	8001dac <HAL_ADC_ConfigChannel+0x550>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001d94:	2320      	movs	r3, #32
 8001d96:	e003      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	2101      	movs	r1, #1
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	ea42 0103 	orr.w	r1, r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10a      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x576>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	051b      	lsls	r3, r3, #20
 8001dd0:	e018      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x5a8>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001dea:	2320      	movs	r3, #32
 8001dec:	e003      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e04:	430b      	orrs	r3, r1
 8001e06:	e07e      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x5c8>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	069b      	lsls	r3, r3, #26
 8001e1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e22:	e015      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x5f4>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	e003      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	069b      	lsls	r3, r3, #26
 8001e4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x614>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	3301      	adds	r3, #1
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	e017      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x644>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	61fb      	str	r3, [r7, #28]
  return result;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	e003      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	ea42 0103 	orr.w	r1, r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10d      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x670>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3b1e      	subs	r3, #30
 8001ec4:	051b      	lsls	r3, r3, #20
 8001ec6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	e01b      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x6a8>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	613b      	str	r3, [r7, #16]
  return result;
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	e003      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f003 021f 	and.w	r2, r3, #31
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	3b1e      	subs	r3, #30
 8001efe:	051b      	lsls	r3, r3, #20
 8001f00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f04:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7ff f90d 	bl	800112a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_ADC_ConfigChannel+0x6e0>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80af 	beq.w	800207c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f26:	d004      	beq.n	8001f32 <HAL_ADC_ConfigChannel+0x6d6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <HAL_ADC_ConfigChannel+0x6e4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10a      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x6ec>
 8001f32:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <HAL_ADC_ConfigChannel+0x6e8>)
 8001f34:	e009      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x6ee>
 8001f36:	bf00      	nop
 8001f38:	407f0000 	.word	0x407f0000
 8001f3c:	80080000 	.word	0x80080000
 8001f40:	50000100 	.word	0x50000100
 8001f44:	50000300 	.word	0x50000300
 8001f48:	4b51      	ldr	r3, [pc, #324]	@ (8002090 <HAL_ADC_ConfigChannel+0x834>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f802 	bl	8000f54 <LL_ADC_GetCommonPathInternalCh>
 8001f50:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a4e      	ldr	r2, [pc, #312]	@ (8002094 <HAL_ADC_ConfigChannel+0x838>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_ADC_ConfigChannel+0x70c>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a4d      	ldr	r2, [pc, #308]	@ (8002098 <HAL_ADC_ConfigChannel+0x83c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d134      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d12e      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f7c:	d17e      	bne.n	800207c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f86:	d004      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0x736>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a43      	ldr	r2, [pc, #268]	@ (800209c <HAL_ADC_ConfigChannel+0x840>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x73a>
 8001f92:	4a43      	ldr	r2, [pc, #268]	@ (80020a0 <HAL_ADC_ConfigChannel+0x844>)
 8001f94:	e000      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x73c>
 8001f96:	4a3e      	ldr	r2, [pc, #248]	@ (8002090 <HAL_ADC_ConfigChannel+0x834>)
 8001f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f7fe ffc3 	bl	8000f2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80020a4 <HAL_ADC_ConfigChannel+0x848>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	4a3e      	ldr	r2, [pc, #248]	@ (80020a8 <HAL_ADC_ConfigChannel+0x84c>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	099b      	lsrs	r3, r3, #6
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fc2:	e002      	b.n	8001fca <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f9      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fd0:	e054      	b.n	800207c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a35      	ldr	r2, [pc, #212]	@ (80020ac <HAL_ADC_ConfigChannel+0x850>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d120      	bne.n	800201e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fe0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11a      	bne.n	800201e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ff0:	d144      	bne.n	800207c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ffa:	d004      	beq.n	8002006 <HAL_ADC_ConfigChannel+0x7aa>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a26      	ldr	r2, [pc, #152]	@ (800209c <HAL_ADC_ConfigChannel+0x840>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x7ae>
 8002006:	4a26      	ldr	r2, [pc, #152]	@ (80020a0 <HAL_ADC_ConfigChannel+0x844>)
 8002008:	e000      	b.n	800200c <HAL_ADC_ConfigChannel+0x7b0>
 800200a:	4a21      	ldr	r2, [pc, #132]	@ (8002090 <HAL_ADC_ConfigChannel+0x834>)
 800200c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002010:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f7fe ff89 	bl	8000f2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800201c:	e02e      	b.n	800207c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a23      	ldr	r2, [pc, #140]	@ (80020b0 <HAL_ADC_ConfigChannel+0x854>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d129      	bne.n	800207c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800202c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d123      	bne.n	800207c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a18      	ldr	r2, [pc, #96]	@ (800209c <HAL_ADC_ConfigChannel+0x840>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01e      	beq.n	800207c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002046:	d004      	beq.n	8002052 <HAL_ADC_ConfigChannel+0x7f6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a13      	ldr	r2, [pc, #76]	@ (800209c <HAL_ADC_ConfigChannel+0x840>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x7fa>
 8002052:	4a13      	ldr	r2, [pc, #76]	@ (80020a0 <HAL_ADC_ConfigChannel+0x844>)
 8002054:	e000      	b.n	8002058 <HAL_ADC_ConfigChannel+0x7fc>
 8002056:	4a0e      	ldr	r2, [pc, #56]	@ (8002090 <HAL_ADC_ConfigChannel+0x834>)
 8002058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800205c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f7fe ff63 	bl	8000f2e <LL_ADC_SetCommonPathInternalCh>
 8002068:	e008      	b.n	800207c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	f043 0220 	orr.w	r2, r3, #32
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002084:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002088:	4618      	mov	r0, r3
 800208a:	37d8      	adds	r7, #216	@ 0xd8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	50000700 	.word	0x50000700
 8002094:	c3210000 	.word	0xc3210000
 8002098:	90c00010 	.word	0x90c00010
 800209c:	50000100 	.word	0x50000100
 80020a0:	50000300 	.word	0x50000300
 80020a4:	20000000 	.word	0x20000000
 80020a8:	053e2d63 	.word	0x053e2d63
 80020ac:	c7520000 	.word	0xc7520000
 80020b0:	cb840000 	.word	0xcb840000

080020b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f8ef 	bl	80012a8 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d176      	bne.n	80021be <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	4b3c      	ldr	r3, [pc, #240]	@ (80021c8 <ADC_Enable+0x114>)
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00d      	beq.n	80020fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e062      	b.n	80021c0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f8be 	bl	8001280 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800210c:	d004      	beq.n	8002118 <ADC_Enable+0x64>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a2e      	ldr	r2, [pc, #184]	@ (80021cc <ADC_Enable+0x118>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <ADC_Enable+0x68>
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <ADC_Enable+0x11c>)
 800211a:	e000      	b.n	800211e <ADC_Enable+0x6a>
 800211c:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <ADC_Enable+0x120>)
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe ff18 	bl	8000f54 <LL_ADC_GetCommonPathInternalCh>
 8002124:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800212a:	2b00      	cmp	r3, #0
 800212c:	d013      	beq.n	8002156 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800212e:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <ADC_Enable+0x124>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	099b      	lsrs	r3, r3, #6
 8002134:	4a29      	ldr	r2, [pc, #164]	@ (80021dc <ADC_Enable+0x128>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	099b      	lsrs	r3, r3, #6
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002148:	e002      	b.n	8002150 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3b01      	subs	r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f9      	bne.n	800214a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002156:	f7fe fecb 	bl	8000ef0 <HAL_GetTick>
 800215a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800215c:	e028      	b.n	80021b0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f8a0 	bl	80012a8 <LL_ADC_IsEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f884 	bl	8001280 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002178:	f7fe feba 	bl	8000ef0 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d914      	bls.n	80021b0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d00d      	beq.n	80021b0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002198:	f043 0210 	orr.w	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e007      	b.n	80021c0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d1cf      	bne.n	800215e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	8000003f 	.word	0x8000003f
 80021cc:	50000100 	.word	0x50000100
 80021d0:	50000300 	.word	0x50000300
 80021d4:	50000700 	.word	0x50000700
 80021d8:	20000000 	.word	0x20000000
 80021dc:	053e2d63 	.word	0x053e2d63

080021e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d14b      	bne.n	8002292 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d021      	beq.n	8002258 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe ff47 	bl	80010ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d032      	beq.n	800228a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d12b      	bne.n	800228a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11f      	bne.n	800228a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002256:	e018      	b.n	800228a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d111      	bne.n	800228a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f7fe fb80 	bl	8000990 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002290:	e00e      	b.n	80022b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f7ff fad2 	bl	8001848 <HAL_ADC_ErrorCallback>
}
 80022a4:	e004      	b.n	80022b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff fab4 	bl	8001834 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff faa4 	bl	8001848 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	@ (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4907      	ldr	r1, [pc, #28]	@ (80023a4 <__NVIC_EnableIRQ+0x38>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	@ (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	@ (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	@ 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	@ 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff8e 	bl	80023a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff29 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024cc:	f7ff ff40 	bl	8002350 <__NVIC_GetPriorityGrouping>
 80024d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	6978      	ldr	r0, [r7, #20]
 80024d8:	f7ff ff90 	bl	80023fc <NVIC_EncodePriority>
 80024dc:	4602      	mov	r2, r0
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff5f 	bl	80023a8 <__NVIC_SetPriority>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff33 	bl	800236c <__NVIC_EnableIRQ>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffa4 	bl	8002464 <SysTick_Config>
 800251c:	4603      	mov	r3, r0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e08d      	b.n	8002656 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <HAL_DMA_Init+0x138>)
 8002542:	429a      	cmp	r2, r3
 8002544:	d80f      	bhi.n	8002566 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	4b45      	ldr	r3, [pc, #276]	@ (8002664 <HAL_DMA_Init+0x13c>)
 800254e:	4413      	add	r3, r2
 8002550:	4a45      	ldr	r2, [pc, #276]	@ (8002668 <HAL_DMA_Init+0x140>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	009a      	lsls	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a42      	ldr	r2, [pc, #264]	@ (800266c <HAL_DMA_Init+0x144>)
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
 8002564:	e00e      	b.n	8002584 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b40      	ldr	r3, [pc, #256]	@ (8002670 <HAL_DMA_Init+0x148>)
 800256e:	4413      	add	r3, r2
 8002570:	4a3d      	ldr	r2, [pc, #244]	@ (8002668 <HAL_DMA_Init+0x140>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	009a      	lsls	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a3c      	ldr	r2, [pc, #240]	@ (8002674 <HAL_DMA_Init+0x14c>)
 8002582:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800259a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800259e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9b6 	bl	8002948 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025e4:	d102      	bne.n	80025ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002600:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d010      	beq.n	800262c <HAL_DMA_Init+0x104>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d80c      	bhi.n	800262c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f9d6 	bl	80029c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	e008      	b.n	800263e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40020407 	.word	0x40020407
 8002664:	bffdfff8 	.word	0xbffdfff8
 8002668:	cccccccd 	.word	0xcccccccd
 800266c:	40020000 	.word	0x40020000
 8002670:	bffdfbf8 	.word	0xbffdfbf8
 8002674:	40020400 	.word	0x40020400

08002678 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_DMA_Start_IT+0x20>
 8002694:	2302      	movs	r3, #2
 8002696:	e066      	b.n	8002766 <HAL_DMA_Start_IT+0xee>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d155      	bne.n	8002758 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f8fb 	bl	80028cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 020e 	orr.w	r2, r2, #14
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e00f      	b.n	8002710 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 020a 	orr.w	r2, r2, #10
 800270e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002728:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800272c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002740:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002744:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e005      	b.n	8002764 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002760:	2302      	movs	r3, #2
 8002762:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002764:	7dfb      	ldrb	r3, [r7, #23]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2204      	movs	r2, #4
 8002790:	409a      	lsls	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d026      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x7a>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d021      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0204 	bic.w	r2, r2, #4
 80027c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	f003 021f 	and.w	r2, r3, #31
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	2104      	movs	r1, #4
 80027d0:	fa01 f202 	lsl.w	r2, r1, r2
 80027d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d071      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027e6:	e06c      	b.n	80028c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2202      	movs	r2, #2
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02e      	beq.n	800285a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d029      	beq.n	800285a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 020a 	bic.w	r2, r2, #10
 8002822:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002830:	f003 021f 	and.w	r2, r3, #31
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	2102      	movs	r1, #2
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d038      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002858:	e033      	b.n	80028c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2208      	movs	r2, #8
 8002864:	409a      	lsls	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d02a      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d025      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 020e 	bic.w	r2, r2, #14
 8002886:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f202 	lsl.w	r2, r1, r2
 800289a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
}
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	f003 021f 	and.w	r2, r3, #31
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f202 	lsl.w	r2, r1, r2
 8002908:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b10      	cmp	r3, #16
 8002918:	d108      	bne.n	800292c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800292a:	e007      	b.n	800293c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	60da      	str	r2, [r3, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002958:	429a      	cmp	r2, r3
 800295a:	d802      	bhi.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800295c:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	e001      	b.n	8002966 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002964:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3b08      	subs	r3, #8
 8002972:	4a12      	ldr	r2, [pc, #72]	@ (80029bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	009a      	lsls	r2, r3, #2
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	461a      	mov	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a0b      	ldr	r2, [pc, #44]	@ (80029c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002992:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	2201      	movs	r2, #1
 800299c:	409a      	lsls	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40020407 	.word	0x40020407
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020820 	.word	0x40020820
 80029bc:	cccccccd 	.word	0xcccccccd
 80029c0:	40020880 	.word	0x40020880

080029c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	461a      	mov	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a08      	ldr	r2, [pc, #32]	@ (8002a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029e6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	2201      	movs	r2, #1
 80029f2:	409a      	lsls	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	1000823f 	.word	0x1000823f
 8002a08:	40020940 	.word	0x40020940

08002a0c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e147      	b.n	8002cae <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe f930 	bl	8000c98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0210 	bic.w	r2, r2, #16
 8002a46:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a48:	f7fe fa52 	bl	8000ef0 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a4e:	e012      	b.n	8002a76 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a50:	f7fe fa4e 	bl	8000ef0 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b0a      	cmp	r3, #10
 8002a5c:	d90b      	bls.n	8002a76 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e11b      	b.n	8002cae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d0e5      	beq.n	8002a50 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a94:	f7fe fa2c 	bl	8000ef0 <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002a9a:	e012      	b.n	8002ac2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a9c:	f7fe fa28 	bl	8000ef0 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b0a      	cmp	r3, #10
 8002aa8:	d90b      	bls.n	8002ac2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0f5      	b.n	8002cae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0e5      	beq.n	8002a9c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0202 	orr.w	r2, r2, #2
 8002ade:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a74      	ldr	r2, [pc, #464]	@ (8002cb8 <HAL_FDCAN_Init+0x2ac>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d103      	bne.n	8002af2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002aea:	4a74      	ldr	r2, [pc, #464]	@ (8002cbc <HAL_FDCAN_Init+0x2b0>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7c1b      	ldrb	r3, [r3, #16]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d108      	bne.n	8002b0c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b08:	619a      	str	r2, [r3, #24]
 8002b0a:	e007      	b.n	8002b1c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b1a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7c5b      	ldrb	r3, [r3, #17]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d108      	bne.n	8002b36 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b32:	619a      	str	r2, [r3, #24]
 8002b34:	e007      	b.n	8002b46 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b44:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7c9b      	ldrb	r3, [r3, #18]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d108      	bne.n	8002b60 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	e007      	b.n	8002b70 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b6e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002b94:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0210 	bic.w	r2, r2, #16
 8002ba4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0204 	orr.w	r2, r2, #4
 8002bbc:	619a      	str	r2, [r3, #24]
 8002bbe:	e02c      	b.n	8002c1a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d028      	beq.n	8002c1a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d01c      	beq.n	8002c0a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bde:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0210 	orr.w	r2, r2, #16
 8002bee:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d110      	bne.n	8002c1a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0220 	orr.w	r2, r2, #32
 8002c06:	619a      	str	r2, [r3, #24]
 8002c08:	e007      	b.n	8002c1a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0220 	orr.w	r2, r2, #32
 8002c18:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c2a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c32:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c42:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c44:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c4e:	d115      	bne.n	8002c7c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c5e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c64:	3b01      	subs	r3, #1
 8002c66:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c68:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	3b01      	subs	r3, #1
 8002c72:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c78:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c7a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f966 	bl	8002f64 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40006400 	.word	0x40006400
 8002cbc:	40006500 	.word	0x40006500

08002cc0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d110      	bne.n	8002cf6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e006      	b.n	8002d04 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
  }
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d12c      	bne.n	8002d82 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e023      	b.n	8002d90 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f962 	bl	8003028 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d70:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002d74:	2201      	movs	r2, #1
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e006      	b.n	8002d90 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d86:	f043 0208 	orr.w	r2, r3, #8
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
  }
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002daa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d003      	beq.n	8002dba <HAL_FDCAN_ActivateNotification+0x22>
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	f040 80c8 	bne.w	8002f4a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03b      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d031      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d027      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01d      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d013      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d13b      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d131      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d127      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d004      	beq.n	8002eae <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11d      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d113      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0202 	orr.w	r2, r2, #2
 8002ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e006      	b.n	8002f58 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4e:	f043 0202 	orr.w	r2, r3, #2
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003020 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002f6e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2b      	ldr	r2, [pc, #172]	@ (8003024 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d103      	bne.n	8002f82 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002f80:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f90:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fb6:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbe:	061a      	lsls	r2, r3, #24
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	e005      	b.n	8003004 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3304      	adds	r3, #4
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d3f3      	bcc.n	8002ff8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	4000a400 	.word	0x4000a400
 8003024:	40006800 	.word	0x40006800

08003028 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	@ 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003046:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800304e:	4313      	orrs	r3, r2
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e00a      	b.n	800306a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800305c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003062:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003064:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003068:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003074:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800307a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003080:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	3304      	adds	r3, #4
 80030a8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	3304      	adds	r3, #4
 80030b4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e020      	b.n	80030fe <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3303      	adds	r3, #3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3302      	adds	r3, #2
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	440b      	add	r3, r1
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80030d4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	3301      	adds	r3, #1
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	440b      	add	r3, r1
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80030e2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	440a      	add	r2, r1
 80030ea:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80030ec:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	3304      	adds	r3, #4
 80030f6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3304      	adds	r3, #4
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4a06      	ldr	r2, [pc, #24]	@ (800311c <FDCAN_CopyMessageToRAM+0xf4>)
 8003104:	5cd3      	ldrb	r3, [r2, r3]
 8003106:	461a      	mov	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	4293      	cmp	r3, r2
 800310c:	d3d6      	bcc.n	80030bc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	3724      	adds	r7, #36	@ 0x24
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	08007248 	.word	0x08007248

08003120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800312e:	e15a      	b.n	80033e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2101      	movs	r1, #1
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 814c 	beq.w	80033e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d005      	beq.n	8003160 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800315c:	2b02      	cmp	r3, #2
 800315e:	d130      	bne.n	80031c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003196:	2201      	movs	r2, #1
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 0201 	and.w	r2, r3, #1
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d017      	beq.n	80031fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	2203      	movs	r2, #3
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d123      	bne.n	8003252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	08da      	lsrs	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	220f      	movs	r2, #15
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	6939      	ldr	r1, [r7, #16]
 800324e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0203 	and.w	r2, r3, #3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80a6 	beq.w	80033e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003294:	4b5b      	ldr	r3, [pc, #364]	@ (8003404 <HAL_GPIO_Init+0x2e4>)
 8003296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003298:	4a5a      	ldr	r2, [pc, #360]	@ (8003404 <HAL_GPIO_Init+0x2e4>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6613      	str	r3, [r2, #96]	@ 0x60
 80032a0:	4b58      	ldr	r3, [pc, #352]	@ (8003404 <HAL_GPIO_Init+0x2e4>)
 80032a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ac:	4a56      	ldr	r2, [pc, #344]	@ (8003408 <HAL_GPIO_Init+0x2e8>)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	3302      	adds	r3, #2
 80032b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032d6:	d01f      	beq.n	8003318 <HAL_GPIO_Init+0x1f8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a4c      	ldr	r2, [pc, #304]	@ (800340c <HAL_GPIO_Init+0x2ec>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d019      	beq.n	8003314 <HAL_GPIO_Init+0x1f4>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a4b      	ldr	r2, [pc, #300]	@ (8003410 <HAL_GPIO_Init+0x2f0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <HAL_GPIO_Init+0x1f0>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003414 <HAL_GPIO_Init+0x2f4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00d      	beq.n	800330c <HAL_GPIO_Init+0x1ec>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a49      	ldr	r2, [pc, #292]	@ (8003418 <HAL_GPIO_Init+0x2f8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d007      	beq.n	8003308 <HAL_GPIO_Init+0x1e8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a48      	ldr	r2, [pc, #288]	@ (800341c <HAL_GPIO_Init+0x2fc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d101      	bne.n	8003304 <HAL_GPIO_Init+0x1e4>
 8003300:	2305      	movs	r3, #5
 8003302:	e00a      	b.n	800331a <HAL_GPIO_Init+0x1fa>
 8003304:	2306      	movs	r3, #6
 8003306:	e008      	b.n	800331a <HAL_GPIO_Init+0x1fa>
 8003308:	2304      	movs	r3, #4
 800330a:	e006      	b.n	800331a <HAL_GPIO_Init+0x1fa>
 800330c:	2303      	movs	r3, #3
 800330e:	e004      	b.n	800331a <HAL_GPIO_Init+0x1fa>
 8003310:	2302      	movs	r3, #2
 8003312:	e002      	b.n	800331a <HAL_GPIO_Init+0x1fa>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_GPIO_Init+0x1fa>
 8003318:	2300      	movs	r3, #0
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	f002 0203 	and.w	r2, r2, #3
 8003320:	0092      	lsls	r2, r2, #2
 8003322:	4093      	lsls	r3, r2
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800332a:	4937      	ldr	r1, [pc, #220]	@ (8003408 <HAL_GPIO_Init+0x2e8>)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	3302      	adds	r3, #2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003338:	4b39      	ldr	r3, [pc, #228]	@ (8003420 <HAL_GPIO_Init+0x300>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	43db      	mvns	r3, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800335c:	4a30      	ldr	r2, [pc, #192]	@ (8003420 <HAL_GPIO_Init+0x300>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003362:	4b2f      	ldr	r3, [pc, #188]	@ (8003420 <HAL_GPIO_Init+0x300>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003386:	4a26      	ldr	r2, [pc, #152]	@ (8003420 <HAL_GPIO_Init+0x300>)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800338c:	4b24      	ldr	r3, [pc, #144]	@ (8003420 <HAL_GPIO_Init+0x300>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	43db      	mvns	r3, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003420 <HAL_GPIO_Init+0x300>)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003420 <HAL_GPIO_Init+0x300>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033da:	4a11      	ldr	r2, [pc, #68]	@ (8003420 <HAL_GPIO_Init+0x300>)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3301      	adds	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f47f ae9d 	bne.w	8003130 <HAL_GPIO_Init+0x10>
  }
}
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	40021000 	.word	0x40021000
 8003408:	40010000 	.word	0x40010000
 800340c:	48000400 	.word	0x48000400
 8003410:	48000800 	.word	0x48000800
 8003414:	48000c00 	.word	0x48000c00
 8003418:	48001000 	.word	0x48001000
 800341c:	48001400 	.word	0x48001400
 8003420:	40010400 	.word	0x40010400

08003424 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d141      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003432:	4b4b      	ldr	r3, [pc, #300]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800343e:	d131      	bne.n	80034a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003440:	4b47      	ldr	r3, [pc, #284]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003446:	4a46      	ldr	r2, [pc, #280]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800344c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003450:	4b43      	ldr	r3, [pc, #268]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003458:	4a41      	ldr	r2, [pc, #260]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800345e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003460:	4b40      	ldr	r3, [pc, #256]	@ (8003564 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2232      	movs	r2, #50	@ 0x32
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	4a3f      	ldr	r2, [pc, #252]	@ (8003568 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	0c9b      	lsrs	r3, r3, #18
 8003472:	3301      	adds	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003476:	e002      	b.n	800347e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3b01      	subs	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800347e:	4b38      	ldr	r3, [pc, #224]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800348a:	d102      	bne.n	8003492 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f2      	bne.n	8003478 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003492:	4b33      	ldr	r3, [pc, #204]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349e:	d158      	bne.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e057      	b.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034b4:	e04d      	b.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034bc:	d141      	bne.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034be:	4b28      	ldr	r3, [pc, #160]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ca:	d131      	bne.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034cc:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034d2:	4a23      	ldr	r2, [pc, #140]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034dc:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003564 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2232      	movs	r2, #50	@ 0x32
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003568 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	0c9b      	lsrs	r3, r3, #18
 80034fe:	3301      	adds	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003502:	e002      	b.n	800350a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3b01      	subs	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800350a:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003516:	d102      	bne.n	800351e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f2      	bne.n	8003504 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800351e:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352a:	d112      	bne.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e011      	b.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003530:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003536:	4a0a      	ldr	r2, [pc, #40]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003540:	e007      	b.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003542:	4b07      	ldr	r3, [pc, #28]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800354a:	4a05      	ldr	r2, [pc, #20]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003550:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	40007000 	.word	0x40007000
 8003564:	20000000 	.word	0x20000000
 8003568:	431bde83 	.word	0x431bde83

0800356c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003570:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a04      	ldr	r2, [pc, #16]	@ (8003588 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800357a:	6093      	str	r3, [r2, #8]
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40007000 	.word	0x40007000

0800358c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e2fe      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d075      	beq.n	8003696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035aa:	4b97      	ldr	r3, [pc, #604]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b4:	4b94      	ldr	r3, [pc, #592]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b0c      	cmp	r3, #12
 80035c2:	d102      	bne.n	80035ca <HAL_RCC_OscConfig+0x3e>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_OscConfig+0x44>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d10b      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	4b8d      	ldr	r3, [pc, #564]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05b      	beq.n	8003694 <HAL_RCC_OscConfig+0x108>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d157      	bne.n	8003694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e2d9      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_OscConfig+0x74>
 80035f2:	4b85      	ldr	r3, [pc, #532]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a84      	ldr	r2, [pc, #528]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e01d      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x98>
 800360a:	4b7f      	ldr	r3, [pc, #508]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7e      	ldr	r2, [pc, #504]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b7c      	ldr	r3, [pc, #496]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7b      	ldr	r2, [pc, #492]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003624:	4b78      	ldr	r3, [pc, #480]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a77      	ldr	r2, [pc, #476]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b75      	ldr	r3, [pc, #468]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a74      	ldr	r2, [pc, #464]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fd fc54 	bl	8000ef0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364c:	f7fd fc50 	bl	8000ef0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	@ 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e29e      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365e:	4b6a      	ldr	r3, [pc, #424]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0xc0>
 800366a:	e014      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fd fc40 	bl	8000ef0 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003674:	f7fd fc3c 	bl	8000ef0 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	@ 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e28a      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003686:	4b60      	ldr	r3, [pc, #384]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0xe8>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d075      	beq.n	800378e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a2:	4b59      	ldr	r3, [pc, #356]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036ac:	4b56      	ldr	r3, [pc, #344]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0x136>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d002      	beq.n	80036c8 <HAL_RCC_OscConfig+0x13c>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d11f      	bne.n	8003708 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_OscConfig+0x154>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e25d      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4b49      	ldr	r3, [pc, #292]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	4946      	ldr	r1, [pc, #280]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036f4:	4b45      	ldr	r3, [pc, #276]	@ (800380c <HAL_RCC_OscConfig+0x280>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fbad 	bl	8000e58 <HAL_InitTick>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d043      	beq.n	800378c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e249      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d023      	beq.n	8003758 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003710:	4b3d      	ldr	r3, [pc, #244]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3c      	ldr	r2, [pc, #240]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800371a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fd fbe8 	bl	8000ef0 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003724:	f7fd fbe4 	bl	8000ef0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e232      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003736:	4b34      	ldr	r3, [pc, #208]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003742:	4b31      	ldr	r3, [pc, #196]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	492d      	ldr	r1, [pc, #180]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
 8003756:	e01a      	b.n	800378e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003758:	4b2b      	ldr	r3, [pc, #172]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2a      	ldr	r2, [pc, #168]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 800375e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fd fbc4 	bl	8000ef0 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376c:	f7fd fbc0 	bl	8000ef0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e20e      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800377e:	4b22      	ldr	r3, [pc, #136]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x1e0>
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800378c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d041      	beq.n	800381e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01c      	beq.n	80037dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a2:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a8:	4a17      	ldr	r2, [pc, #92]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fd fb9d 	bl	8000ef0 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fd fb99 	bl	8000ef0 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e1e7      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ef      	beq.n	80037ba <HAL_RCC_OscConfig+0x22e>
 80037da:	e020      	b.n	800381e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037e2:	4a09      	ldr	r2, [pc, #36]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd fb80 	bl	8000ef0 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f2:	e00d      	b.n	8003810 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f4:	f7fd fb7c 	bl	8000ef0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d906      	bls.n	8003810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1ca      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003810:	4b8c      	ldr	r3, [pc, #560]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ea      	bne.n	80037f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a6 	beq.w	8003978 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003830:	4b84      	ldr	r3, [pc, #528]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_RCC_OscConfig+0x2b4>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x2b6>
 8003840:	2300      	movs	r3, #0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b7f      	ldr	r3, [pc, #508]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003850:	6593      	str	r3, [r2, #88]	@ 0x58
 8003852:	4b7c      	ldr	r3, [pc, #496]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003862:	4b79      	ldr	r3, [pc, #484]	@ (8003a48 <HAL_RCC_OscConfig+0x4bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800386e:	4b76      	ldr	r3, [pc, #472]	@ (8003a48 <HAL_RCC_OscConfig+0x4bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a75      	ldr	r2, [pc, #468]	@ (8003a48 <HAL_RCC_OscConfig+0x4bc>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7fd fb39 	bl	8000ef0 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fd fb35 	bl	8000ef0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e183      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003894:	4b6c      	ldr	r3, [pc, #432]	@ (8003a48 <HAL_RCC_OscConfig+0x4bc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d108      	bne.n	80038ba <HAL_RCC_OscConfig+0x32e>
 80038a8:	4b66      	ldr	r3, [pc, #408]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ae:	4a65      	ldr	r2, [pc, #404]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038b8:	e024      	b.n	8003904 <HAL_RCC_OscConfig+0x378>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d110      	bne.n	80038e4 <HAL_RCC_OscConfig+0x358>
 80038c2:	4b60      	ldr	r3, [pc, #384]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038e2:	e00f      	b.n	8003904 <HAL_RCC_OscConfig+0x378>
 80038e4:	4b57      	ldr	r3, [pc, #348]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	4a56      	ldr	r2, [pc, #344]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038f4:	4b53      	ldr	r3, [pc, #332]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fa:	4a52      	ldr	r2, [pc, #328]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fd faf0 	bl	8000ef0 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003912:	e00a      	b.n	800392a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fd faec 	bl	8000ef0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e138      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392a:	4b46      	ldr	r3, [pc, #280]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ed      	beq.n	8003914 <HAL_RCC_OscConfig+0x388>
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd fad9 	bl	8000ef0 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fd fad5 	bl	8000ef0 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e121      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003958:	4b3a      	ldr	r3, [pc, #232]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ed      	bne.n	8003942 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003966:	7ffb      	ldrb	r3, [r7, #31]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b35      	ldr	r3, [pc, #212]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	4a34      	ldr	r2, [pc, #208]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003976:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d03c      	beq.n	80039fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01c      	beq.n	80039c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800398c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 800398e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003992:	4a2c      	ldr	r2, [pc, #176]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fd faa8 	bl	8000ef0 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039a4:	f7fd faa4 	bl	8000ef0 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0f2      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039b6:	4b23      	ldr	r3, [pc, #140]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80039b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ef      	beq.n	80039a4 <HAL_RCC_OscConfig+0x418>
 80039c4:	e01b      	b.n	80039fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80039c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fd fa8b 	bl	8000ef0 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039de:	f7fd fa87 	bl	8000ef0 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e0d5      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039f0:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80039f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ef      	bne.n	80039de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80c9 	beq.w	8003b9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a08:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	2b0c      	cmp	r3, #12
 8003a12:	f000 8083 	beq.w	8003b1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d15e      	bne.n	8003adc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1e:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a08      	ldr	r2, [pc, #32]	@ (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fd fa61 	bl	8000ef0 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a30:	e00c      	b.n	8003a4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fd fa5d 	bl	8000ef0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d905      	bls.n	8003a4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0ab      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4c:	4b55      	ldr	r3, [pc, #340]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ec      	bne.n	8003a32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a58:	4b52      	ldr	r3, [pc, #328]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	4b52      	ldr	r3, [pc, #328]	@ (8003ba8 <HAL_RCC_OscConfig+0x61c>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6a11      	ldr	r1, [r2, #32]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	0112      	lsls	r2, r2, #4
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a72:	0212      	lsls	r2, r2, #8
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a7a:	0852      	lsrs	r2, r2, #1
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	0552      	lsls	r2, r2, #21
 8003a80:	4311      	orrs	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a86:	0852      	lsrs	r2, r2, #1
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0652      	lsls	r2, r2, #25
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a92:	06d2      	lsls	r2, r2, #27
 8003a94:	430a      	orrs	r2, r1
 8003a96:	4943      	ldr	r1, [pc, #268]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b41      	ldr	r3, [pc, #260]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a40      	ldr	r2, [pc, #256]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a3d      	ldr	r2, [pc, #244]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ab2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fa1c 	bl	8000ef0 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fd fa18 	bl	8000ef0 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e066      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ace:	4b35      	ldr	r3, [pc, #212]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x530>
 8003ada:	e05e      	b.n	8003b9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003adc:	4b31      	ldr	r3, [pc, #196]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a30      	ldr	r2, [pc, #192]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fa02 	bl	8000ef0 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af0:	f7fd f9fe 	bl	8000ef0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e04c      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b02:	4b28      	ldr	r3, [pc, #160]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b0e:	4b25      	ldr	r3, [pc, #148]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	4924      	ldr	r1, [pc, #144]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003b14:	4b25      	ldr	r3, [pc, #148]	@ (8003bac <HAL_RCC_OscConfig+0x620>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	60cb      	str	r3, [r1, #12]
 8003b1a:	e03e      	b.n	8003b9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e039      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b28:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0203 	and.w	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d12c      	bne.n	8003b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	3b01      	subs	r3, #1
 8003b48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d123      	bne.n	8003b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d11b      	bne.n	8003b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d113      	bne.n	8003b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d109      	bne.n	8003b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	019f800c 	.word	0x019f800c
 8003bac:	feeefffc 	.word	0xfeeefffc

08003bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e11e      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b91      	ldr	r3, [pc, #580]	@ (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d910      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b8e      	ldr	r3, [pc, #568]	@ (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 020f 	bic.w	r2, r3, #15
 8003bde:	498c      	ldr	r1, [pc, #560]	@ (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b8a      	ldr	r3, [pc, #552]	@ (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e106      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d073      	beq.n	8003cec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d129      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0c:	4b81      	ldr	r3, [pc, #516]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0f4      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c1c:	f000 f966 	bl	8003eec <RCC_GetSysClockFreqFromPLLSource>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4a7c      	ldr	r2, [pc, #496]	@ (8003e18 <HAL_RCC_ClockConfig+0x268>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d93f      	bls.n	8003caa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d033      	beq.n	8003caa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d12f      	bne.n	8003caa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c4a:	4b72      	ldr	r3, [pc, #456]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c52:	4a70      	ldr	r2, [pc, #448]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c5a:	2380      	movs	r3, #128	@ 0x80
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e024      	b.n	8003caa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d107      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c68:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0c6      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c78:	4b66      	ldr	r3, [pc, #408]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0be      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c88:	f000 f8ce 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4a61      	ldr	r2, [pc, #388]	@ (8003e18 <HAL_RCC_ClockConfig+0x268>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d909      	bls.n	8003caa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c96:	4b5f      	ldr	r3, [pc, #380]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c9e:	4a5d      	ldr	r2, [pc, #372]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ca4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ca6:	2380      	movs	r3, #128	@ 0x80
 8003ca8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003caa:	4b5a      	ldr	r3, [pc, #360]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4957      	ldr	r1, [pc, #348]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fd f918 	bl	8000ef0 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc4:	f7fd f914 	bl	8000ef0 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e095      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	4b4e      	ldr	r3, [pc, #312]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 020c 	and.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1eb      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d023      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d04:	4b43      	ldr	r3, [pc, #268]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a42      	ldr	r2, [pc, #264]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d24:	4a3b      	ldr	r2, [pc, #236]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2c:	4b39      	ldr	r3, [pc, #228]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4936      	ldr	r1, [pc, #216]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2b80      	cmp	r3, #128	@ 0x80
 8003d44:	d105      	bne.n	8003d52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d46:	4b33      	ldr	r3, [pc, #204]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	4a32      	ldr	r2, [pc, #200]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d52:	4b2f      	ldr	r3, [pc, #188]	@ (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d21d      	bcs.n	8003d9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d60:	4b2b      	ldr	r3, [pc, #172]	@ (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 020f 	bic.w	r2, r3, #15
 8003d68:	4929      	ldr	r1, [pc, #164]	@ (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d70:	f7fd f8be 	bl	8000ef0 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fd f8ba 	bl	8000ef0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e03b      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b20      	ldr	r3, [pc, #128]	@ (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1ed      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4917      	ldr	r1, [pc, #92]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc6:	4b13      	ldr	r3, [pc, #76]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	490f      	ldr	r1, [pc, #60]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dda:	f000 f825 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003dde:	4602      	mov	r2, r0
 8003de0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	490c      	ldr	r1, [pc, #48]	@ (8003e1c <HAL_RCC_ClockConfig+0x26c>)
 8003dec:	5ccb      	ldrb	r3, [r1, r3]
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e20 <HAL_RCC_ClockConfig+0x270>)
 8003df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003e24 <HAL_RCC_ClockConfig+0x274>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd f82a 	bl	8000e58 <HAL_InitTick>
 8003e04:	4603      	mov	r3, r0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40022000 	.word	0x40022000
 8003e14:	40021000 	.word	0x40021000
 8003e18:	04c4b400 	.word	0x04c4b400
 8003e1c:	08007238 	.word	0x08007238
 8003e20:	20000000 	.word	0x20000000
 8003e24:	20000004 	.word	0x20000004

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d102      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	e047      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e40:	4b27      	ldr	r3, [pc, #156]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d102      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	e03e      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e52:	4b23      	ldr	r3, [pc, #140]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d136      	bne.n	8003ecc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	3301      	adds	r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	4a16      	ldr	r2, [pc, #88]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e86:	68d2      	ldr	r2, [r2, #12]
 8003e88:	0a12      	lsrs	r2, r2, #8
 8003e8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	617b      	str	r3, [r7, #20]
      break;
 8003e94:	e00c      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e96:	4a13      	ldr	r2, [pc, #76]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	4a10      	ldr	r2, [pc, #64]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	0a12      	lsrs	r2, r2, #8
 8003ea4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	617b      	str	r3, [r7, #20]
      break;
 8003eae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	0e5b      	lsrs	r3, r3, #25
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	e001      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ed0:	693b      	ldr	r3, [r7, #16]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	371c      	adds	r7, #28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	016e3600 	.word	0x016e3600

08003eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003efc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	3301      	adds	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d10c      	bne.n	8003f2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f10:	4a17      	ldr	r2, [pc, #92]	@ (8003f70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	4a14      	ldr	r2, [pc, #80]	@ (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f1a:	68d2      	ldr	r2, [r2, #12]
 8003f1c:	0a12      	lsrs	r2, r2, #8
 8003f1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	617b      	str	r3, [r7, #20]
    break;
 8003f28:	e00c      	b.n	8003f44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f2a:	4a12      	ldr	r2, [pc, #72]	@ (8003f74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	4a0e      	ldr	r2, [pc, #56]	@ (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f34:	68d2      	ldr	r2, [r2, #12]
 8003f36:	0a12      	lsrs	r2, r2, #8
 8003f38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f3c:	fb02 f303 	mul.w	r3, r2, r3
 8003f40:	617b      	str	r3, [r7, #20]
    break;
 8003f42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f44:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	0e5b      	lsrs	r3, r3, #25
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f5e:	687b      	ldr	r3, [r7, #4]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	016e3600 	.word	0x016e3600
 8003f74:	00f42400 	.word	0x00f42400

08003f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f80:	2300      	movs	r3, #0
 8003f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f84:	2300      	movs	r3, #0
 8003f86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8098 	beq.w	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f96:	2300      	movs	r3, #0
 8003f98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9a:	4b43      	ldr	r3, [pc, #268]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10d      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa6:	4b40      	ldr	r3, [pc, #256]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003faa:	4a3f      	ldr	r2, [pc, #252]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a39      	ldr	r2, [pc, #228]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fce:	f7fc ff8f 	bl	8000ef0 <HAL_GetTick>
 8003fd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd4:	e009      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd6:	f7fc ff8b 	bl	8000ef0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d902      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	74fb      	strb	r3, [r7, #19]
        break;
 8003fe8:	e005      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fea:	4b30      	ldr	r3, [pc, #192]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0ef      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d159      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004006:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01e      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	429a      	cmp	r2, r3
 8004016:	d019      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004018:	4b23      	ldr	r3, [pc, #140]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004022:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004024:	4b20      	ldr	r3, [pc, #128]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402a:	4a1f      	ldr	r2, [pc, #124]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800402c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004034:	4b1c      	ldr	r3, [pc, #112]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403a:	4a1b      	ldr	r2, [pc, #108]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004044:	4a18      	ldr	r2, [pc, #96]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fc ff4b 	bl	8000ef0 <HAL_GetTick>
 800405a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405c:	e00b      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fc ff47 	bl	8000ef0 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d902      	bls.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	74fb      	strb	r3, [r7, #19]
            break;
 8004074:	e006      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004076:	4b0c      	ldr	r3, [pc, #48]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0ec      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800408a:	4b07      	ldr	r3, [pc, #28]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004098:	4903      	ldr	r1, [pc, #12]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040a0:	e008      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	74bb      	strb	r3, [r7, #18]
 80040a6:	e005      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b4:	7c7b      	ldrb	r3, [r7, #17]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4ba7      	ldr	r3, [pc, #668]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	4aa6      	ldr	r2, [pc, #664]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d2:	4ba1      	ldr	r3, [pc, #644]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d8:	f023 0203 	bic.w	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	499d      	ldr	r1, [pc, #628]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040f4:	4b98      	ldr	r3, [pc, #608]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	f023 020c 	bic.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	4995      	ldr	r1, [pc, #596]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004116:	4b90      	ldr	r3, [pc, #576]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	498c      	ldr	r1, [pc, #560]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004138:	4b87      	ldr	r3, [pc, #540]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4984      	ldr	r1, [pc, #528]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800415a:	4b7f      	ldr	r3, [pc, #508]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	497b      	ldr	r1, [pc, #492]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800417c:	4b76      	ldr	r3, [pc, #472]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	4973      	ldr	r1, [pc, #460]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419e:	4b6e      	ldr	r3, [pc, #440]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	496a      	ldr	r1, [pc, #424]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c0:	4b65      	ldr	r3, [pc, #404]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	4962      	ldr	r1, [pc, #392]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	4959      	ldr	r1, [pc, #356]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004204:	4b54      	ldr	r3, [pc, #336]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	4951      	ldr	r1, [pc, #324]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004222:	2b00      	cmp	r3, #0
 8004224:	d015      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004226:	4b4c      	ldr	r3, [pc, #304]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	4948      	ldr	r1, [pc, #288]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004244:	d105      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004246:	4b44      	ldr	r3, [pc, #272]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	4a43      	ldr	r2, [pc, #268]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004250:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425a:	2b00      	cmp	r3, #0
 800425c:	d015      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800425e:	4b3e      	ldr	r3, [pc, #248]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	493a      	ldr	r1, [pc, #232]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800427c:	d105      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427e:	4b36      	ldr	r3, [pc, #216]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4a35      	ldr	r2, [pc, #212]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004284:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004288:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d015      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004296:	4b30      	ldr	r3, [pc, #192]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a4:	492c      	ldr	r1, [pc, #176]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042b4:	d105      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b6:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	4a27      	ldr	r2, [pc, #156]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042c0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d015      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ce:	4b22      	ldr	r3, [pc, #136]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042dc:	491e      	ldr	r1, [pc, #120]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ec:	d105      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	4a19      	ldr	r2, [pc, #100]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042f8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004306:	4b14      	ldr	r3, [pc, #80]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004314:	4910      	ldr	r1, [pc, #64]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004320:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004324:	d105      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004326:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	4a0b      	ldr	r2, [pc, #44]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004330:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d018      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	4902      	ldr	r1, [pc, #8]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	e001      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004358:	40021000 	.word	0x40021000
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004364:	4b21      	ldr	r3, [pc, #132]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a20      	ldr	r2, [pc, #128]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d015      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800437c:	4b1b      	ldr	r3, [pc, #108]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004382:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	4918      	ldr	r1, [pc, #96]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439a:	d105      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800439c:	4b13      	ldr	r3, [pc, #76]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a12      	ldr	r2, [pc, #72]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d015      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043b4:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c2:	490a      	ldr	r1, [pc, #40]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043d2:	d105      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4a04      	ldr	r2, [pc, #16]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000

080043f0 <__NVIC_SetPriority>:
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004400:	2b00      	cmp	r3, #0
 8004402:	db0a      	blt.n	800441a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	490c      	ldr	r1, [pc, #48]	@ (800443c <__NVIC_SetPriority+0x4c>)
 800440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	440b      	add	r3, r1
 8004414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004418:	e00a      	b.n	8004430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4908      	ldr	r1, [pc, #32]	@ (8004440 <__NVIC_SetPriority+0x50>)
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	3b04      	subs	r3, #4
 8004428:	0112      	lsls	r2, r2, #4
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	440b      	add	r3, r1
 800442e:	761a      	strb	r2, [r3, #24]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000e100 	.word	0xe000e100
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004448:	2100      	movs	r1, #0
 800444a:	f06f 0004 	mvn.w	r0, #4
 800444e:	f7ff ffcf 	bl	80043f0 <__NVIC_SetPriority>
#endif
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800445e:	f3ef 8305 	mrs	r3, IPSR
 8004462:	603b      	str	r3, [r7, #0]
  return(result);
 8004464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800446a:	f06f 0305 	mvn.w	r3, #5
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	e00c      	b.n	800448c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004472:	4b0a      	ldr	r3, [pc, #40]	@ (800449c <osKernelInitialize+0x44>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800447a:	4b08      	ldr	r3, [pc, #32]	@ (800449c <osKernelInitialize+0x44>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004480:	2300      	movs	r3, #0
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	e002      	b.n	800448c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800448c:	687b      	ldr	r3, [r7, #4]
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000218 	.word	0x20000218

080044a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a6:	f3ef 8305 	mrs	r3, IPSR
 80044aa:	603b      	str	r3, [r7, #0]
  return(result);
 80044ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80044b2:	f06f 0305 	mvn.w	r3, #5
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e010      	b.n	80044dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <osKernelStart+0x48>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d109      	bne.n	80044d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044c2:	f7ff ffbf 	bl	8004444 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <osKernelStart+0x48>)
 80044c8:	2202      	movs	r2, #2
 80044ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044cc:	f001 f87a 	bl	80055c4 <vTaskStartScheduler>
      stat = osOK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	e002      	b.n	80044dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295
 80044da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044dc:	687b      	ldr	r3, [r7, #4]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000218 	.word	0x20000218

080044ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08e      	sub	sp, #56	@ 0x38
 80044f0:	af04      	add	r7, sp, #16
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044fc:	f3ef 8305 	mrs	r3, IPSR
 8004500:	617b      	str	r3, [r7, #20]
  return(result);
 8004502:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004504:	2b00      	cmp	r3, #0
 8004506:	d17e      	bne.n	8004606 <osThreadNew+0x11a>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d07b      	beq.n	8004606 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800450e:	2380      	movs	r3, #128	@ 0x80
 8004510:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004512:	2318      	movs	r3, #24
 8004514:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295
 800451e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d045      	beq.n	80045b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <osThreadNew+0x48>
        name = attr->name;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <osThreadNew+0x6e>
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b38      	cmp	r3, #56	@ 0x38
 800454c:	d805      	bhi.n	800455a <osThreadNew+0x6e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <osThreadNew+0x72>
        return (NULL);
 800455a:	2300      	movs	r3, #0
 800455c:	e054      	b.n	8004608 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	089b      	lsrs	r3, r3, #2
 800456c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00e      	beq.n	8004594 <osThreadNew+0xa8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b5b      	cmp	r3, #91	@ 0x5b
 800457c:	d90a      	bls.n	8004594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004582:	2b00      	cmp	r3, #0
 8004584:	d006      	beq.n	8004594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <osThreadNew+0xa8>
        mem = 1;
 800458e:	2301      	movs	r3, #1
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e010      	b.n	80045b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10c      	bne.n	80045b6 <osThreadNew+0xca>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d108      	bne.n	80045b6 <osThreadNew+0xca>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <osThreadNew+0xca>
          mem = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	e001      	b.n	80045b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d110      	bne.n	80045de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045c4:	9202      	str	r2, [sp, #8]
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6a3a      	ldr	r2, [r7, #32]
 80045d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 fe1a 	bl	800520c <xTaskCreateStatic>
 80045d8:	4603      	mov	r3, r0
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	e013      	b.n	8004606 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d110      	bne.n	8004606 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	f107 0310 	add.w	r3, r7, #16
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fe68 	bl	80052cc <xTaskCreate>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d001      	beq.n	8004606 <osThreadNew+0x11a>
            hTask = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004606:	693b      	ldr	r3, [r7, #16]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3728      	adds	r7, #40	@ 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004618:	f3ef 8305 	mrs	r3, IPSR
 800461c:	60bb      	str	r3, [r7, #8]
  return(result);
 800461e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <osDelay+0x1c>
    stat = osErrorISR;
 8004624:	f06f 0305 	mvn.w	r3, #5
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	e007      	b.n	800463c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 ff8e 	bl	8005558 <vTaskDelay>
    }
  }

  return (stat);
 800463c:	68fb      	ldr	r3, [r7, #12]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a07      	ldr	r2, [pc, #28]	@ (8004674 <vApplicationGetIdleTaskMemory+0x2c>)
 8004658:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4a06      	ldr	r2, [pc, #24]	@ (8004678 <vApplicationGetIdleTaskMemory+0x30>)
 800465e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2280      	movs	r2, #128	@ 0x80
 8004664:	601a      	str	r2, [r3, #0]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000021c 	.word	0x2000021c
 8004678:	20000278 	.word	0x20000278

0800467c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a07      	ldr	r2, [pc, #28]	@ (80046a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800468c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4a06      	ldr	r2, [pc, #24]	@ (80046ac <vApplicationGetTimerTaskMemory+0x30>)
 8004692:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800469a:	601a      	str	r2, [r3, #0]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	20000478 	.word	0x20000478
 80046ac:	200004d4 	.word	0x200004d4

080046b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f103 0208 	add.w	r2, r3, #8
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f103 0208 	add.w	r2, r3, #8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f103 0208 	add.w	r2, r3, #8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	601a      	str	r2, [r3, #0]
}
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d103      	bne.n	8004772 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	e00c      	b.n	800478c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3308      	adds	r3, #8
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e002      	b.n	8004780 <vListInsert+0x2e>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	d2f6      	bcs.n	800477a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	601a      	str	r2, [r3, #0]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6892      	ldr	r2, [r2, #8]
 80047da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6852      	ldr	r2, [r2, #4]
 80047e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d103      	bne.n	80047f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	1e5a      	subs	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10b      	bne.n	8004844 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800483e:	bf00      	nop
 8004840:	bf00      	nop
 8004842:	e7fd      	b.n	8004840 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004844:	f002 f968 	bl	8006b18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004850:	68f9      	ldr	r1, [r7, #12]
 8004852:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	441a      	add	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004874:	3b01      	subs	r3, #1
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	441a      	add	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	22ff      	movs	r2, #255	@ 0xff
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	22ff      	movs	r2, #255	@ 0xff
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d114      	bne.n	80048c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01a      	beq.n	80048d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3310      	adds	r3, #16
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 f91a 	bl	8005ae0 <xTaskRemoveFromEventList>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d012      	beq.n	80048d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048b2:	4b0d      	ldr	r3, [pc, #52]	@ (80048e8 <xQueueGenericReset+0xd0>)
 80048b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	e009      	b.n	80048d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3310      	adds	r3, #16
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff fef1 	bl	80046b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3324      	adds	r3, #36	@ 0x24
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff feec 	bl	80046b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048d8:	f002 f950 	bl	8006b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048dc:	2301      	movs	r3, #1
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08e      	sub	sp, #56	@ 0x38
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <xQueueGenericCreateStatic+0x56>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <xQueueGenericCreateStatic+0x5a>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <xQueueGenericCreateStatic+0x5c>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	623b      	str	r3, [r7, #32]
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	e7fd      	b.n	8004960 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <xQueueGenericCreateStatic+0x84>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <xQueueGenericCreateStatic+0x88>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <xQueueGenericCreateStatic+0x8a>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	61fb      	str	r3, [r7, #28]
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004992:	2350      	movs	r3, #80	@ 0x50
 8004994:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b50      	cmp	r3, #80	@ 0x50
 800499a:	d00b      	beq.n	80049b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	61bb      	str	r3, [r7, #24]
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80049ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80049cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f805 	bl	80049e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80049de:	4618      	mov	r0, r3
 80049e0:	3730      	adds	r7, #48	@ 0x30
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d103      	bne.n	8004a02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e002      	b.n	8004a08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a14:	2101      	movs	r1, #1
 8004a16:	69b8      	ldr	r0, [r7, #24]
 8004a18:	f7ff fefe 	bl	8004818 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08e      	sub	sp, #56	@ 0x38
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10b      	bne.n	8004a60 <xQueueGenericSend+0x34>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	e7fd      	b.n	8004a5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <xQueueGenericSend+0x42>
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <xQueueGenericSend+0x46>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <xQueueGenericSend+0x48>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <xQueueGenericSend+0x64>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d103      	bne.n	8004a9e <xQueueGenericSend+0x72>
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <xQueueGenericSend+0x76>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueGenericSend+0x78>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <xQueueGenericSend+0x94>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	623b      	str	r3, [r7, #32]
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ac0:	f001 f9de 	bl	8005e80 <xTaskGetSchedulerState>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <xQueueGenericSend+0xa4>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <xQueueGenericSend+0xa8>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <xQueueGenericSend+0xaa>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <xQueueGenericSend+0xc6>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	61fb      	str	r3, [r7, #28]
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	e7fd      	b.n	8004aee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004af2:	f002 f811 	bl	8006b18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d302      	bcc.n	8004b08 <xQueueGenericSend+0xdc>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d129      	bne.n	8004b5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b0e:	f000 fa0f 	bl	8004f30 <prvCopyDataToQueue>
 8004b12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d010      	beq.n	8004b3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1e:	3324      	adds	r3, #36	@ 0x24
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 ffdd 	bl	8005ae0 <xTaskRemoveFromEventList>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c2c <xQueueGenericSend+0x200>)
 8004b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	e00a      	b.n	8004b54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d007      	beq.n	8004b54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b44:	4b39      	ldr	r3, [pc, #228]	@ (8004c2c <xQueueGenericSend+0x200>)
 8004b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b54:	f002 f812 	bl	8006b7c <vPortExitCritical>
				return pdPASS;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e063      	b.n	8004c24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b62:	f002 f80b 	bl	8006b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e05c      	b.n	8004c24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b70:	f107 0314 	add.w	r3, r7, #20
 8004b74:	4618      	mov	r0, r3
 8004b76:	f001 f817 	bl	8005ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b7e:	f001 fffd 	bl	8006b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b82:	f000 fd87 	bl	8005694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b86:	f001 ffc7 	bl	8006b18 <vPortEnterCritical>
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b90:	b25b      	sxtb	r3, r3
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b96:	d103      	bne.n	8004ba0 <xQueueGenericSend+0x174>
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ba6:	b25b      	sxtb	r3, r3
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d103      	bne.n	8004bb6 <xQueueGenericSend+0x18a>
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bb6:	f001 ffe1 	bl	8006b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bba:	1d3a      	adds	r2, r7, #4
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f001 f806 	bl	8005bd4 <xTaskCheckForTimeOut>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d124      	bne.n	8004c18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bd0:	f000 faa6 	bl	8005120 <prvIsQueueFull>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d018      	beq.n	8004c0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	3310      	adds	r3, #16
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 ff2a 	bl	8005a3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004be8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bea:	f000 fa31 	bl	8005050 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bee:	f000 fd5f 	bl	80056b0 <xTaskResumeAll>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f47f af7c 	bne.w	8004af2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8004c2c <xQueueGenericSend+0x200>)
 8004bfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	e772      	b.n	8004af2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c0e:	f000 fa1f 	bl	8005050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c12:	f000 fd4d 	bl	80056b0 <xTaskResumeAll>
 8004c16:	e76c      	b.n	8004af2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c1a:	f000 fa19 	bl	8005050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c1e:	f000 fd47 	bl	80056b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3738      	adds	r7, #56	@ 0x38
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	e000ed04 	.word	0xe000ed04

08004c30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b090      	sub	sp, #64	@ 0x40
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c5a:	bf00      	nop
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <xQueueGenericSendFromISR+0x3e>
 8004c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <xQueueGenericSendFromISR+0x42>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <xQueueGenericSendFromISR+0x44>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c8a:	bf00      	nop
 8004c8c:	bf00      	nop
 8004c8e:	e7fd      	b.n	8004c8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d103      	bne.n	8004c9e <xQueueGenericSendFromISR+0x6e>
 8004c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <xQueueGenericSendFromISR+0x72>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <xQueueGenericSendFromISR+0x74>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10b      	bne.n	8004cc0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	623b      	str	r3, [r7, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	bf00      	nop
 8004cbe:	e7fd      	b.n	8004cbc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cc0:	f002 f80a 	bl	8006cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cc4:	f3ef 8211 	mrs	r2, BASEPRI
 8004cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	61fa      	str	r2, [r7, #28]
 8004cda:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d302      	bcc.n	8004cf2 <xQueueGenericSendFromISR+0xc2>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d12f      	bne.n	8004d52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d08:	f000 f912 	bl	8004f30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d112      	bne.n	8004d3c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d016      	beq.n	8004d4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d20:	3324      	adds	r3, #36	@ 0x24
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fedc 	bl	8005ae0 <xTaskRemoveFromEventList>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00e      	beq.n	8004d4c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00b      	beq.n	8004d4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e007      	b.n	8004d4c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004d40:	3301      	adds	r3, #1
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	b25a      	sxtb	r2, r3
 8004d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004d50:	e001      	b.n	8004d56 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d58:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3740      	adds	r7, #64	@ 0x40
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	@ 0x30
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <xQueueReceive+0x32>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	623b      	str	r3, [r7, #32]
}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop
 8004d9c:	e7fd      	b.n	8004d9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d103      	bne.n	8004dac <xQueueReceive+0x40>
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <xQueueReceive+0x44>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <xQueueReceive+0x46>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <xQueueReceive+0x62>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	61fb      	str	r3, [r7, #28]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dce:	f001 f857 	bl	8005e80 <xTaskGetSchedulerState>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <xQueueReceive+0x72>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <xQueueReceive+0x76>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <xQueueReceive+0x78>
 8004de2:	2300      	movs	r3, #0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <xQueueReceive+0x94>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	61bb      	str	r3, [r7, #24]
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e00:	f001 fe8a 	bl	8006b18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01f      	beq.n	8004e50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e14:	f000 f8f6 	bl	8005004 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1a:	1e5a      	subs	r2, r3, #1
 8004e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00f      	beq.n	8004e48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	3310      	adds	r3, #16
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fe57 	bl	8005ae0 <xTaskRemoveFromEventList>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e38:	4b3c      	ldr	r3, [pc, #240]	@ (8004f2c <xQueueReceive+0x1c0>)
 8004e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e48:	f001 fe98 	bl	8006b7c <vPortExitCritical>
				return pdPASS;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e069      	b.n	8004f24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d103      	bne.n	8004e5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e56:	f001 fe91 	bl	8006b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e062      	b.n	8004f24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d106      	bne.n	8004e72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e64:	f107 0310 	add.w	r3, r7, #16
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fe9d 	bl	8005ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e72:	f001 fe83 	bl	8006b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e76:	f000 fc0d 	bl	8005694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e7a:	f001 fe4d 	bl	8006b18 <vPortEnterCritical>
 8004e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e84:	b25b      	sxtb	r3, r3
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d103      	bne.n	8004e94 <xQueueReceive+0x128>
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d103      	bne.n	8004eaa <xQueueReceive+0x13e>
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eaa:	f001 fe67 	bl	8006b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eae:	1d3a      	adds	r2, r7, #4
 8004eb0:	f107 0310 	add.w	r3, r7, #16
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fe8c 	bl	8005bd4 <xTaskCheckForTimeOut>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d123      	bne.n	8004f0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ec4:	f000 f916 	bl	80050f4 <prvIsQueueEmpty>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d017      	beq.n	8004efe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed0:	3324      	adds	r3, #36	@ 0x24
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fdb0 	bl	8005a3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004edc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ede:	f000 f8b7 	bl	8005050 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ee2:	f000 fbe5 	bl	80056b0 <xTaskResumeAll>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d189      	bne.n	8004e00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004eec:	4b0f      	ldr	r3, [pc, #60]	@ (8004f2c <xQueueReceive+0x1c0>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	e780      	b.n	8004e00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f00:	f000 f8a6 	bl	8005050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f04:	f000 fbd4 	bl	80056b0 <xTaskResumeAll>
 8004f08:	e77a      	b.n	8004e00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f0c:	f000 f8a0 	bl	8005050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f10:	f000 fbce 	bl	80056b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f16:	f000 f8ed 	bl	80050f4 <prvIsQueueEmpty>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f43f af6f 	beq.w	8004e00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3730      	adds	r7, #48	@ 0x30
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10d      	bne.n	8004f6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d14d      	bne.n	8004ff2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 ffae 	bl	8005ebc <xTaskPriorityDisinherit>
 8004f60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	e043      	b.n	8004ff2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d119      	bne.n	8004fa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6858      	ldr	r0, [r3, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	f002 f908 	bl	8007190 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f88:	441a      	add	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d32b      	bcc.n	8004ff2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	e026      	b.n	8004ff2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68d8      	ldr	r0, [r3, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	461a      	mov	r2, r3
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	f002 f8ee 	bl	8007190 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbc:	425b      	negs	r3, r3
 8004fbe:	441a      	add	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d207      	bcs.n	8004fe0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	425b      	negs	r3, r3
 8004fda:	441a      	add	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d105      	bne.n	8004ff2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ffa:	697b      	ldr	r3, [r7, #20]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d018      	beq.n	8005048 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	441a      	add	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	d303      	bcc.n	8005038 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68d9      	ldr	r1, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	461a      	mov	r2, r3
 8005042:	6838      	ldr	r0, [r7, #0]
 8005044:	f002 f8a4 	bl	8007190 <memcpy>
	}
}
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005058:	f001 fd5e 	bl	8006b18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005062:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005064:	e011      	b.n	800508a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d012      	beq.n	8005094 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3324      	adds	r3, #36	@ 0x24
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fd34 	bl	8005ae0 <xTaskRemoveFromEventList>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800507e:	f000 fe0d 	bl	8005c9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	3b01      	subs	r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800508a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800508e:	2b00      	cmp	r3, #0
 8005090:	dce9      	bgt.n	8005066 <prvUnlockQueue+0x16>
 8005092:	e000      	b.n	8005096 <prvUnlockQueue+0x46>
					break;
 8005094:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	22ff      	movs	r2, #255	@ 0xff
 800509a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800509e:	f001 fd6d 	bl	8006b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050a2:	f001 fd39 	bl	8006b18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050ae:	e011      	b.n	80050d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d012      	beq.n	80050de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3310      	adds	r3, #16
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fd0f 	bl	8005ae0 <xTaskRemoveFromEventList>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050c8:	f000 fde8 	bl	8005c9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050cc:	7bbb      	ldrb	r3, [r7, #14]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	dce9      	bgt.n	80050b0 <prvUnlockQueue+0x60>
 80050dc:	e000      	b.n	80050e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	22ff      	movs	r2, #255	@ 0xff
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80050e8:	f001 fd48 	bl	8006b7c <vPortExitCritical>
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050fc:	f001 fd0c 	bl	8006b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005108:	2301      	movs	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e001      	b.n	8005112 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005112:	f001 fd33 	bl	8006b7c <vPortExitCritical>

	return xReturn;
 8005116:	68fb      	ldr	r3, [r7, #12]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005128:	f001 fcf6 	bl	8006b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005134:	429a      	cmp	r2, r3
 8005136:	d102      	bne.n	800513e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005138:	2301      	movs	r3, #1
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e001      	b.n	8005142 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005142:	f001 fd1b 	bl	8006b7c <vPortExitCritical>

	return xReturn;
 8005146:	68fb      	ldr	r3, [r7, #12]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	e014      	b.n	800518a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005160:	4a0f      	ldr	r2, [pc, #60]	@ (80051a0 <vQueueAddToRegistry+0x50>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800516c:	490c      	ldr	r1, [pc, #48]	@ (80051a0 <vQueueAddToRegistry+0x50>)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005176:	4a0a      	ldr	r2, [pc, #40]	@ (80051a0 <vQueueAddToRegistry+0x50>)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4413      	add	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005182:	e006      	b.n	8005192 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b07      	cmp	r3, #7
 800518e:	d9e7      	bls.n	8005160 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	200008d4 	.word	0x200008d4

080051a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051b4:	f001 fcb0 	bl	8006b18 <vPortEnterCritical>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051be:	b25b      	sxtb	r3, r3
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d103      	bne.n	80051ce <vQueueWaitForMessageRestricted+0x2a>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051d4:	b25b      	sxtb	r3, r3
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d103      	bne.n	80051e4 <vQueueWaitForMessageRestricted+0x40>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051e4:	f001 fcca 	bl	8006b7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3324      	adds	r3, #36	@ 0x24
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fc45 	bl	8005a88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051fe:	6978      	ldr	r0, [r7, #20]
 8005200:	f7ff ff26 	bl	8005050 <prvUnlockQueue>
	}
 8005204:	bf00      	nop
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08e      	sub	sp, #56	@ 0x38
 8005210:	af04      	add	r7, sp, #16
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800521a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <xTaskCreateStatic+0x4a>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	61fb      	str	r3, [r7, #28]
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	e7fd      	b.n	8005252 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005256:	235c      	movs	r3, #92	@ 0x5c
 8005258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b5c      	cmp	r3, #92	@ 0x5c
 800525e:	d00b      	beq.n	8005278 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	61bb      	str	r3, [r7, #24]
}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	e7fd      	b.n	8005274 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005278:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01e      	beq.n	80052be <xTaskCreateStatic+0xb2>
 8005280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01b      	beq.n	80052be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005298:	2300      	movs	r3, #0
 800529a:	9303      	str	r3, [sp, #12]
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	9302      	str	r3, [sp, #8]
 80052a0:	f107 0314 	add.w	r3, r7, #20
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f850 	bl	8005356 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052b8:	f000 f8de 	bl	8005478 <prvAddNewTaskToReadyList>
 80052bc:	e001      	b.n	80052c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052c2:	697b      	ldr	r3, [r7, #20]
	}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3728      	adds	r7, #40	@ 0x28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	@ 0x30
 80052d0:	af04      	add	r7, sp, #16
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052dc:	88fb      	ldrh	r3, [r7, #6]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 fd3b 	bl	8006d5c <pvPortMalloc>
 80052e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00e      	beq.n	800530c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052ee:	205c      	movs	r0, #92	@ 0x5c
 80052f0:	f001 fd34 	bl	8006d5c <pvPortMalloc>
 80052f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
 8005302:	e005      	b.n	8005310 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005304:	6978      	ldr	r0, [r7, #20]
 8005306:	f001 fdf7 	bl	8006ef8 <vPortFree>
 800530a:	e001      	b.n	8005310 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d017      	beq.n	8005346 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800531e:	88fa      	ldrh	r2, [r7, #6]
 8005320:	2300      	movs	r3, #0
 8005322:	9303      	str	r3, [sp, #12]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	9302      	str	r3, [sp, #8]
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f80e 	bl	8005356 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800533a:	69f8      	ldr	r0, [r7, #28]
 800533c:	f000 f89c 	bl	8005478 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005340:	2301      	movs	r3, #1
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	e002      	b.n	800534c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005346:	f04f 33ff 	mov.w	r3, #4294967295
 800534a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800534c:	69bb      	ldr	r3, [r7, #24]
	}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b088      	sub	sp, #32
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005366:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	461a      	mov	r2, r3
 800536e:	21a5      	movs	r1, #165	@ 0xa5
 8005370:	f001 fee2 	bl	8007138 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800537e:	3b01      	subs	r3, #1
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f023 0307 	bic.w	r3, r3, #7
 800538c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	617b      	str	r3, [r7, #20]
}
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	e7fd      	b.n	80053ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01f      	beq.n	80053f6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e012      	b.n	80053e2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	7819      	ldrb	r1, [r3, #0]
 80053c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	3334      	adds	r3, #52	@ 0x34
 80053cc:	460a      	mov	r2, r1
 80053ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d006      	beq.n	80053ea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	3301      	adds	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	2b0f      	cmp	r3, #15
 80053e6:	d9e9      	bls.n	80053bc <prvInitialiseNewTask+0x66>
 80053e8:	e000      	b.n	80053ec <prvInitialiseNewTask+0x96>
			{
				break;
 80053ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053f4:	e003      	b.n	80053fe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005400:	2b37      	cmp	r3, #55	@ 0x37
 8005402:	d901      	bls.n	8005408 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005404:	2337      	movs	r3, #55	@ 0x37
 8005406:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800540c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005412:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005416:	2200      	movs	r2, #0
 8005418:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	3304      	adds	r3, #4
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff f966 	bl	80046f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	3318      	adds	r3, #24
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff f961 	bl	80046f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005432:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005442:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005446:	2200      	movs	r2, #0
 8005448:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	69b8      	ldr	r0, [r7, #24]
 8005458:	f001 fa2a 	bl	80068b0 <pxPortInitialiseStack>
 800545c:	4602      	mov	r2, r0
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800546c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800546e:	bf00      	nop
 8005470:	3720      	adds	r7, #32
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005480:	f001 fb4a 	bl	8006b18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005484:	4b2d      	ldr	r3, [pc, #180]	@ (800553c <prvAddNewTaskToReadyList+0xc4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	4a2c      	ldr	r2, [pc, #176]	@ (800553c <prvAddNewTaskToReadyList+0xc4>)
 800548c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800548e:	4b2c      	ldr	r3, [pc, #176]	@ (8005540 <prvAddNewTaskToReadyList+0xc8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005496:	4a2a      	ldr	r2, [pc, #168]	@ (8005540 <prvAddNewTaskToReadyList+0xc8>)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800549c:	4b27      	ldr	r3, [pc, #156]	@ (800553c <prvAddNewTaskToReadyList+0xc4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d110      	bne.n	80054c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054a4:	f000 fc1e 	bl	8005ce4 <prvInitialiseTaskLists>
 80054a8:	e00d      	b.n	80054c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054aa:	4b26      	ldr	r3, [pc, #152]	@ (8005544 <prvAddNewTaskToReadyList+0xcc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054b2:	4b23      	ldr	r3, [pc, #140]	@ (8005540 <prvAddNewTaskToReadyList+0xc8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054bc:	429a      	cmp	r2, r3
 80054be:	d802      	bhi.n	80054c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005540 <prvAddNewTaskToReadyList+0xc8>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054c6:	4b20      	ldr	r3, [pc, #128]	@ (8005548 <prvAddNewTaskToReadyList+0xd0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005548 <prvAddNewTaskToReadyList+0xd0>)
 80054ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005548 <prvAddNewTaskToReadyList+0xd0>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054dc:	4b1b      	ldr	r3, [pc, #108]	@ (800554c <prvAddNewTaskToReadyList+0xd4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d903      	bls.n	80054ec <prvAddNewTaskToReadyList+0x74>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	4a18      	ldr	r2, [pc, #96]	@ (800554c <prvAddNewTaskToReadyList+0xd4>)
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4a15      	ldr	r2, [pc, #84]	@ (8005550 <prvAddNewTaskToReadyList+0xd8>)
 80054fa:	441a      	add	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3304      	adds	r3, #4
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f7ff f901 	bl	800470a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005508:	f001 fb38 	bl	8006b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800550c:	4b0d      	ldr	r3, [pc, #52]	@ (8005544 <prvAddNewTaskToReadyList+0xcc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00e      	beq.n	8005532 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <prvAddNewTaskToReadyList+0xc8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	429a      	cmp	r2, r3
 8005520:	d207      	bcs.n	8005532 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005522:	4b0c      	ldr	r3, [pc, #48]	@ (8005554 <prvAddNewTaskToReadyList+0xdc>)
 8005524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000de8 	.word	0x20000de8
 8005540:	20000914 	.word	0x20000914
 8005544:	20000df4 	.word	0x20000df4
 8005548:	20000e04 	.word	0x20000e04
 800554c:	20000df0 	.word	0x20000df0
 8005550:	20000918 	.word	0x20000918
 8005554:	e000ed04 	.word	0xe000ed04

08005558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d018      	beq.n	800559c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800556a:	4b14      	ldr	r3, [pc, #80]	@ (80055bc <vTaskDelay+0x64>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <vTaskDelay+0x32>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60bb      	str	r3, [r7, #8]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800558a:	f000 f883 	bl	8005694 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800558e:	2100      	movs	r1, #0
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fddf 	bl	8006154 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005596:	f000 f88b 	bl	80056b0 <xTaskResumeAll>
 800559a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d107      	bne.n	80055b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80055a2:	4b07      	ldr	r3, [pc, #28]	@ (80055c0 <vTaskDelay+0x68>)
 80055a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055b2:	bf00      	nop
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000e10 	.word	0x20000e10
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	@ 0x28
 80055c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055d2:	463a      	mov	r2, r7
 80055d4:	1d39      	adds	r1, r7, #4
 80055d6:	f107 0308 	add.w	r3, r7, #8
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff f834 	bl	8004648 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	9202      	str	r2, [sp, #8]
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	2300      	movs	r3, #0
 80055f0:	460a      	mov	r2, r1
 80055f2:	4922      	ldr	r1, [pc, #136]	@ (800567c <vTaskStartScheduler+0xb8>)
 80055f4:	4822      	ldr	r0, [pc, #136]	@ (8005680 <vTaskStartScheduler+0xbc>)
 80055f6:	f7ff fe09 	bl	800520c <xTaskCreateStatic>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4a21      	ldr	r2, [pc, #132]	@ (8005684 <vTaskStartScheduler+0xc0>)
 80055fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005600:	4b20      	ldr	r3, [pc, #128]	@ (8005684 <vTaskStartScheduler+0xc0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e001      	b.n	8005612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d102      	bne.n	800561e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005618:	f000 fdf0 	bl	80061fc <xTimerCreateTimerTask>
 800561c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d116      	bne.n	8005652 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	613b      	str	r3, [r7, #16]
}
 8005636:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005638:	4b13      	ldr	r3, [pc, #76]	@ (8005688 <vTaskStartScheduler+0xc4>)
 800563a:	f04f 32ff 	mov.w	r2, #4294967295
 800563e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005640:	4b12      	ldr	r3, [pc, #72]	@ (800568c <vTaskStartScheduler+0xc8>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005646:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <vTaskStartScheduler+0xcc>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800564c:	f001 f9c0 	bl	80069d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005650:	e00f      	b.n	8005672 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d10b      	bne.n	8005672 <vTaskStartScheduler+0xae>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60fb      	str	r3, [r7, #12]
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	e7fd      	b.n	800566e <vTaskStartScheduler+0xaa>
}
 8005672:	bf00      	nop
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	080071d8 	.word	0x080071d8
 8005680:	08005cb5 	.word	0x08005cb5
 8005684:	20000e0c 	.word	0x20000e0c
 8005688:	20000e08 	.word	0x20000e08
 800568c:	20000df4 	.word	0x20000df4
 8005690:	20000dec 	.word	0x20000dec

08005694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005698:	4b04      	ldr	r3, [pc, #16]	@ (80056ac <vTaskSuspendAll+0x18>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	4a03      	ldr	r2, [pc, #12]	@ (80056ac <vTaskSuspendAll+0x18>)
 80056a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056a2:	bf00      	nop
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20000e10 	.word	0x20000e10

080056b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056be:	4b42      	ldr	r3, [pc, #264]	@ (80057c8 <xTaskResumeAll+0x118>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <xTaskResumeAll+0x2e>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	603b      	str	r3, [r7, #0]
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	e7fd      	b.n	80056da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056de:	f001 fa1b 	bl	8006b18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056e2:	4b39      	ldr	r3, [pc, #228]	@ (80057c8 <xTaskResumeAll+0x118>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	4a37      	ldr	r2, [pc, #220]	@ (80057c8 <xTaskResumeAll+0x118>)
 80056ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ec:	4b36      	ldr	r3, [pc, #216]	@ (80057c8 <xTaskResumeAll+0x118>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d162      	bne.n	80057ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056f4:	4b35      	ldr	r3, [pc, #212]	@ (80057cc <xTaskResumeAll+0x11c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d05e      	beq.n	80057ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056fc:	e02f      	b.n	800575e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fe:	4b34      	ldr	r3, [pc, #208]	@ (80057d0 <xTaskResumeAll+0x120>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3318      	adds	r3, #24
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff f85a 	bl	80047c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3304      	adds	r3, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff f855 	bl	80047c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571e:	4b2d      	ldr	r3, [pc, #180]	@ (80057d4 <xTaskResumeAll+0x124>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d903      	bls.n	800572e <xTaskResumeAll+0x7e>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	4a2a      	ldr	r2, [pc, #168]	@ (80057d4 <xTaskResumeAll+0x124>)
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4a27      	ldr	r2, [pc, #156]	@ (80057d8 <xTaskResumeAll+0x128>)
 800573c:	441a      	add	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3304      	adds	r3, #4
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f7fe ffe0 	bl	800470a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574e:	4b23      	ldr	r3, [pc, #140]	@ (80057dc <xTaskResumeAll+0x12c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	429a      	cmp	r2, r3
 8005756:	d302      	bcc.n	800575e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005758:	4b21      	ldr	r3, [pc, #132]	@ (80057e0 <xTaskResumeAll+0x130>)
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800575e:	4b1c      	ldr	r3, [pc, #112]	@ (80057d0 <xTaskResumeAll+0x120>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1cb      	bne.n	80056fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800576c:	f000 fb58 	bl	8005e20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005770:	4b1c      	ldr	r3, [pc, #112]	@ (80057e4 <xTaskResumeAll+0x134>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800577c:	f000 f846 	bl	800580c <xTaskIncrementTick>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005786:	4b16      	ldr	r3, [pc, #88]	@ (80057e0 <xTaskResumeAll+0x130>)
 8005788:	2201      	movs	r2, #1
 800578a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3b01      	subs	r3, #1
 8005790:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f1      	bne.n	800577c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005798:	4b12      	ldr	r3, [pc, #72]	@ (80057e4 <xTaskResumeAll+0x134>)
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800579e:	4b10      	ldr	r3, [pc, #64]	@ (80057e0 <xTaskResumeAll+0x130>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d009      	beq.n	80057ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057aa:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <xTaskResumeAll+0x138>)
 80057ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057ba:	f001 f9df 	bl	8006b7c <vPortExitCritical>

	return xAlreadyYielded;
 80057be:	68bb      	ldr	r3, [r7, #8]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20000e10 	.word	0x20000e10
 80057cc:	20000de8 	.word	0x20000de8
 80057d0:	20000da8 	.word	0x20000da8
 80057d4:	20000df0 	.word	0x20000df0
 80057d8:	20000918 	.word	0x20000918
 80057dc:	20000914 	.word	0x20000914
 80057e0:	20000dfc 	.word	0x20000dfc
 80057e4:	20000df8 	.word	0x20000df8
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057f2:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <xTaskGetTickCount+0x1c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057f8:	687b      	ldr	r3, [r7, #4]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20000dec 	.word	0x20000dec

0800580c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005816:	4b4f      	ldr	r3, [pc, #316]	@ (8005954 <xTaskIncrementTick+0x148>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f040 8090 	bne.w	8005940 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005820:	4b4d      	ldr	r3, [pc, #308]	@ (8005958 <xTaskIncrementTick+0x14c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005828:	4a4b      	ldr	r2, [pc, #300]	@ (8005958 <xTaskIncrementTick+0x14c>)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d121      	bne.n	8005878 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005834:	4b49      	ldr	r3, [pc, #292]	@ (800595c <xTaskIncrementTick+0x150>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <xTaskIncrementTick+0x4a>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	603b      	str	r3, [r7, #0]
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <xTaskIncrementTick+0x46>
 8005856:	4b41      	ldr	r3, [pc, #260]	@ (800595c <xTaskIncrementTick+0x150>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	4b40      	ldr	r3, [pc, #256]	@ (8005960 <xTaskIncrementTick+0x154>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a3e      	ldr	r2, [pc, #248]	@ (800595c <xTaskIncrementTick+0x150>)
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	4a3e      	ldr	r2, [pc, #248]	@ (8005960 <xTaskIncrementTick+0x154>)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	4b3e      	ldr	r3, [pc, #248]	@ (8005964 <xTaskIncrementTick+0x158>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3301      	adds	r3, #1
 8005870:	4a3c      	ldr	r2, [pc, #240]	@ (8005964 <xTaskIncrementTick+0x158>)
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	f000 fad4 	bl	8005e20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005878:	4b3b      	ldr	r3, [pc, #236]	@ (8005968 <xTaskIncrementTick+0x15c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	429a      	cmp	r2, r3
 8005880:	d349      	bcc.n	8005916 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005882:	4b36      	ldr	r3, [pc, #216]	@ (800595c <xTaskIncrementTick+0x150>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800588c:	4b36      	ldr	r3, [pc, #216]	@ (8005968 <xTaskIncrementTick+0x15c>)
 800588e:	f04f 32ff 	mov.w	r2, #4294967295
 8005892:	601a      	str	r2, [r3, #0]
					break;
 8005894:	e03f      	b.n	8005916 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005896:	4b31      	ldr	r3, [pc, #196]	@ (800595c <xTaskIncrementTick+0x150>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d203      	bcs.n	80058b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005968 <xTaskIncrementTick+0x15c>)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058b4:	e02f      	b.n	8005916 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe ff82 	bl	80047c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	3318      	adds	r3, #24
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe ff79 	bl	80047c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d6:	4b25      	ldr	r3, [pc, #148]	@ (800596c <xTaskIncrementTick+0x160>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d903      	bls.n	80058e6 <xTaskIncrementTick+0xda>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e2:	4a22      	ldr	r2, [pc, #136]	@ (800596c <xTaskIncrementTick+0x160>)
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005970 <xTaskIncrementTick+0x164>)
 80058f4:	441a      	add	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	3304      	adds	r3, #4
 80058fa:	4619      	mov	r1, r3
 80058fc:	4610      	mov	r0, r2
 80058fe:	f7fe ff04 	bl	800470a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005906:	4b1b      	ldr	r3, [pc, #108]	@ (8005974 <xTaskIncrementTick+0x168>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	429a      	cmp	r2, r3
 800590e:	d3b8      	bcc.n	8005882 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005910:	2301      	movs	r3, #1
 8005912:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005914:	e7b5      	b.n	8005882 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005916:	4b17      	ldr	r3, [pc, #92]	@ (8005974 <xTaskIncrementTick+0x168>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591c:	4914      	ldr	r1, [pc, #80]	@ (8005970 <xTaskIncrementTick+0x164>)
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d901      	bls.n	8005932 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800592e:	2301      	movs	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005932:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <xTaskIncrementTick+0x16c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800593a:	2301      	movs	r3, #1
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e004      	b.n	800594a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005940:	4b0e      	ldr	r3, [pc, #56]	@ (800597c <xTaskIncrementTick+0x170>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3301      	adds	r3, #1
 8005946:	4a0d      	ldr	r2, [pc, #52]	@ (800597c <xTaskIncrementTick+0x170>)
 8005948:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800594a:	697b      	ldr	r3, [r7, #20]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000e10 	.word	0x20000e10
 8005958:	20000dec 	.word	0x20000dec
 800595c:	20000da0 	.word	0x20000da0
 8005960:	20000da4 	.word	0x20000da4
 8005964:	20000e00 	.word	0x20000e00
 8005968:	20000e08 	.word	0x20000e08
 800596c:	20000df0 	.word	0x20000df0
 8005970:	20000918 	.word	0x20000918
 8005974:	20000914 	.word	0x20000914
 8005978:	20000dfc 	.word	0x20000dfc
 800597c:	20000df8 	.word	0x20000df8

08005980 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005986:	4b28      	ldr	r3, [pc, #160]	@ (8005a28 <vTaskSwitchContext+0xa8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800598e:	4b27      	ldr	r3, [pc, #156]	@ (8005a2c <vTaskSwitchContext+0xac>)
 8005990:	2201      	movs	r2, #1
 8005992:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005994:	e042      	b.n	8005a1c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005996:	4b25      	ldr	r3, [pc, #148]	@ (8005a2c <vTaskSwitchContext+0xac>)
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599c:	4b24      	ldr	r3, [pc, #144]	@ (8005a30 <vTaskSwitchContext+0xb0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e011      	b.n	80059c8 <vTaskSwitchContext+0x48>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	607b      	str	r3, [r7, #4]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <vTaskSwitchContext+0x3e>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	491a      	ldr	r1, [pc, #104]	@ (8005a34 <vTaskSwitchContext+0xb4>)
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0e3      	beq.n	80059a4 <vTaskSwitchContext+0x24>
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4a13      	ldr	r2, [pc, #76]	@ (8005a34 <vTaskSwitchContext+0xb4>)
 80059e8:	4413      	add	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	3308      	adds	r3, #8
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d104      	bne.n	8005a0c <vTaskSwitchContext+0x8c>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	605a      	str	r2, [r3, #4]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	4a09      	ldr	r2, [pc, #36]	@ (8005a38 <vTaskSwitchContext+0xb8>)
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	4a06      	ldr	r2, [pc, #24]	@ (8005a30 <vTaskSwitchContext+0xb0>)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6013      	str	r3, [r2, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	20000e10 	.word	0x20000e10
 8005a2c:	20000dfc 	.word	0x20000dfc
 8005a30:	20000df0 	.word	0x20000df0
 8005a34:	20000918 	.word	0x20000918
 8005a38:	20000914 	.word	0x20000914

08005a3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10b      	bne.n	8005a64 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60fb      	str	r3, [r7, #12]
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	e7fd      	b.n	8005a60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a64:	4b07      	ldr	r3, [pc, #28]	@ (8005a84 <vTaskPlaceOnEventList+0x48>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3318      	adds	r3, #24
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fe fe70 	bl	8004752 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a72:	2101      	movs	r1, #1
 8005a74:	6838      	ldr	r0, [r7, #0]
 8005a76:	f000 fb6d 	bl	8006154 <prvAddCurrentTaskToDelayedList>
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000914 	.word	0x20000914

08005a88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	617b      	str	r3, [r7, #20]
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	e7fd      	b.n	8005aae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8005adc <vTaskPlaceOnEventListRestricted+0x54>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3318      	adds	r3, #24
 8005ab8:	4619      	mov	r1, r3
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7fe fe25 	bl	800470a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	68b8      	ldr	r0, [r7, #8]
 8005ad0:	f000 fb40 	bl	8006154 <prvAddCurrentTaskToDelayedList>
	}
 8005ad4:	bf00      	nop
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20000914 	.word	0x20000914

08005ae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	60fb      	str	r3, [r7, #12]
}
 8005b08:	bf00      	nop
 8005b0a:	bf00      	nop
 8005b0c:	e7fd      	b.n	8005b0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	3318      	adds	r3, #24
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fe56 	bl	80047c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b18:	4b1d      	ldr	r3, [pc, #116]	@ (8005b90 <xTaskRemoveFromEventList+0xb0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d11d      	bne.n	8005b5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fe fe4d 	bl	80047c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2e:	4b19      	ldr	r3, [pc, #100]	@ (8005b94 <xTaskRemoveFromEventList+0xb4>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d903      	bls.n	8005b3e <xTaskRemoveFromEventList+0x5e>
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3a:	4a16      	ldr	r2, [pc, #88]	@ (8005b94 <xTaskRemoveFromEventList+0xb4>)
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4a13      	ldr	r2, [pc, #76]	@ (8005b98 <xTaskRemoveFromEventList+0xb8>)
 8005b4c:	441a      	add	r2, r3
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	3304      	adds	r3, #4
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f7fe fdd8 	bl	800470a <vListInsertEnd>
 8005b5a:	e005      	b.n	8005b68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	3318      	adds	r3, #24
 8005b60:	4619      	mov	r1, r3
 8005b62:	480e      	ldr	r0, [pc, #56]	@ (8005b9c <xTaskRemoveFromEventList+0xbc>)
 8005b64:	f7fe fdd1 	bl	800470a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <xTaskRemoveFromEventList+0xc0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d905      	bls.n	8005b82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b76:	2301      	movs	r3, #1
 8005b78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <xTaskRemoveFromEventList+0xc4>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e001      	b.n	8005b86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b86:	697b      	ldr	r3, [r7, #20]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000e10 	.word	0x20000e10
 8005b94:	20000df0 	.word	0x20000df0
 8005b98:	20000918 	.word	0x20000918
 8005b9c:	20000da8 	.word	0x20000da8
 8005ba0:	20000914 	.word	0x20000914
 8005ba4:	20000dfc 	.word	0x20000dfc

08005ba8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bb0:	4b06      	ldr	r3, [pc, #24]	@ (8005bcc <vTaskInternalSetTimeOutState+0x24>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bb8:	4b05      	ldr	r3, [pc, #20]	@ (8005bd0 <vTaskInternalSetTimeOutState+0x28>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	605a      	str	r2, [r3, #4]
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000e00 	.word	0x20000e00
 8005bd0:	20000dec 	.word	0x20000dec

08005bd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	613b      	str	r3, [r7, #16]
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	60fb      	str	r3, [r7, #12]
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	e7fd      	b.n	8005c16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005c1a:	f000 ff7d 	bl	8006b18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c94 <xTaskCheckForTimeOut+0xc0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d102      	bne.n	8005c3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e023      	b.n	8005c86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b15      	ldr	r3, [pc, #84]	@ (8005c98 <xTaskCheckForTimeOut+0xc4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d007      	beq.n	8005c5a <xTaskCheckForTimeOut+0x86>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d302      	bcc.n	8005c5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c54:	2301      	movs	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	e015      	b.n	8005c86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d20b      	bcs.n	8005c7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	1ad2      	subs	r2, r2, r3
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ff99 	bl	8005ba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
 8005c7a:	e004      	b.n	8005c86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c82:	2301      	movs	r3, #1
 8005c84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c86:	f000 ff79 	bl	8006b7c <vPortExitCritical>

	return xReturn;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3720      	adds	r7, #32
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20000dec 	.word	0x20000dec
 8005c98:	20000e00 	.word	0x20000e00

08005c9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ca0:	4b03      	ldr	r3, [pc, #12]	@ (8005cb0 <vTaskMissedYield+0x14>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
}
 8005ca6:	bf00      	nop
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000dfc 	.word	0x20000dfc

08005cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cbc:	f000 f852 	bl	8005d64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cc0:	4b06      	ldr	r3, [pc, #24]	@ (8005cdc <prvIdleTask+0x28>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d9f9      	bls.n	8005cbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cc8:	4b05      	ldr	r3, [pc, #20]	@ (8005ce0 <prvIdleTask+0x2c>)
 8005cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cd8:	e7f0      	b.n	8005cbc <prvIdleTask+0x8>
 8005cda:	bf00      	nop
 8005cdc:	20000918 	.word	0x20000918
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cea:	2300      	movs	r3, #0
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	e00c      	b.n	8005d0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4a12      	ldr	r2, [pc, #72]	@ (8005d44 <prvInitialiseTaskLists+0x60>)
 8005cfc:	4413      	add	r3, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe fcd6 	bl	80046b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3301      	adds	r3, #1
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b37      	cmp	r3, #55	@ 0x37
 8005d0e:	d9ef      	bls.n	8005cf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d10:	480d      	ldr	r0, [pc, #52]	@ (8005d48 <prvInitialiseTaskLists+0x64>)
 8005d12:	f7fe fccd 	bl	80046b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d16:	480d      	ldr	r0, [pc, #52]	@ (8005d4c <prvInitialiseTaskLists+0x68>)
 8005d18:	f7fe fcca 	bl	80046b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d1c:	480c      	ldr	r0, [pc, #48]	@ (8005d50 <prvInitialiseTaskLists+0x6c>)
 8005d1e:	f7fe fcc7 	bl	80046b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d22:	480c      	ldr	r0, [pc, #48]	@ (8005d54 <prvInitialiseTaskLists+0x70>)
 8005d24:	f7fe fcc4 	bl	80046b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d28:	480b      	ldr	r0, [pc, #44]	@ (8005d58 <prvInitialiseTaskLists+0x74>)
 8005d2a:	f7fe fcc1 	bl	80046b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <prvInitialiseTaskLists+0x78>)
 8005d30:	4a05      	ldr	r2, [pc, #20]	@ (8005d48 <prvInitialiseTaskLists+0x64>)
 8005d32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d34:	4b0a      	ldr	r3, [pc, #40]	@ (8005d60 <prvInitialiseTaskLists+0x7c>)
 8005d36:	4a05      	ldr	r2, [pc, #20]	@ (8005d4c <prvInitialiseTaskLists+0x68>)
 8005d38:	601a      	str	r2, [r3, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20000918 	.word	0x20000918
 8005d48:	20000d78 	.word	0x20000d78
 8005d4c:	20000d8c 	.word	0x20000d8c
 8005d50:	20000da8 	.word	0x20000da8
 8005d54:	20000dbc 	.word	0x20000dbc
 8005d58:	20000dd4 	.word	0x20000dd4
 8005d5c:	20000da0 	.word	0x20000da0
 8005d60:	20000da4 	.word	0x20000da4

08005d64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d6a:	e019      	b.n	8005da0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d6c:	f000 fed4 	bl	8006b18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d70:	4b10      	ldr	r3, [pc, #64]	@ (8005db4 <prvCheckTasksWaitingTermination+0x50>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fe fd21 	bl	80047c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d82:	4b0d      	ldr	r3, [pc, #52]	@ (8005db8 <prvCheckTasksWaitingTermination+0x54>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	4a0b      	ldr	r2, [pc, #44]	@ (8005db8 <prvCheckTasksWaitingTermination+0x54>)
 8005d8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dbc <prvCheckTasksWaitingTermination+0x58>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	4a0a      	ldr	r2, [pc, #40]	@ (8005dbc <prvCheckTasksWaitingTermination+0x58>)
 8005d94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d96:	f000 fef1 	bl	8006b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f810 	bl	8005dc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005da0:	4b06      	ldr	r3, [pc, #24]	@ (8005dbc <prvCheckTasksWaitingTermination+0x58>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e1      	bne.n	8005d6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005da8:	bf00      	nop
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000dbc 	.word	0x20000dbc
 8005db8:	20000de8 	.word	0x20000de8
 8005dbc:	20000dd0 	.word	0x20000dd0

08005dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d108      	bne.n	8005de4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f001 f88e 	bl	8006ef8 <vPortFree>
				vPortFree( pxTCB );
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 f88b 	bl	8006ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005de2:	e019      	b.n	8005e18 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d103      	bne.n	8005df6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 f882 	bl	8006ef8 <vPortFree>
	}
 8005df4:	e010      	b.n	8005e18 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d00b      	beq.n	8005e18 <prvDeleteTCB+0x58>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60fb      	str	r3, [r7, #12]
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <prvDeleteTCB+0x54>
	}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e26:	4b0c      	ldr	r3, [pc, #48]	@ (8005e58 <prvResetNextTaskUnblockTime+0x38>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e30:	4b0a      	ldr	r3, [pc, #40]	@ (8005e5c <prvResetNextTaskUnblockTime+0x3c>)
 8005e32:	f04f 32ff 	mov.w	r2, #4294967295
 8005e36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e38:	e008      	b.n	8005e4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e3a:	4b07      	ldr	r3, [pc, #28]	@ (8005e58 <prvResetNextTaskUnblockTime+0x38>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4a04      	ldr	r2, [pc, #16]	@ (8005e5c <prvResetNextTaskUnblockTime+0x3c>)
 8005e4a:	6013      	str	r3, [r2, #0]
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20000da0 	.word	0x20000da0
 8005e5c:	20000e08 	.word	0x20000e08

08005e60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005e66:	4b05      	ldr	r3, [pc, #20]	@ (8005e7c <xTaskGetCurrentTaskHandle+0x1c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005e6c:	687b      	ldr	r3, [r7, #4]
	}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20000914 	.word	0x20000914

08005e80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e86:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb4 <xTaskGetSchedulerState+0x34>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	e008      	b.n	8005ea6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e94:	4b08      	ldr	r3, [pc, #32]	@ (8005eb8 <xTaskGetSchedulerState+0x38>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d102      	bne.n	8005ea2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	607b      	str	r3, [r7, #4]
 8005ea0:	e001      	b.n	8005ea6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ea6:	687b      	ldr	r3, [r7, #4]
	}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	20000df4 	.word	0x20000df4
 8005eb8:	20000e10 	.word	0x20000e10

08005ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d058      	beq.n	8005f84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8005f90 <xTaskPriorityDisinherit+0xd4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d00b      	beq.n	8005ef4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	60fb      	str	r3, [r7, #12]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10b      	bne.n	8005f14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	60bb      	str	r3, [r7, #8]
}
 8005f0e:	bf00      	nop
 8005f10:	bf00      	nop
 8005f12:	e7fd      	b.n	8005f10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f18:	1e5a      	subs	r2, r3, #1
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d02c      	beq.n	8005f84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d128      	bne.n	8005f84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe fc44 	bl	80047c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f54:	4b0f      	ldr	r3, [pc, #60]	@ (8005f94 <xTaskPriorityDisinherit+0xd8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d903      	bls.n	8005f64 <xTaskPriorityDisinherit+0xa8>
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	4a0c      	ldr	r2, [pc, #48]	@ (8005f94 <xTaskPriorityDisinherit+0xd8>)
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4a09      	ldr	r2, [pc, #36]	@ (8005f98 <xTaskPriorityDisinherit+0xdc>)
 8005f72:	441a      	add	r2, r3
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	3304      	adds	r3, #4
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f7fe fbc5 	bl	800470a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f84:	697b      	ldr	r3, [r7, #20]
	}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000914 	.word	0x20000914
 8005f94:	20000df0 	.word	0x20000df0
 8005f98:	20000918 	.word	0x20000918

08005f9c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005fa6:	f000 fdb7 	bl	8006b18 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005faa:	4b1e      	ldr	r3, [pc, #120]	@ (8006024 <ulTaskNotifyTake+0x88>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d113      	bne.n	8005fdc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006024 <ulTaskNotifyTake+0x88>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	6838      	ldr	r0, [r7, #0]
 8005fc8:	f000 f8c4 	bl	8006154 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005fcc:	4b16      	ldr	r3, [pc, #88]	@ (8006028 <ulTaskNotifyTake+0x8c>)
 8005fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005fdc:	f000 fdce 	bl	8006b7c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005fe0:	f000 fd9a 	bl	8006b18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8006024 <ulTaskNotifyTake+0x88>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fea:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00c      	beq.n	800600c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8006024 <ulTaskNotifyTake+0x88>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	655a      	str	r2, [r3, #84]	@ 0x54
 8006000:	e004      	b.n	800600c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006002:	4b08      	ldr	r3, [pc, #32]	@ (8006024 <ulTaskNotifyTake+0x88>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	3a01      	subs	r2, #1
 800600a:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800600c:	4b05      	ldr	r3, [pc, #20]	@ (8006024 <ulTaskNotifyTake+0x88>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8006016:	f000 fdb1 	bl	8006b7c <vPortExitCritical>

		return ulReturn;
 800601a:	68fb      	ldr	r3, [r7, #12]
	}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000914 	.word	0x20000914
 8006028:	e000ed04 	.word	0xe000ed04

0800602c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	@ 0x28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10b      	bne.n	8006054 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	61bb      	str	r3, [r7, #24]
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	e7fd      	b.n	8006050 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006054:	f000 fe40 	bl	8006cd8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800605c:	f3ef 8211 	mrs	r2, BASEPRI
 8006060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	617a      	str	r2, [r7, #20]
 8006072:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006074:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006076:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800607e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006092:	7ffb      	ldrb	r3, [r7, #31]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d147      	bne.n	8006128 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00b      	beq.n	80060b8 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	60fb      	str	r3, [r7, #12]
}
 80060b2:	bf00      	nop
 80060b4:	bf00      	nop
 80060b6:	e7fd      	b.n	80060b4 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b8:	4b20      	ldr	r3, [pc, #128]	@ (800613c <vTaskNotifyGiveFromISR+0x110>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11d      	bne.n	80060fc <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	3304      	adds	r3, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe fb7d 	bl	80047c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006140 <vTaskNotifyGiveFromISR+0x114>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d903      	bls.n	80060de <vTaskNotifyGiveFromISR+0xb2>
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060da:	4a19      	ldr	r2, [pc, #100]	@ (8006140 <vTaskNotifyGiveFromISR+0x114>)
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4a16      	ldr	r2, [pc, #88]	@ (8006144 <vTaskNotifyGiveFromISR+0x118>)
 80060ec:	441a      	add	r2, r3
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	3304      	adds	r3, #4
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f7fe fb08 	bl	800470a <vListInsertEnd>
 80060fa:	e005      	b.n	8006108 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	3318      	adds	r3, #24
 8006100:	4619      	mov	r1, r3
 8006102:	4811      	ldr	r0, [pc, #68]	@ (8006148 <vTaskNotifyGiveFromISR+0x11c>)
 8006104:	f7fe fb01 	bl	800470a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610c:	4b0f      	ldr	r3, [pc, #60]	@ (800614c <vTaskNotifyGiveFromISR+0x120>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	429a      	cmp	r2, r3
 8006114:	d908      	bls.n	8006128 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2201      	movs	r2, #1
 8006120:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006122:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <vTaskNotifyGiveFromISR+0x124>)
 8006124:	2201      	movs	r2, #1
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f383 8811 	msr	BASEPRI, r3
}
 8006132:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006134:	bf00      	nop
 8006136:	3728      	adds	r7, #40	@ 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000e10 	.word	0x20000e10
 8006140:	20000df0 	.word	0x20000df0
 8006144:	20000918 	.word	0x20000918
 8006148:	20000da8 	.word	0x20000da8
 800614c:	20000914 	.word	0x20000914
 8006150:	20000dfc 	.word	0x20000dfc

08006154 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800615e:	4b21      	ldr	r3, [pc, #132]	@ (80061e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006164:	4b20      	ldr	r3, [pc, #128]	@ (80061e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3304      	adds	r3, #4
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fb2a 	bl	80047c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d10a      	bne.n	800618e <prvAddCurrentTaskToDelayedList+0x3a>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800617e:	4b1a      	ldr	r3, [pc, #104]	@ (80061e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4819      	ldr	r0, [pc, #100]	@ (80061ec <prvAddCurrentTaskToDelayedList+0x98>)
 8006188:	f7fe fabf 	bl	800470a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800618c:	e026      	b.n	80061dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4413      	add	r3, r2
 8006194:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006196:	4b14      	ldr	r3, [pc, #80]	@ (80061e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d209      	bcs.n	80061ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a6:	4b12      	ldr	r3, [pc, #72]	@ (80061f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b0f      	ldr	r3, [pc, #60]	@ (80061e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7fe facd 	bl	8004752 <vListInsert>
}
 80061b8:	e010      	b.n	80061dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ba:	4b0e      	ldr	r3, [pc, #56]	@ (80061f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4b0a      	ldr	r3, [pc, #40]	@ (80061e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f7fe fac3 	bl	8004752 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061cc:	4b0a      	ldr	r3, [pc, #40]	@ (80061f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d202      	bcs.n	80061dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061d6:	4a08      	ldr	r2, [pc, #32]	@ (80061f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6013      	str	r3, [r2, #0]
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20000dec 	.word	0x20000dec
 80061e8:	20000914 	.word	0x20000914
 80061ec:	20000dd4 	.word	0x20000dd4
 80061f0:	20000da4 	.word	0x20000da4
 80061f4:	20000da0 	.word	0x20000da0
 80061f8:	20000e08 	.word	0x20000e08

080061fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	@ 0x28
 8006200:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006206:	f000 fb13 	bl	8006830 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800620a:	4b1d      	ldr	r3, [pc, #116]	@ (8006280 <xTimerCreateTimerTask+0x84>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d021      	beq.n	8006256 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800621a:	1d3a      	adds	r2, r7, #4
 800621c:	f107 0108 	add.w	r1, r7, #8
 8006220:	f107 030c 	add.w	r3, r7, #12
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe fa29 	bl	800467c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	9202      	str	r2, [sp, #8]
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	2302      	movs	r3, #2
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	2300      	movs	r3, #0
 800623a:	460a      	mov	r2, r1
 800623c:	4911      	ldr	r1, [pc, #68]	@ (8006284 <xTimerCreateTimerTask+0x88>)
 800623e:	4812      	ldr	r0, [pc, #72]	@ (8006288 <xTimerCreateTimerTask+0x8c>)
 8006240:	f7fe ffe4 	bl	800520c <xTaskCreateStatic>
 8006244:	4603      	mov	r3, r0
 8006246:	4a11      	ldr	r2, [pc, #68]	@ (800628c <xTimerCreateTimerTask+0x90>)
 8006248:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800624a:	4b10      	ldr	r3, [pc, #64]	@ (800628c <xTimerCreateTimerTask+0x90>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006252:	2301      	movs	r3, #1
 8006254:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006274:	697b      	ldr	r3, [r7, #20]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000e44 	.word	0x20000e44
 8006284:	080071e0 	.word	0x080071e0
 8006288:	080063c9 	.word	0x080063c9
 800628c:	20000e48 	.word	0x20000e48

08006290 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	@ 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800629e:	2300      	movs	r3, #0
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <xTimerGenericCommand+0x30>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	623b      	str	r3, [r7, #32]
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	e7fd      	b.n	80062bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062c0:	4b19      	ldr	r3, [pc, #100]	@ (8006328 <xTimerGenericCommand+0x98>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d02a      	beq.n	800631e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	dc18      	bgt.n	800630c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062da:	f7ff fdd1 	bl	8005e80 <xTaskGetSchedulerState>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d109      	bne.n	80062f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062e4:	4b10      	ldr	r3, [pc, #64]	@ (8006328 <xTimerGenericCommand+0x98>)
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	f107 0110 	add.w	r1, r7, #16
 80062ec:	2300      	movs	r3, #0
 80062ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f0:	f7fe fb9c 	bl	8004a2c <xQueueGenericSend>
 80062f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80062f6:	e012      	b.n	800631e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006328 <xTimerGenericCommand+0x98>)
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	f107 0110 	add.w	r1, r7, #16
 8006300:	2300      	movs	r3, #0
 8006302:	2200      	movs	r2, #0
 8006304:	f7fe fb92 	bl	8004a2c <xQueueGenericSend>
 8006308:	6278      	str	r0, [r7, #36]	@ 0x24
 800630a:	e008      	b.n	800631e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800630c:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <xTimerGenericCommand+0x98>)
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	f107 0110 	add.w	r1, r7, #16
 8006314:	2300      	movs	r3, #0
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	f7fe fc8a 	bl	8004c30 <xQueueGenericSendFromISR>
 800631c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006320:	4618      	mov	r0, r3
 8006322:	3728      	adds	r7, #40	@ 0x28
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000e44 	.word	0x20000e44

0800632c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af02      	add	r7, sp, #8
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006336:	4b23      	ldr	r3, [pc, #140]	@ (80063c4 <prvProcessExpiredTimer+0x98>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	3304      	adds	r3, #4
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe fa3d 	bl	80047c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d023      	beq.n	80063a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	699a      	ldr	r2, [r3, #24]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	18d1      	adds	r1, r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	6978      	ldr	r0, [r7, #20]
 8006366:	f000 f8d5 	bl	8006514 <prvInsertTimerInActiveList>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d020      	beq.n	80063b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006370:	2300      	movs	r3, #0
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	2100      	movs	r1, #0
 800637a:	6978      	ldr	r0, [r7, #20]
 800637c:	f7ff ff88 	bl	8006290 <xTimerGenericCommand>
 8006380:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d114      	bne.n	80063b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	60fb      	str	r3, [r7, #12]
}
 800639a:	bf00      	nop
 800639c:	bf00      	nop
 800639e:	e7fd      	b.n	800639c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063a6:	f023 0301 	bic.w	r3, r3, #1
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	6978      	ldr	r0, [r7, #20]
 80063b8:	4798      	blx	r3
}
 80063ba:	bf00      	nop
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000e3c 	.word	0x20000e3c

080063c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063d0:	f107 0308 	add.w	r3, r7, #8
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 f859 	bl	800648c <prvGetNextExpireTime>
 80063da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4619      	mov	r1, r3
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f805 	bl	80063f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063e6:	f000 f8d7 	bl	8006598 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063ea:	bf00      	nop
 80063ec:	e7f0      	b.n	80063d0 <prvTimerTask+0x8>
	...

080063f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063fa:	f7ff f94b 	bl	8005694 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063fe:	f107 0308 	add.w	r3, r7, #8
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f866 	bl	80064d4 <prvSampleTimeNow>
 8006408:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d130      	bne.n	8006472 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <prvProcessTimerOrBlockTask+0x3c>
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	429a      	cmp	r2, r3
 800641c:	d806      	bhi.n	800642c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800641e:	f7ff f947 	bl	80056b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff ff81 	bl	800632c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800642a:	e024      	b.n	8006476 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006432:	4b13      	ldr	r3, [pc, #76]	@ (8006480 <prvProcessTimerOrBlockTask+0x90>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <prvProcessTimerOrBlockTask+0x50>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <prvProcessTimerOrBlockTask+0x52>
 8006440:	2300      	movs	r3, #0
 8006442:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006444:	4b0f      	ldr	r3, [pc, #60]	@ (8006484 <prvProcessTimerOrBlockTask+0x94>)
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	4619      	mov	r1, r3
 8006452:	f7fe fea7 	bl	80051a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006456:	f7ff f92b 	bl	80056b0 <xTaskResumeAll>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006460:	4b09      	ldr	r3, [pc, #36]	@ (8006488 <prvProcessTimerOrBlockTask+0x98>)
 8006462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
}
 8006470:	e001      	b.n	8006476 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006472:	f7ff f91d 	bl	80056b0 <xTaskResumeAll>
}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000e40 	.word	0x20000e40
 8006484:	20000e44 	.word	0x20000e44
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006494:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <prvGetNextExpireTime+0x44>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <prvGetNextExpireTime+0x16>
 800649e:	2201      	movs	r2, #1
 80064a0:	e000      	b.n	80064a4 <prvGetNextExpireTime+0x18>
 80064a2:	2200      	movs	r2, #0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d105      	bne.n	80064bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064b0:	4b07      	ldr	r3, [pc, #28]	@ (80064d0 <prvGetNextExpireTime+0x44>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	e001      	b.n	80064c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064c0:	68fb      	ldr	r3, [r7, #12]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20000e3c 	.word	0x20000e3c

080064d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064dc:	f7ff f986 	bl	80057ec <xTaskGetTickCount>
 80064e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006510 <prvSampleTimeNow+0x3c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d205      	bcs.n	80064f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064ec:	f000 f93a 	bl	8006764 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e002      	b.n	80064fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064fe:	4a04      	ldr	r2, [pc, #16]	@ (8006510 <prvSampleTimeNow+0x3c>)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006504:	68fb      	ldr	r3, [r7, #12]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000e4c 	.word	0x20000e4c

08006514 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d812      	bhi.n	8006560 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	429a      	cmp	r2, r3
 8006546:	d302      	bcc.n	800654e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006548:	2301      	movs	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e01b      	b.n	8006586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800654e:	4b10      	ldr	r3, [pc, #64]	@ (8006590 <prvInsertTimerInActiveList+0x7c>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7fe f8fa 	bl	8004752 <vListInsert>
 800655e:	e012      	b.n	8006586 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d206      	bcs.n	8006576 <prvInsertTimerInActiveList+0x62>
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e007      	b.n	8006586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006576:	4b07      	ldr	r3, [pc, #28]	@ (8006594 <prvInsertTimerInActiveList+0x80>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fe f8e6 	bl	8004752 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006586:	697b      	ldr	r3, [r7, #20]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000e40 	.word	0x20000e40
 8006594:	20000e3c 	.word	0x20000e3c

08006598 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08e      	sub	sp, #56	@ 0x38
 800659c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800659e:	e0ce      	b.n	800673e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	da19      	bge.n	80065da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	3304      	adds	r3, #4
 80065aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	61fb      	str	r3, [r7, #28]
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	e7fd      	b.n	80065c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d0:	6850      	ldr	r0, [r2, #4]
 80065d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d4:	6892      	ldr	r2, [r2, #8]
 80065d6:	4611      	mov	r1, r2
 80065d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f2c0 80ae 	blt.w	800673e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d004      	beq.n	80065f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f0:	3304      	adds	r3, #4
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe f8e6 	bl	80047c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065f8:	463b      	mov	r3, r7
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff ff6a 	bl	80064d4 <prvSampleTimeNow>
 8006600:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b09      	cmp	r3, #9
 8006606:	f200 8097 	bhi.w	8006738 <prvProcessReceivedCommands+0x1a0>
 800660a:	a201      	add	r2, pc, #4	@ (adr r2, 8006610 <prvProcessReceivedCommands+0x78>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006639 	.word	0x08006639
 8006614:	08006639 	.word	0x08006639
 8006618:	08006639 	.word	0x08006639
 800661c:	080066af 	.word	0x080066af
 8006620:	080066c3 	.word	0x080066c3
 8006624:	0800670f 	.word	0x0800670f
 8006628:	08006639 	.word	0x08006639
 800662c:	08006639 	.word	0x08006639
 8006630:	080066af 	.word	0x080066af
 8006634:	080066c3 	.word	0x080066c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	b2da      	uxtb	r2, r3
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	18d1      	adds	r1, r2, r3
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006658:	f7ff ff5c 	bl	8006514 <prvInsertTimerInActiveList>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d06c      	beq.n	800673c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006668:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800666a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d061      	beq.n	800673c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	441a      	add	r2, r3
 8006680:	2300      	movs	r3, #0
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	2300      	movs	r3, #0
 8006686:	2100      	movs	r1, #0
 8006688:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800668a:	f7ff fe01 	bl	8006290 <xTimerGenericCommand>
 800668e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d152      	bne.n	800673c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	61bb      	str	r3, [r7, #24]
}
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	e7fd      	b.n	80066aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066c0:	e03d      	b.n	800673e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066c8:	f043 0301 	orr.w	r3, r3, #1
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <prvProcessReceivedCommands+0x162>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	617b      	str	r3, [r7, #20]
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	18d1      	adds	r1, r2, r3
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006708:	f7ff ff04 	bl	8006514 <prvInsertTimerInActiveList>
					break;
 800670c:	e017      	b.n	800673e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800671c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800671e:	f000 fbeb 	bl	8006ef8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006722:	e00c      	b.n	800673e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800672a:	f023 0301 	bic.w	r3, r3, #1
 800672e:	b2da      	uxtb	r2, r3
 8006730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006732:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006736:	e002      	b.n	800673e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006738:	bf00      	nop
 800673a:	e000      	b.n	800673e <prvProcessReceivedCommands+0x1a6>
					break;
 800673c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800673e:	4b08      	ldr	r3, [pc, #32]	@ (8006760 <prvProcessReceivedCommands+0x1c8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	1d39      	adds	r1, r7, #4
 8006744:	2200      	movs	r2, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fb10 	bl	8004d6c <xQueueReceive>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	f47f af26 	bne.w	80065a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	3730      	adds	r7, #48	@ 0x30
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000e44 	.word	0x20000e44

08006764 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800676a:	e049      	b.n	8006800 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800676c:	4b2e      	ldr	r3, [pc, #184]	@ (8006828 <prvSwitchTimerLists+0xc4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006776:	4b2c      	ldr	r3, [pc, #176]	@ (8006828 <prvSwitchTimerLists+0xc4>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3304      	adds	r3, #4
 8006784:	4618      	mov	r0, r3
 8006786:	f7fe f81d 	bl	80047c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02f      	beq.n	8006800 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d90e      	bls.n	80067d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067be:	4b1a      	ldr	r3, [pc, #104]	@ (8006828 <prvSwitchTimerLists+0xc4>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7fd ffc2 	bl	8004752 <vListInsert>
 80067ce:	e017      	b.n	8006800 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067d0:	2300      	movs	r3, #0
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	2100      	movs	r1, #0
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff fd58 	bl	8006290 <xTimerGenericCommand>
 80067e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10b      	bne.n	8006800 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	603b      	str	r3, [r7, #0]
}
 80067fa:	bf00      	nop
 80067fc:	bf00      	nop
 80067fe:	e7fd      	b.n	80067fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006800:	4b09      	ldr	r3, [pc, #36]	@ (8006828 <prvSwitchTimerLists+0xc4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1b0      	bne.n	800676c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800680a:	4b07      	ldr	r3, [pc, #28]	@ (8006828 <prvSwitchTimerLists+0xc4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006810:	4b06      	ldr	r3, [pc, #24]	@ (800682c <prvSwitchTimerLists+0xc8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a04      	ldr	r2, [pc, #16]	@ (8006828 <prvSwitchTimerLists+0xc4>)
 8006816:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006818:	4a04      	ldr	r2, [pc, #16]	@ (800682c <prvSwitchTimerLists+0xc8>)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	6013      	str	r3, [r2, #0]
}
 800681e:	bf00      	nop
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000e3c 	.word	0x20000e3c
 800682c:	20000e40 	.word	0x20000e40

08006830 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006836:	f000 f96f 	bl	8006b18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800683a:	4b15      	ldr	r3, [pc, #84]	@ (8006890 <prvCheckForValidListAndQueue+0x60>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d120      	bne.n	8006884 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006842:	4814      	ldr	r0, [pc, #80]	@ (8006894 <prvCheckForValidListAndQueue+0x64>)
 8006844:	f7fd ff34 	bl	80046b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006848:	4813      	ldr	r0, [pc, #76]	@ (8006898 <prvCheckForValidListAndQueue+0x68>)
 800684a:	f7fd ff31 	bl	80046b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800684e:	4b13      	ldr	r3, [pc, #76]	@ (800689c <prvCheckForValidListAndQueue+0x6c>)
 8006850:	4a10      	ldr	r2, [pc, #64]	@ (8006894 <prvCheckForValidListAndQueue+0x64>)
 8006852:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006854:	4b12      	ldr	r3, [pc, #72]	@ (80068a0 <prvCheckForValidListAndQueue+0x70>)
 8006856:	4a10      	ldr	r2, [pc, #64]	@ (8006898 <prvCheckForValidListAndQueue+0x68>)
 8006858:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800685a:	2300      	movs	r3, #0
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	4b11      	ldr	r3, [pc, #68]	@ (80068a4 <prvCheckForValidListAndQueue+0x74>)
 8006860:	4a11      	ldr	r2, [pc, #68]	@ (80068a8 <prvCheckForValidListAndQueue+0x78>)
 8006862:	2110      	movs	r1, #16
 8006864:	200a      	movs	r0, #10
 8006866:	f7fe f841 	bl	80048ec <xQueueGenericCreateStatic>
 800686a:	4603      	mov	r3, r0
 800686c:	4a08      	ldr	r2, [pc, #32]	@ (8006890 <prvCheckForValidListAndQueue+0x60>)
 800686e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006870:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <prvCheckForValidListAndQueue+0x60>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006878:	4b05      	ldr	r3, [pc, #20]	@ (8006890 <prvCheckForValidListAndQueue+0x60>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	490b      	ldr	r1, [pc, #44]	@ (80068ac <prvCheckForValidListAndQueue+0x7c>)
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe fc66 	bl	8005150 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006884:	f000 f97a 	bl	8006b7c <vPortExitCritical>
}
 8006888:	bf00      	nop
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000e44 	.word	0x20000e44
 8006894:	20000e14 	.word	0x20000e14
 8006898:	20000e28 	.word	0x20000e28
 800689c:	20000e3c 	.word	0x20000e3c
 80068a0:	20000e40 	.word	0x20000e40
 80068a4:	20000ef0 	.word	0x20000ef0
 80068a8:	20000e50 	.word	0x20000e50
 80068ac:	080071e8 	.word	0x080071e8

080068b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3b04      	subs	r3, #4
 80068c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3b04      	subs	r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f023 0201 	bic.w	r2, r3, #1
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b04      	subs	r3, #4
 80068de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006914 <pxPortInitialiseStack+0x64>)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3b14      	subs	r3, #20
 80068ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3b04      	subs	r3, #4
 80068f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f06f 0202 	mvn.w	r2, #2
 80068fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3b20      	subs	r3, #32
 8006904:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006906:	68fb      	ldr	r3, [r7, #12]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	08006919 	.word	0x08006919

08006918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006922:	4b13      	ldr	r3, [pc, #76]	@ (8006970 <prvTaskExitError+0x58>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692a:	d00b      	beq.n	8006944 <prvTaskExitError+0x2c>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	60fb      	str	r3, [r7, #12]
}
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	e7fd      	b.n	8006940 <prvTaskExitError+0x28>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	60bb      	str	r3, [r7, #8]
}
 8006956:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006958:	bf00      	nop
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0fc      	beq.n	800695a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006960:	bf00      	nop
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	2000000c 	.word	0x2000000c
	...

08006980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006980:	4b07      	ldr	r3, [pc, #28]	@ (80069a0 <pxCurrentTCBConst2>)
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	6808      	ldr	r0, [r1, #0]
 8006986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	f380 8809 	msr	PSP, r0
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	f380 8811 	msr	BASEPRI, r0
 800699a:	4770      	bx	lr
 800699c:	f3af 8000 	nop.w

080069a0 <pxCurrentTCBConst2>:
 80069a0:	20000914 	.word	0x20000914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069a8:	4808      	ldr	r0, [pc, #32]	@ (80069cc <prvPortStartFirstTask+0x24>)
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	6800      	ldr	r0, [r0, #0]
 80069ae:	f380 8808 	msr	MSP, r0
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f380 8814 	msr	CONTROL, r0
 80069ba:	b662      	cpsie	i
 80069bc:	b661      	cpsie	f
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	df00      	svc	0
 80069c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ca:	bf00      	nop
 80069cc:	e000ed08 	.word	0xe000ed08

080069d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069d6:	4b47      	ldr	r3, [pc, #284]	@ (8006af4 <xPortStartScheduler+0x124>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a47      	ldr	r2, [pc, #284]	@ (8006af8 <xPortStartScheduler+0x128>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d10b      	bne.n	80069f8 <xPortStartScheduler+0x28>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	60fb      	str	r3, [r7, #12]
}
 80069f2:	bf00      	nop
 80069f4:	bf00      	nop
 80069f6:	e7fd      	b.n	80069f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069f8:	4b3e      	ldr	r3, [pc, #248]	@ (8006af4 <xPortStartScheduler+0x124>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a3f      	ldr	r2, [pc, #252]	@ (8006afc <xPortStartScheduler+0x12c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d10b      	bne.n	8006a1a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	613b      	str	r3, [r7, #16]
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop
 8006a18:	e7fd      	b.n	8006a16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a1a:	4b39      	ldr	r3, [pc, #228]	@ (8006b00 <xPortStartScheduler+0x130>)
 8006a1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	22ff      	movs	r2, #255	@ 0xff
 8006a2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	4b31      	ldr	r3, [pc, #196]	@ (8006b04 <xPortStartScheduler+0x134>)
 8006a40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a42:	4b31      	ldr	r3, [pc, #196]	@ (8006b08 <xPortStartScheduler+0x138>)
 8006a44:	2207      	movs	r2, #7
 8006a46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a48:	e009      	b.n	8006a5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b08 <xPortStartScheduler+0x138>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	4a2d      	ldr	r2, [pc, #180]	@ (8006b08 <xPortStartScheduler+0x138>)
 8006a52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a66:	2b80      	cmp	r3, #128	@ 0x80
 8006a68:	d0ef      	beq.n	8006a4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a6a:	4b27      	ldr	r3, [pc, #156]	@ (8006b08 <xPortStartScheduler+0x138>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f1c3 0307 	rsb	r3, r3, #7
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d00b      	beq.n	8006a8e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	60bb      	str	r3, [r7, #8]
}
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	e7fd      	b.n	8006a8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b08 <xPortStartScheduler+0x138>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	4a1c      	ldr	r2, [pc, #112]	@ (8006b08 <xPortStartScheduler+0x138>)
 8006a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a98:	4b1b      	ldr	r3, [pc, #108]	@ (8006b08 <xPortStartScheduler+0x138>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006aa0:	4a19      	ldr	r2, [pc, #100]	@ (8006b08 <xPortStartScheduler+0x138>)
 8006aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006aac:	4b17      	ldr	r3, [pc, #92]	@ (8006b0c <xPortStartScheduler+0x13c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a16      	ldr	r2, [pc, #88]	@ (8006b0c <xPortStartScheduler+0x13c>)
 8006ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ab8:	4b14      	ldr	r3, [pc, #80]	@ (8006b0c <xPortStartScheduler+0x13c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a13      	ldr	r2, [pc, #76]	@ (8006b0c <xPortStartScheduler+0x13c>)
 8006abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ac4:	f000 f8da 	bl	8006c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ac8:	4b11      	ldr	r3, [pc, #68]	@ (8006b10 <xPortStartScheduler+0x140>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ace:	f000 f8f9 	bl	8006cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ad2:	4b10      	ldr	r3, [pc, #64]	@ (8006b14 <xPortStartScheduler+0x144>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8006b14 <xPortStartScheduler+0x144>)
 8006ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ade:	f7ff ff63 	bl	80069a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ae2:	f7fe ff4d 	bl	8005980 <vTaskSwitchContext>
	prvTaskExitError();
 8006ae6:	f7ff ff17 	bl	8006918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	e000ed00 	.word	0xe000ed00
 8006af8:	410fc271 	.word	0x410fc271
 8006afc:	410fc270 	.word	0x410fc270
 8006b00:	e000e400 	.word	0xe000e400
 8006b04:	20000f40 	.word	0x20000f40
 8006b08:	20000f44 	.word	0x20000f44
 8006b0c:	e000ed20 	.word	0xe000ed20
 8006b10:	2000000c 	.word	0x2000000c
 8006b14:	e000ef34 	.word	0xe000ef34

08006b18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	607b      	str	r3, [r7, #4]
}
 8006b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b32:	4b10      	ldr	r3, [pc, #64]	@ (8006b74 <vPortEnterCritical+0x5c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	4a0e      	ldr	r2, [pc, #56]	@ (8006b74 <vPortEnterCritical+0x5c>)
 8006b3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <vPortEnterCritical+0x5c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d110      	bne.n	8006b66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b44:	4b0c      	ldr	r3, [pc, #48]	@ (8006b78 <vPortEnterCritical+0x60>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <vPortEnterCritical+0x4e>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	603b      	str	r3, [r7, #0]
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	e7fd      	b.n	8006b62 <vPortEnterCritical+0x4a>
	}
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	2000000c 	.word	0x2000000c
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b82:	4b12      	ldr	r3, [pc, #72]	@ (8006bcc <vPortExitCritical+0x50>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10b      	bne.n	8006ba2 <vPortExitCritical+0x26>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	607b      	str	r3, [r7, #4]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bcc <vPortExitCritical+0x50>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	4a08      	ldr	r2, [pc, #32]	@ (8006bcc <vPortExitCritical+0x50>)
 8006baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bac:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <vPortExitCritical+0x50>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <vPortExitCritical+0x44>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f383 8811 	msr	BASEPRI, r3
}
 8006bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	2000000c 	.word	0x2000000c

08006bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bd0:	f3ef 8009 	mrs	r0, PSP
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	4b15      	ldr	r3, [pc, #84]	@ (8006c30 <pxCurrentTCBConst>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	f01e 0f10 	tst.w	lr, #16
 8006be0:	bf08      	it	eq
 8006be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bea:	6010      	str	r0, [r2, #0]
 8006bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006bf4:	f380 8811 	msr	BASEPRI, r0
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f7fe febe 	bl	8005980 <vTaskSwitchContext>
 8006c04:	f04f 0000 	mov.w	r0, #0
 8006c08:	f380 8811 	msr	BASEPRI, r0
 8006c0c:	bc09      	pop	{r0, r3}
 8006c0e:	6819      	ldr	r1, [r3, #0]
 8006c10:	6808      	ldr	r0, [r1, #0]
 8006c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c16:	f01e 0f10 	tst.w	lr, #16
 8006c1a:	bf08      	it	eq
 8006c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c20:	f380 8809 	msr	PSP, r0
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	f3af 8000 	nop.w

08006c30 <pxCurrentTCBConst>:
 8006c30:	20000914 	.word	0x20000914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop

08006c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	607b      	str	r3, [r7, #4]
}
 8006c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c52:	f7fe fddb 	bl	800580c <xTaskIncrementTick>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c5c:	4b06      	ldr	r3, [pc, #24]	@ (8006c78 <xPortSysTickHandler+0x40>)
 8006c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	2300      	movs	r3, #0
 8006c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f383 8811 	msr	BASEPRI, r3
}
 8006c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c80:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <vPortSetupTimerInterrupt+0x34>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c86:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb4 <vPortSetupTimerInterrupt+0x38>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <vPortSetupTimerInterrupt+0x3c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	@ (8006cbc <vPortSetupTimerInterrupt+0x40>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	099b      	lsrs	r3, r3, #6
 8006c98:	4a09      	ldr	r2, [pc, #36]	@ (8006cc0 <vPortSetupTimerInterrupt+0x44>)
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c9e:	4b04      	ldr	r3, [pc, #16]	@ (8006cb0 <vPortSetupTimerInterrupt+0x34>)
 8006ca0:	2207      	movs	r2, #7
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	e000e010 	.word	0xe000e010
 8006cb4:	e000e018 	.word	0xe000e018
 8006cb8:	20000000 	.word	0x20000000
 8006cbc:	10624dd3 	.word	0x10624dd3
 8006cc0:	e000e014 	.word	0xe000e014

08006cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006cd4 <vPortEnableVFP+0x10>
 8006cc8:	6801      	ldr	r1, [r0, #0]
 8006cca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006cce:	6001      	str	r1, [r0, #0]
 8006cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cd2:	bf00      	nop
 8006cd4:	e000ed88 	.word	0xe000ed88

08006cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cde:	f3ef 8305 	mrs	r3, IPSR
 8006ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b0f      	cmp	r3, #15
 8006ce8:	d915      	bls.n	8006d16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cea:	4a18      	ldr	r2, [pc, #96]	@ (8006d4c <vPortValidateInterruptPriority+0x74>)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cf4:	4b16      	ldr	r3, [pc, #88]	@ (8006d50 <vPortValidateInterruptPriority+0x78>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	7afa      	ldrb	r2, [r7, #11]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d20b      	bcs.n	8006d16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	607b      	str	r3, [r7, #4]
}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	e7fd      	b.n	8006d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d16:	4b0f      	ldr	r3, [pc, #60]	@ (8006d54 <vPortValidateInterruptPriority+0x7c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d58 <vPortValidateInterruptPriority+0x80>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d90b      	bls.n	8006d3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	603b      	str	r3, [r7, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	e7fd      	b.n	8006d3a <vPortValidateInterruptPriority+0x62>
	}
 8006d3e:	bf00      	nop
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	e000e3f0 	.word	0xe000e3f0
 8006d50:	20000f40 	.word	0x20000f40
 8006d54:	e000ed0c 	.word	0xe000ed0c
 8006d58:	20000f44 	.word	0x20000f44

08006d5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08a      	sub	sp, #40	@ 0x28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d68:	f7fe fc94 	bl	8005694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ee0 <pvPortMalloc+0x184>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d74:	f000 f924 	bl	8006fc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d78:	4b5a      	ldr	r3, [pc, #360]	@ (8006ee4 <pvPortMalloc+0x188>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f040 8095 	bne.w	8006eb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01e      	beq.n	8006dca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4413      	add	r3, r2
 8006d92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d015      	beq.n	8006dca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f023 0307 	bic.w	r3, r3, #7
 8006da4:	3308      	adds	r3, #8
 8006da6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <pvPortMalloc+0x6e>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	617b      	str	r3, [r7, #20]
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
 8006dc8:	e7fd      	b.n	8006dc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d06f      	beq.n	8006eb0 <pvPortMalloc+0x154>
 8006dd0:	4b45      	ldr	r3, [pc, #276]	@ (8006ee8 <pvPortMalloc+0x18c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d86a      	bhi.n	8006eb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dda:	4b44      	ldr	r3, [pc, #272]	@ (8006eec <pvPortMalloc+0x190>)
 8006ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dde:	4b43      	ldr	r3, [pc, #268]	@ (8006eec <pvPortMalloc+0x190>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006de4:	e004      	b.n	8006df0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d903      	bls.n	8006e02 <pvPortMalloc+0xa6>
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1f1      	bne.n	8006de6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e02:	4b37      	ldr	r3, [pc, #220]	@ (8006ee0 <pvPortMalloc+0x184>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d051      	beq.n	8006eb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2208      	movs	r2, #8
 8006e12:	4413      	add	r3, r2
 8006e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	1ad2      	subs	r2, r2, r3
 8006e26:	2308      	movs	r3, #8
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d920      	bls.n	8006e70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4413      	add	r3, r2
 8006e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <pvPortMalloc+0xfc>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	613b      	str	r3, [r7, #16]
}
 8006e52:	bf00      	nop
 8006e54:	bf00      	nop
 8006e56:	e7fd      	b.n	8006e54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e6a:	69b8      	ldr	r0, [r7, #24]
 8006e6c:	f000 f90a 	bl	8007084 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e70:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee8 <pvPortMalloc+0x18c>)
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee8 <pvPortMalloc+0x18c>)
 8006e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee8 <pvPortMalloc+0x18c>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef0 <pvPortMalloc+0x194>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d203      	bcs.n	8006e92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e8a:	4b17      	ldr	r3, [pc, #92]	@ (8006ee8 <pvPortMalloc+0x18c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a18      	ldr	r2, [pc, #96]	@ (8006ef0 <pvPortMalloc+0x194>)
 8006e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	4b13      	ldr	r3, [pc, #76]	@ (8006ee4 <pvPortMalloc+0x188>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ea6:	4b13      	ldr	r3, [pc, #76]	@ (8006ef4 <pvPortMalloc+0x198>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	4a11      	ldr	r2, [pc, #68]	@ (8006ef4 <pvPortMalloc+0x198>)
 8006eae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006eb0:	f7fe fbfe 	bl	80056b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <pvPortMalloc+0x17a>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60fb      	str	r3, [r7, #12]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3728      	adds	r7, #40	@ 0x28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20001b50 	.word	0x20001b50
 8006ee4:	20001b64 	.word	0x20001b64
 8006ee8:	20001b54 	.word	0x20001b54
 8006eec:	20001b48 	.word	0x20001b48
 8006ef0:	20001b58 	.word	0x20001b58
 8006ef4:	20001b5c 	.word	0x20001b5c

08006ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d04f      	beq.n	8006faa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	425b      	negs	r3, r3
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4413      	add	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	4b25      	ldr	r3, [pc, #148]	@ (8006fb4 <vPortFree+0xbc>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4013      	ands	r3, r2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10b      	bne.n	8006f3e <vPortFree+0x46>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	60fb      	str	r3, [r7, #12]
}
 8006f38:	bf00      	nop
 8006f3a:	bf00      	nop
 8006f3c:	e7fd      	b.n	8006f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <vPortFree+0x66>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	60bb      	str	r3, [r7, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	4b14      	ldr	r3, [pc, #80]	@ (8006fb4 <vPortFree+0xbc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01e      	beq.n	8006faa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d11a      	bne.n	8006faa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb4 <vPortFree+0xbc>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	401a      	ands	r2, r3
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f84:	f7fe fb86 	bl	8005694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb8 <vPortFree+0xc0>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4413      	add	r3, r2
 8006f92:	4a09      	ldr	r2, [pc, #36]	@ (8006fb8 <vPortFree+0xc0>)
 8006f94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f96:	6938      	ldr	r0, [r7, #16]
 8006f98:	f000 f874 	bl	8007084 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f9c:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <vPortFree+0xc4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	4a06      	ldr	r2, [pc, #24]	@ (8006fbc <vPortFree+0xc4>)
 8006fa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fa6:	f7fe fb83 	bl	80056b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006faa:	bf00      	nop
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20001b64 	.word	0x20001b64
 8006fb8:	20001b54 	.word	0x20001b54
 8006fbc:	20001b60 	.word	0x20001b60

08006fc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006fca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fcc:	4b27      	ldr	r3, [pc, #156]	@ (800706c <prvHeapInit+0xac>)
 8006fce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3307      	adds	r3, #7
 8006fde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0307 	bic.w	r3, r3, #7
 8006fe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	4a1f      	ldr	r2, [pc, #124]	@ (800706c <prvHeapInit+0xac>)
 8006ff0:	4413      	add	r3, r2
 8006ff2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8007070 <prvHeapInit+0xb0>)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8007070 <prvHeapInit+0xb0>)
 8007000:	2200      	movs	r2, #0
 8007002:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	4413      	add	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800700c:	2208      	movs	r2, #8
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1a9b      	subs	r3, r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4a15      	ldr	r2, [pc, #84]	@ (8007074 <prvHeapInit+0xb4>)
 8007020:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007022:	4b14      	ldr	r3, [pc, #80]	@ (8007074 <prvHeapInit+0xb4>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2200      	movs	r2, #0
 8007028:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800702a:	4b12      	ldr	r3, [pc, #72]	@ (8007074 <prvHeapInit+0xb4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	1ad2      	subs	r2, r2, r3
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007040:	4b0c      	ldr	r3, [pc, #48]	@ (8007074 <prvHeapInit+0xb4>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	4a0a      	ldr	r2, [pc, #40]	@ (8007078 <prvHeapInit+0xb8>)
 800704e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	4a09      	ldr	r2, [pc, #36]	@ (800707c <prvHeapInit+0xbc>)
 8007056:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007058:	4b09      	ldr	r3, [pc, #36]	@ (8007080 <prvHeapInit+0xc0>)
 800705a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800705e:	601a      	str	r2, [r3, #0]
}
 8007060:	bf00      	nop
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	20000f48 	.word	0x20000f48
 8007070:	20001b48 	.word	0x20001b48
 8007074:	20001b50 	.word	0x20001b50
 8007078:	20001b58 	.word	0x20001b58
 800707c:	20001b54 	.word	0x20001b54
 8007080:	20001b64 	.word	0x20001b64

08007084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800708c:	4b28      	ldr	r3, [pc, #160]	@ (8007130 <prvInsertBlockIntoFreeList+0xac>)
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e002      	b.n	8007098 <prvInsertBlockIntoFreeList+0x14>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d8f7      	bhi.n	8007092 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4413      	add	r3, r2
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d108      	bne.n	80070c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	441a      	add	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	441a      	add	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d118      	bne.n	800710c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4b15      	ldr	r3, [pc, #84]	@ (8007134 <prvInsertBlockIntoFreeList+0xb0>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d00d      	beq.n	8007102 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	441a      	add	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	e008      	b.n	8007114 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007102:	4b0c      	ldr	r3, [pc, #48]	@ (8007134 <prvInsertBlockIntoFreeList+0xb0>)
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	e003      	b.n	8007114 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	429a      	cmp	r2, r3
 800711a:	d002      	beq.n	8007122 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007122:	bf00      	nop
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	20001b48 	.word	0x20001b48
 8007134:	20001b50 	.word	0x20001b50

08007138 <memset>:
 8007138:	4402      	add	r2, r0
 800713a:	4603      	mov	r3, r0
 800713c:	4293      	cmp	r3, r2
 800713e:	d100      	bne.n	8007142 <memset+0xa>
 8007140:	4770      	bx	lr
 8007142:	f803 1b01 	strb.w	r1, [r3], #1
 8007146:	e7f9      	b.n	800713c <memset+0x4>

08007148 <__libc_init_array>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4d0d      	ldr	r5, [pc, #52]	@ (8007180 <__libc_init_array+0x38>)
 800714c:	4c0d      	ldr	r4, [pc, #52]	@ (8007184 <__libc_init_array+0x3c>)
 800714e:	1b64      	subs	r4, r4, r5
 8007150:	10a4      	asrs	r4, r4, #2
 8007152:	2600      	movs	r6, #0
 8007154:	42a6      	cmp	r6, r4
 8007156:	d109      	bne.n	800716c <__libc_init_array+0x24>
 8007158:	4d0b      	ldr	r5, [pc, #44]	@ (8007188 <__libc_init_array+0x40>)
 800715a:	4c0c      	ldr	r4, [pc, #48]	@ (800718c <__libc_init_array+0x44>)
 800715c:	f000 f826 	bl	80071ac <_init>
 8007160:	1b64      	subs	r4, r4, r5
 8007162:	10a4      	asrs	r4, r4, #2
 8007164:	2600      	movs	r6, #0
 8007166:	42a6      	cmp	r6, r4
 8007168:	d105      	bne.n	8007176 <__libc_init_array+0x2e>
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007170:	4798      	blx	r3
 8007172:	3601      	adds	r6, #1
 8007174:	e7ee      	b.n	8007154 <__libc_init_array+0xc>
 8007176:	f855 3b04 	ldr.w	r3, [r5], #4
 800717a:	4798      	blx	r3
 800717c:	3601      	adds	r6, #1
 800717e:	e7f2      	b.n	8007166 <__libc_init_array+0x1e>
 8007180:	08007258 	.word	0x08007258
 8007184:	08007258 	.word	0x08007258
 8007188:	08007258 	.word	0x08007258
 800718c:	0800725c 	.word	0x0800725c

08007190 <memcpy>:
 8007190:	440a      	add	r2, r1
 8007192:	4291      	cmp	r1, r2
 8007194:	f100 33ff 	add.w	r3, r0, #4294967295
 8007198:	d100      	bne.n	800719c <memcpy+0xc>
 800719a:	4770      	bx	lr
 800719c:	b510      	push	{r4, lr}
 800719e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a6:	4291      	cmp	r1, r2
 80071a8:	d1f9      	bne.n	800719e <memcpy+0xe>
 80071aa:	bd10      	pop	{r4, pc}

080071ac <_init>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	bf00      	nop
 80071b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b2:	bc08      	pop	{r3}
 80071b4:	469e      	mov	lr, r3
 80071b6:	4770      	bx	lr

080071b8 <_fini>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	bf00      	nop
 80071bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071be:	bc08      	pop	{r3}
 80071c0:	469e      	mov	lr, r3
 80071c2:	4770      	bx	lr
